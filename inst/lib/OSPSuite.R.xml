<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OSPSuite.R</name>
    </assembly>
    <members>
        <member name="M:OSPSuite.R.Api.ForceGC">
            <summary>
            Forces the Garbage collection 
            </summary>
        </member>
        <member name="P:OSPSuite.R.Domain.SensitivityAnalysisRunOptions.ShowProgress">
            <summary>
               Specifies whether progress bar should be shown during simulation run. Default is <c>true</c>
            </summary>
        </member>
        <member name="M:OSPSuite.R.Domain.SimulationBatch.ExportToCPPCode(System.String,System.Boolean,System.String)">
            <summary>
               Export model as C++ code; keep parameters and initial values set in InitializeWith as variable
            </summary>
            <param name="outputFolder">Model .cpp file will be created here</param>
            <param name="fullMode">
               If true: all parameters will be set as to be varied before export (will only have effect if SimModel simulation was
               not finalized yet
               If false: parameters will be simplified (where possible)
            </param>
            <param name="modelName">
               If empty (default): model will be named Standard and exported to Standard.cpp
               Otherwise: model will be named to "modelName" in the C++ code and exported to modelName.cpp.
               modelName must be both valid file name AND valid C++ identifier in such a case
            </param>
        </member>
        <member name="M:OSPSuite.R.Domain.SimulationBatch.Run(OSPSuite.R.Domain.SimulationBatchRunValues)">
            <summary>
               Updates the parameter values and species initial values of the simulation and run the simulation synchronously.
               This is really the only method that will be called from R
            </summary>
            <returns>Results of the simulation run</returns>
        </member>
        <member name="P:OSPSuite.R.Domain.SimulationRunOptions.CheckForNegativeValues">
            <summary>
               Specifies whether negative values check is on or off. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:OSPSuite.R.Domain.SimulationRunOptions.ShowProgress">
            <summary>
               Specifies whether progress bar should be shown during simulation run. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:OSPSuite.R.Services.IConcurrentSimulationRunner.SimulationRunOptions">
            <summary>
               General simulation options
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IConcurrentSimulationRunner.AddSimulation(OSPSuite.Core.Domain.IModelCoreSimulation)">
            <summary>
               Adds a simulation to the list of Simulations
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IConcurrentSimulationRunner.AddSimulationBatch(OSPSuite.R.Domain.ConcurrentRunSimulationBatch)">
            <summary>
               Adds a SimulationBatch to the list of SimulationBatches
            </summary>
            <param name="simulationBatch">the concurrent batch to add</param>
        </member>
        <member name="M:OSPSuite.R.Services.IConcurrentSimulationRunner.Clear">
            <summary>
               Clear all data for freshly start
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IConcurrentSimulationRunner.RunConcurrently">
            <summary>
               Runs all preset settings concurrently
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSPSuite.R.Services.IConcurrentSimulationRunner.RunConcurrentlyAsync">
            <summary>
               After initialization phase, run all simulations or simulationBatches Async
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSPSuite.R.Services.IContainerTask.AllParametersForSensitivityAnalysisMatching(OSPSuite.Core.Domain.ISimulation,System.String)">
            <summary>
               Returns all parameter matching <paramref name="path" /> that could meaningfully be used in a SA analysis.
               For example, it will only return parameter used in model, non-categorical etc.
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IContainerTask.BaseUnitNameByPath(OSPSuite.Core.Domain.IModelCoreSimulation,System.String,System.Boolean)">
            <summary>
               Returns names of base units of entities with given path.
            </summary>
            <param name="simulation">Simulation to use to find the quantity by path</param>
            <param name="path">Absolute path of the quantity</param>
            <param name="throwIfNotFound">Should an error be thrown if the quantity by path is not found?</param>
        </member>
        <member name="M:OSPSuite.R.Services.IContainerTask.DimensionNameByPath(OSPSuite.Core.Domain.IModelCoreSimulation,System.String,System.Boolean)">
            <summary>
               Returns names of dimension of entities with given path (may contain wildcards)
            </summary>
            <param name="simulation">Simulation to use to find the quantity by path</param>
            <param name="path">Absolute path of the quantity</param>
            <param name="throwIfNotFound">Should an error be thrown if the quantity by path is not found?</param>
        </member>
        <member name="M:OSPSuite.R.Services.IContainerTask.IsExplicitFormulaByPath(OSPSuite.Core.Domain.IModelCoreSimulation,System.String,System.Boolean)">
            <summary>
               Returns if the start values of entities with given path (may contain wildcards) are defined by an explicit formula
            </summary>
            <param name="simulation">Simulation to use to find the quantity by path</param>
            <param name="path">Absolute path of the quantity</param>
            <param name="throwIfNotFound">Should an error be thrown if the quantity by path is not found?</param>
        </member>
        <member name="M:OSPSuite.R.Services.IContainerTask.AddQuantitiesToSimulationOutputByPath(OSPSuite.Core.Domain.IModelCoreSimulation,System.String)">
            <summary>
               Adds quantities with given path (may contain wildcards) to output selections of the simulation.
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IContainerTask.SetValueByPath(OSPSuite.Core.Domain.IModelCoreSimulation,System.String,System.Double,System.Boolean)">
            <summary>
               Sets the value of the quantity by path
            </summary>
            <param name="simulation">Simulation containing the value to set</param>
            <param name="path">Full path. Wild card not allowed</param>
            <param name="value">Value to set in base unit</param>
            <param name="throwIfNotFound">Should an error be thrown if the quantity by path is not found?</param>
        </member>
        <member name="M:OSPSuite.R.Services.IContainerTask.GetValueByPath(OSPSuite.Core.Domain.IModelCoreSimulation,System.String,System.Boolean)">
            <summary>
               Gets the value of the quantity by path
            </summary>
            <param name="simulation">Simulation containing the value to set</param>
            <param name="path">Full path. Wild card not allowed</param>
            <param name="throwIfNotFound">Should an error be thrown if the quantity by path is not found?</param>
            <returns>Value in base unit</returns>
        </member>
        <member name="T:OSPSuite.R.Services.CsvSeparatorSelector">
            <summary>
               This class is used by the CsvDataSourceFile ro correctly parse csv files
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.DataImporterTask.CreateConfiguration">
            <summary>
               Creates an empty configuration with the columns "Time" and "Measurement".
            </summary>
            <returns>A new configuration object</returns>
        </member>
        <member name="M:OSPSuite.R.Services.DataImporterTask.AddError(OSPSuite.Core.Import.ImporterConfiguration)">
            <summary>
               Add an error column to the configuration if no error column is present.
               If the configuration already has an error column, the method does nothing.
            </summary>
            <param name="configuration">Configuration object</param>
        </member>
        <member name="M:OSPSuite.R.Services.IDataRepositoryTask.LoadDataRepository(System.String)">
            <summary>
               Loads the data repository located at <paramref name="fileName" />
            </summary>
            <param name="fileName">Full path of the pkml file containing the data repository to load</param>
            <returns>The data repository</returns>
        </member>
        <member name="M:OSPSuite.R.Services.IDataRepositoryTask.SaveDataRepository(OSPSuite.Core.Domain.Data.DataRepository,System.String)">
            <summary>
               Saves the data repository to file
            </summary>
            <param name="dataRepository">Data repository to save</param>
            <param name="fileName">Full path where the <paramref name="dataRepository" /> will be saved</param>
        </member>
        <member name="M:OSPSuite.R.Services.IDataRepositoryTask.GetMeasurementColumn(OSPSuite.Core.Domain.Data.DataRepository)">
            <summary>
               Returns the first instance of a measurement column (e.g. ColumnOrigin is Observation) defined in the repository of
               null if not found.
               <exception cref="T:OSPSuite.Utility.Exceptions.OSPSuiteException">is thrown if there are more than one measurement column in the data repository</exception>
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IDataRepositoryTask.GetErrorColumn(OSPSuite.Core.Domain.Data.DataColumn)">
            <summary>
               Returns the Error column associated with the <paramref name="column" /> or <c>null</c> if none is defined
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IDataRepositoryTask.AddErrorColumn(OSPSuite.Core.Domain.Data.DataColumn,System.String,System.String)">
            <summary>
               Adds an error column associated to the <paramref name="column" />. The error type is one of ArithmeticStdDev or
               GeometricStdDev as string.
               The column will also be added to the data repository where <paramref name="column" /> is defined
            </summary>
            <param name="column">Column for which an error column should be created</param>
            <param name="name">Name of the error column</param>
            <param name="errorType">Error type for error column</param>
        </member>
        <member name="M:OSPSuite.R.Services.IDataRepositoryTask.RemoveColumn(OSPSuite.Core.Domain.Data.DataRepository,OSPSuite.Core.Domain.Data.DataColumn)">
            <summary>
               Removes the <paramref name="column" /> from the <paramref name="dataRepository" />. if the column is a related
               column, the association will also be removed. If the column is a base grid column, it can only be removed if the
               data repository has no other column
            </summary>
            <param name="dataRepository">DataRepository containing the column to remove</param>
            <param name="column">Column to remove</param>
        </member>
        <member name="M:OSPSuite.R.Services.IDataRepositoryTask.AddMetaData(OSPSuite.Core.Domain.Data.DataRepository,System.String,System.String)">
            <summary>
               Adds a new meta data by key. If the meta already exists, it will be overwritten
            </summary>
            <param name="dataRepository">DataRepository for which the new meta data should be added/updated</param>
            <param name="key">Key identifying the meta data</param>
            <param name="value">Value</param>
        </member>
        <member name="M:OSPSuite.R.Services.IDataRepositoryTask.RemoveMetaData(OSPSuite.Core.Domain.Data.DataRepository,System.String)">
            <summary>
               Removes the meta data by key if it exists
            </summary>
            <param name="dataRepository">DataRepository for which the meta data should be removed</param>
            <param name="key">Key of the meta data to remove</param>
        </member>
        <member name="M:OSPSuite.R.Services.IDataRepositoryTask.SetColumnOrigin(OSPSuite.Core.Domain.Data.DataColumn,System.String)">
            <summary>
               Set the <see cref="T:OSPSuite.Core.Domain.Data.ColumnOrigins" /> for the column given as parameter
            </summary>
            <param name="column">Data column to set</param>
            <param name="columnOrigin">String representation of the column origin (<see cref="T:OSPSuite.Core.Domain.Data.ColumnOrigins" /></param>
        </member>
        <member name="M:OSPSuite.R.Services.IDataRepositoryTask.CreateEmptyObservationRepository(System.String,System.String)">
            <summary>
               Creates a standard observation repository with two columns and standard default dimensions
            </summary>
            <param name="baseGridName">Name of the baseGrid column</param>
            <param name="columnName">Name of the observation column</param>
            <returns></returns>
        </member>
        <member name="M:OSPSuite.R.Services.IDimensionTask.HasDimension(System.String)">
            <summary>
               Returns <c>true</c> if a dimension named <paramref name="dimensionName" /> exists otherwise <c>false</c>
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IDimensionTask.DimensionForStandardPKParameter(OSPSuite.Core.Domain.PKAnalyses.StandardPKParameter)">
            <summary>
               Returns the default dimension for the <paramref name="standardPKParameter" />.
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IDimensionTask.DimensionForStandardPKParameter(System.Int32)">
            <summary>
               Returns the default dimension for the <paramref name="standardPKParameter" />. Note: we use an int because there is
               an issue with signature matching with R
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IDimensionTask.AllAvailableDimensions">
            <summary>
               Returns an array containing all dimensions defined in the suite
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IDimensionTask.AllAvailableDimensionNames">
            <summary>
               Returns the name of all dimensions defined in the suite
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IDimensionTask.AllAvailableUnitNamesFor(System.String)">
            <summary>
               Returns the name of all units defined in the suite for the given <paramref name="dimensionName" />
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IDimensionTask.HasUnit(System.String,System.String)">
            <summary>
               Returns <c>true</c> if <paramref name="unit" /> exists in <paramref name="dimensionName" /> otherwise <c>false</c>
               Throws an exception if a dimension named <paramref name="dimensionName" /> does not exist
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IDimensionTask.BaseUnitFor(System.String)">
            <summary>
               Returns the baseUnit for the dimension named <paramref name="dimensionName" />.
               Throws an exception if a dimension named <paramref name="dimensionName" /> does not exist
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IDimensionTask.ExtractNameAndUnit(System.String)">
            <summary>
            Returns an array containing name and unit defined in the given text (typically header of csv or excel file)
            The name will be defined in the first element and the unit in the second element of the returned array.
            If not unit could be extracted, the text is return as is and the unit is empty
            </summary>
            <example>
            extractUnit("Value") => ["Value", ""]
            extractUnit("Value [unit]") => ["Value", "unit"]
            extractUnit("Value [unit] ") => ["Value", "unit"]
            extractUnit("Value [raw] 1 [unit]") => ["Value [raw] 1", "unit"]
            extractUnit("Value [raw] [unit]") => ["Value [raw]", "unit"]
            extractUnit("Value [raw] 1") => ["Value [raw] 1", ""]
            extractUnit("[Value] [unit]") => ["[Value]", "unit"]
            </example>
        </member>
        <member name="T:OSPSuite.R.Services.CalculatePKAnalysisArgs">
            <summary>
               Required because of optional DynamicParameters dependencies
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.IPopulationTask.SplitPopulation(System.String,System.Int32,System.String,System.String)">
            <summary>
            Loads the population from the <paramref name="populationFile"/> and split the loaded population according to the <paramref name="numberOfCores"/>.
            Resulting files will be exported in the <paramref name="outputFolder"/>. File names will be constructed using the <paramref name="outputFileName"/>
            concatenated with the core index.
            Returns an array of string containing the full path of the population files created
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.ISensitivityAnalysisRunner.RunAsync(OSPSuite.R.Domain.SensitivityAnalysis,OSPSuite.R.Domain.SensitivityAnalysisRunOptions)">
            <summary>
               Runs the sensitivity analysis and returns a Core Sensitivity analysis holding the sensitivity analysis results
            </summary>
            <param name="sensitivityAnalysis">Sensitivity analysis to run</param>
            <param name="runOptions">Options to use for the run. If not defined, the default options will be used</param>
            <returns>a Core Sensitivity analysis holding the sensitivity analysis results</returns>
        </member>
        <member name="M:OSPSuite.R.Services.ISensitivityAnalysisRunner.Run(OSPSuite.R.Domain.SensitivityAnalysis,OSPSuite.R.Domain.SensitivityAnalysisRunOptions)">
            <summary>
               Runs the sensitivity analysis and returns a Core Sensitivity analysis holding the sensitivity analysis results
            </summary>
            <param name="sensitivityAnalysis">Sensitivity analysis to run</param>
            <param name="runOptions">Options to use for the run. If not defined, the default options will be used</param>
            <returns>a Core Sensitivity analysis holding the sensitivity analysis results</returns>
        </member>
        <member name="M:OSPSuite.R.Services.ISensitivityAnalysisTask.PotentialVariableParameterPathsFor(OSPSuite.Core.Domain.ISimulation)">
            <summary>
               Returns an array of parameters that are potential candidate to perturb for a sensitivity analysis performed for
               <paramref name="simulation" />
            </summary>
            <param name="simulation">Simulation used</param>
            <returns>An array of parameter path</returns>
        </member>
        <member name="M:OSPSuite.R.Services.ISensitivityAnalysisTask.ExportResultsToCSV(OSPSuite.Core.Domain.SensitivityAnalyses.SensitivityAnalysisRunResult,OSPSuite.Core.Domain.ISimulation,System.String)">
            <summary>
               Exports sensitivity analysis run results to the csv file with path <paramref name="csvFile" />
            </summary>
            <param name="sensitivityAnalysisRunResult">Sensitivity analysis run result to export</param>
            <param name="simulation">Simulation used</param>
            <param name="csvFile">Full path of csv file where results should be exported</param>
        </member>
        <member name="M:OSPSuite.R.Services.ISensitivityAnalysisTask.ImportResultsFromCSV(OSPSuite.Core.Domain.IModelCoreSimulation,System.String[])">
            <summary>
               Imports  sensitivity analysis run results from one or more csv files defined in <paramref name="csvFiles" />
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.ISensitivityAnalysisTask.SensitivityParameterNameForParameter(OSPSuite.Core.Domain.IParameter)">
            <summary>
            Returns the sensitivity parameter name for the <paramref name="parameter"/>
            For instance parameter Volume in Liver would return Liver-Volume
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.ISimulationResultsTask.ExportResultsToCSV(OSPSuite.Core.Domain.Data.SimulationResults,OSPSuite.Core.Domain.IModelCoreSimulation,System.String)">
            <summary>
               Exports simulation results to the csv file with path <paramref name="csvFile" />
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.ISimulationResultsTask.ImportResultsFromCSV(OSPSuite.Core.Domain.IModelCoreSimulation,System.String[])">
            <summary>
               Import simulation results from one or more csv files defined in <paramref name="csvFiles" />
            </summary>
        </member>
        <member name="M:OSPSuite.R.Services.ISimulationTask.CloneForBatchRun(OSPSuite.Core.Domain.IModelCoreSimulation)">
            <summary>
               Returns a clone of the simulation that can be used during batch run.
               This simulation will contain the minimal information required to run. Configuration settings (e.g. some building
               blocks) will not be copied over
            </summary>
            <param name="simulation">Simulation to clone</param>
        </member>
    </members>
</doc>
