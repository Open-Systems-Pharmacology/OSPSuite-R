<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PKSim.Core</name>
    </assembly>
    <members>
        <member name="T:PKSim.Core.IApplicationSettings">
            <inheritdoc />
        </member>
        <member name="P:PKSim.Core.IApplicationSettings.MoBiPath">
            <summary>
               Full path to MoBi exe. This path will be used if MoBi cannot be found using standard registry mechanism. Can be null
            </summary>
        </member>
        <member name="P:PKSim.Core.Chart.CurveData`2.FieldKeyValues">
            <summary>
            Dictionary containing all fields {Name, Value} that where used to create this curve based on the population data
            </summary>
        </member>
        <member name="P:PKSim.Core.Chart.CurveData`2.QuantityPath">
            <summary>
            Path of underlying quantity being displayed. This is only set if the field is an IQuantityField
            </summary>
        </member>
        <member name="P:PKSim.Core.Chart.CurveData`2.YDimension">
            <summary>
            Dimension in which the y values are stored. 
            </summary>
        </member>
        <member name="M:PKSim.Core.Chart.CurveData`2.#ctor">
            <summary>
               Convenience constructor especially useful for tests
            </summary>
        </member>
        <member name="P:PKSim.Core.Chart.RangeXValue.NumberOfItems">
            <summary>
               Number of elements defined in interval [Minimum, Maximum]
            </summary>
        </member>
        <member name="T:PKSim.Core.Commands.AddPKAnalysesToSimulationCommand">
            <summary>
               this is not a reversible command!
            </summary>
        </member>
        <member name="P:PKSim.Core.Commands.IBuildingBlockChangeCommand.IncrementVersion">
            <summary>
               Specifies if the command should increment or decrement the version of the building block changed by the execute
            </summary>
        </member>
        <member name="P:PKSim.Core.Commands.IBuildingBlockChangeCommand.BuildingBlockId">
            <summary>
               Returns the building block id of the building block being currently changed by the command
            </summary>
        </member>
        <member name="P:PKSim.Core.Commands.IBuildingBlockChangeCommand.ShouldChangeVersion">
            <summary>
               Specifies if the command should increment the version of the building block commands or not. Default is true.
               Set to false, the version of the building block will not be change. Used for instance when adding an alternative
            </summary>
        </member>
        <member name="M:PKSim.Core.Commands.IBuildingBlockChangeCommand.UpdateInternalFrom(PKSim.Core.Commands.IBuildingBlockChangeCommand)">
            <summary>
               Update internal properties of the building block change command, especially useful to create
               inverse command initialized with all necessary flags
            </summary>
            <param name="originalCommand">Command from which the parameter should be updated</param>
        </member>
        <member name="M:PKSim.Core.Commands.BuildingBlockChangeCommand.UpdateInternalFrom(PKSim.Core.Commands.IBuildingBlockChangeCommand)">
            <summary>
               Allows the inverse command to be updated with some internal parameter of the original command
               that are not passed in constructor
            </summary>
            <param name="originalCommand">The original building block command</param>
        </member>
        <member name="M:PKSim.Core.Commands.BuildingBlockIrreversibleStructureChangeCommand.UpdateInternalFrom(PKSim.Core.Commands.IBuildingBlockChangeCommand)">
            <summary>
               Allows the inverse command to be updated with some internal parameter of the original command
               that are not passed in constructor
            </summary>
            <param name="originalCommand">The original building block command</param>
        </member>
        <member name="T:PKSim.Core.Commands.NormalizeRelativeExpressionCommand">
            <summary>
               In charge of normalizing all expressions value so that the maximal value is 1, and all
               other values are scaled accordingly
               For Instance if we have the following expressions
               Liver : 10
               Kidney :10
               Stomach:20
               The normalized result would be
               Liver : 0.5
               Kidney :0.5
               Stomach:1
            </summary>
        </member>
        <member name="M:PKSim.Core.Commands.PKSimCommandExtensions.ReplaceNameTemplateWithName(OSPSuite.Core.Commands.IOSPSuiteCommand,System.String)">
            <summary>
               Replace the occurence of the term Template with the given name
            </summary>
        </member>
        <member name="F:PKSim.Core.Commands.RemoveBuildingBlockFromProjectCommand._dueToSwap">
            <summary>
               indicates that the remove command comes from the swap command
            </summary>
        </member>
        <member name="T:PKSim.Core.Commands.SetParameterUnitStructureChangeCommand">
            <summary>
               Wrapper around SetParameterUnitCommand that should be a BuildingBlockStructureChange
            </summary>
        </member>
        <member name="T:PKSim.Core.Commands.SetParameterValueStructureChangeCommand">
            <summary>
               Wrapper around SetParameterValueCommand that should be a BuildingBlockStructureChange
            </summary>
        </member>
        <member name="T:PKSim.Core.Commands.SetPopulationSimulationResultsCommand">
            <summary>
               this is not a reversible command!
            </summary>
        </member>
        <member name="T:PKSim.Core.Events.SimulationUpdatedEvent">
            <summary>
            Event is thrown typically when a simulation is updated from building block
            </summary>
        </member>
        <member name="M:PKSim.Core.Extensions.CurveExtensions.IsConcentrationTimeProfile(OSPSuite.Core.Chart.Curve)">
            <summary>
            Returns <c>true</c> if the <paramref name="curve"/> represents a Concentration Time profile curve otherwise <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Extensions.CurveExtensions.ForPKAnalysis(System.Collections.Generic.IEnumerable{OSPSuite.Core.Chart.Curve})">
            <summary>
            Returns the subset of <see cref="T:OSPSuite.Core.Chart.Curve"/> defined in <paramref name="curves"/> that can be used for PK-Analysis calculations
            </summary>
        </member>
        <member name="M:PKSim.Core.Extensions.DataRepositoryExtensions.IntersectingMetaData(System.Collections.Generic.IReadOnlyList{OSPSuite.Core.Domain.Data.DataRepository})">
            <summary>
            Gets the intersecting metadata for an enumeration of data repositories. The intersection is all metadata with keys contained in all repositories meta data
            </summary>
            <param name="dataRepositories">The repositories being scanned for intersecting metadata</param>
            <returns>An enumerable of IExtendedProperty which is a key-value pairing of metadata</returns>
        </member>
        <member name="M:PKSim.Core.Extensions.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
               Returns the index of the first occurrence in a sequence
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="list">A sequence in which to locate a value.</param>
            <param name="value">The object to locate in the sequence</param>
            <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
        </member>
        <member name="M:PKSim.Core.Extensions.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
               Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="list">A sequence in which to locate a value.</param>
            <param name="value">The object to locate in the sequence</param>
            <param name="comparer">An equality function to compare values.</param>
            <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
        </member>
        <member name="M:PKSim.Core.Extensions.EnumerableExtensions.ToCaption(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a caption out of a list of strings using the path separator
            </summary>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="M:PKSim.Core.Extensions.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
               Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="list">A sequence in which to locate a value.</param>
            <param name="value">The object to locate in the sequence</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
        </member>
        <member name="M:PKSim.Core.Extensions.EnumerableExtensions.HasAtLeastTwo``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
               Returns true if there are at least two elements in the list (>1) otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Core.Extensions.FormulaExtensions.ReplaceKeywordsInObjectPaths(OSPSuite.Core.Domain.Formulas.IFormula,System.String[],System.String[])">
            <summary>
            In each object path: replaces path entries from <paramref name="keywords"/> with entries from <paramref name="replacementValues"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Extensions.SimulationConfigurationExtensions.Module(OSPSuite.Core.Domain.Builder.SimulationConfiguration)">
            <summary>
            Short cut to access the one and only module defined in PK-Sim per configuration
            </summary>
            <returns>The first module from the module configuration</returns>
        </member>
        <member name="M:PKSim.Core.Extensions.StringExtensions.IsSurrogate(System.String)">
            <summary>
               Returns true if the container is representing a generic compartment such as blood cells, plasma or endosome
            </summary>
        </member>
        <member name="M:PKSim.Core.Extensions.StringExtensions.IsUndefinedMolecule(System.String)">
            <summary>
               Returns true if the container is representing an undefined molecule.
            </summary>
        </member>
        <member name="T:PKSim.Core.ICoreUserSettings">
            <summary>
               User specific settings influencing the model creation in any ways
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreUserSettings.DefaultSpecies">
            <summary>
               Name of default species that should be used throughout the program for default initialization
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreUserSettings.DefaultPopulation">
            <summary>
               Name of default population in the default species
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreUserSettings.AbsTol">
            <summary>
               Absolute tolerance used by default in  a simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreUserSettings.RelTol">
            <summary>
               Absolute tolerance used by default in  a simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreUserSettings.DefaultLipophilicityName">
            <summary>
               Default name use for lipophilicity alternatives
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreUserSettings.DefaultFractionUnboundName">
            <summary>
               Default name used for fraction unbound alternatives
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreUserSettings.DefaultSolubilityName">
            <summary>
               Default name used for solubility alternatives
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreUserSettings.OutputSelections">
            <summary>
               Returns the default settings or null if not found
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreUserSettings.DefaultPopulationAnalysis">
            <summary>
               Default population analysis type used when starting a population
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreUserSettings.TemplateDatabasePath">
            <summary>
               Path of the template database containing the template building block
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreWorkspace.Project">
            <summary>
               Returns/sets the current project
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreWorkspace.HistoryManager">
            <summary>
               Returns/sets  the history manager
            </summary>
        </member>
        <member name="M:PKSim.Core.ICoreWorkspace.CloseProject">
            <summary>
               Close the current project
            </summary>
        </member>
        <member name="M:PKSim.Core.ICoreWorkspace.SaveProject(System.String)">
            <summary>
               Save the current project
            </summary>
            <param name="fileFullPath">Full path of the file where the project should be saved</param>
        </member>
        <member name="M:PKSim.Core.ICoreWorkspace.OpenProject(System.String)">
            <summary>
               Opens the project located at <paramref name="fileFullPath" />
            </summary>
            <param name="fileFullPath">Full path of the file where the project is located</param>
        </member>
        <member name="M:PKSim.Core.ICoreWorkspace.LoadProject(System.Action)">
            <summary>
               Loads the project using the <paramref name="projectLoadAction" />. The <paramref name="projectLoadAction" /> is
               responsible to
               call <c>Workspace.Project = project</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.ICoreWorkspace.LoadProject(PKSim.Core.Model.PKSimProject)">
            <summary>
               Loads the project <paramref name="project" /> given as parameter
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreWorkspace.ProjectLoaded">
            <summary>
               Returns true if the project has been defined
            </summary>
        </member>
        <member name="P:PKSim.Core.ICoreWorkspace.ProjectHasChanged">
            <summary>
               Returns true if the project has changed and thus should be for instance saved otherwise false
            </summary>
        </member>
        <member name="P:PKSim.Core.IPKSimConfiguration.PKSimDbPath">
            <summary>
               Path of the PKSim Database
            </summary>
        </member>
        <member name="P:PKSim.Core.IPKSimConfiguration.TemplateSystemDatabasePath">
            <summary>
               Path of the System Template Database (Read only DB delivered with setup)
            </summary>
        </member>
        <member name="P:PKSim.Core.IPKSimConfiguration.TemplateUserDatabaseTemplatePath">
            <summary>
               Path of the template used to create a user database (empty database to be copied and renamed)
            </summary>
        </member>
        <member name="P:PKSim.Core.IPKSimConfiguration.DefaultTemplateUserDatabasePath">
            <summary>
               Path of the default user template database created under the current user profile
            </summary>
        </member>
        <member name="P:PKSim.Core.IPKSimConfiguration.MoBiPath">
            <summary>
               Full path to MoBi application exe. This path is read from the registry entry
            </summary>
        </member>
        <member name="P:PKSim.Core.IPKSimConfiguration.RemoteTemplateSummaryPath">
            <summary>
            Full path of the main file containing the list of all available templates
            </summary>
        </member>
        <member name="P:PKSim.Core.IPKSimConfiguration.RemoteTemplateFolderPath">
            <summary>
            Folder path where templates will be downloaded 
            </summary>
        </member>
        <member name="T:PKSim.Core.Mappers.IChartDataToDataTableMapper`2">
            <summary>
               Maps Chart Data to data table. Returns two tables, one containing the row data, and one containing the pivoted data
            </summary>
        </member>
        <member name="M:PKSim.Core.Mappers.IPathAndValueBuildingBlockMapper`3.MapParameter(OSPSuite.Core.Domain.IParameter,`0,OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Map the parameter to the underlying builder parameter.
            </summary>
        </member>
        <member name="M:PKSim.Core.Mappers.IProcessToProcessBuilderMapper.MetabolismReactionFrom(PKSim.Core.Model.CompoundProcess,OSPSuite.Core.Domain.Builder.MoleculeBuilder,OSPSuite.Core.Domain.Builder.MoleculeBuilder,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Create a reaction based on the given <paramref name="process" /> in compound. The reaction will take place between
               the
               <paramref name="compoundBuilder" />
               and the enzyme <paramref name="enzymeName" /> and create the <paramref name="metabolite" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Mappers.IProcessToProcessBuilderMapper.ComplexReactionFrom(PKSim.Core.Model.CompoundProcess,OSPSuite.Core.Domain.Builder.MoleculeBuilder,OSPSuite.Core.Domain.Builder.MoleculeBuilder,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Create a reaction based on the given <paramref name="process" /> in compound. The reaction will take place between
               the the
               <paramref name="compoundBuilder" />
               and the enzyme <paramref name="enzymeName" /> and create an enzyme complex
            </summary>
        </member>
        <member name="M:PKSim.Core.Mappers.IProcessToProcessBuilderMapper.ActiveTransportFrom(PKSim.Core.Model.CompoundProcess,PKSim.Core.Model.IndividualTransporter,PKSim.Core.Model.Individual,OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Create a transport builder container for the given process and transporter
            </summary>
        </member>
        <member name="M:PKSim.Core.Mappers.IProcessToProcessBuilderMapper.PassiveTransportProcessFrom(PKSim.Core.Model.CompoundProcess,System.String,OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Creates a passive transport process based on the given compound process that will be applied to the molecule
               <paramref name="compoundName" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Mappers.IProcessToProcessBuilderMapper.ReactionFrom(OSPSuite.Core.Domain.Builder.ReactionBuilder,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Creates general reaction builder from template
            </summary>
        </member>
        <member name="M:PKSim.Core.Mappers.IProcessToProcessBuilderMapper.TurnoverReactionFrom(OSPSuite.Core.Domain.Builder.ReactionBuilder,OSPSuite.Core.Domain.Builder.MoleculeBuilder,System.Collections.Generic.IReadOnlyCollection{System.String},OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Creates a reaction modeling the creation of the <paramref name="protein" />
            </summary>
            <param name="templateReaction">Template reaction for protein creation</param>
            <param name="protein">Molecule for which the reaction will be created</param>
            <param name="forbiddenNames">
               List of all names that are already existing in the system and cannot be used as reaction
               name
            </param>
            <param name="formulaCache">Formula cache where the kinetic will be saved</param>
        </member>
        <member name="M:PKSim.Core.Mappers.IProcessToProcessBuilderMapper.InactivationReactionFrom(PKSim.Core.Model.InteractionProcess,OSPSuite.Core.Domain.Builder.MoleculeBuilder,System.Collections.Generic.IReadOnlyCollection{System.String},OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Creates a reaction modeling the irreversible binding of the <paramref name="protein" /> with a
               <see cref="T:PKSim.Core.Model.Compound" />
            </summary>
            <param name="interactionProcess">Interaction process defined in compound</param>
            <param name="protein">Molecule for which the reaction will be created</param>
            <param name="forbiddenNames">
               List of all names that are already existing in the system and cannot be used as reaction
               name
            </param>
            <param name="formulaCache">Formula cache where the kinetic will be saved</param>
        </member>
        <member name="M:PKSim.Core.Mappers.IProcessToProcessBuilderMapper.InductionReactionFrom(PKSim.Core.Model.InteractionProcess,OSPSuite.Core.Domain.Builder.MoleculeBuilder,System.Collections.Generic.IReadOnlyCollection{System.String},OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Creates a reaction modeling the induction the <paramref name="protein" /> with a
               <see cref="T:PKSim.Core.Model.Compound" />
            </summary>
            <param name="interactionProcess">Induction process defined in compound</param>
            <param name="protein">Molecule for which the reaction will be created</param>
            <param name="forbiddenNames">
               List of all names that are already existing in the system and cannot be used as reaction
               name
            </param>
            <param name="formulaCache">Formula cache where the kinetic will be saved</param>
        </member>
        <member name="P:PKSim.Core.Model.AdvancedParameter.ParameterPath">
            <summary>
               Path of parameter that is being distributed
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.AdvancedParameter.FullDisplayName">
            <summary>
               Full path of parameter in tree hierarchy. This value will always be set at runtime and does not need to be
               serialized.
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.AdvancedParameter.Seed">
            <summary>
               Seed value used to generate the random numbers
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.AdvancedParameter.generateRandomValue">
            <summary>
               Generates a new random value based on the distribution type and the defined distribution parameters
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.AdvancedParameter.GetPercentileForValue(System.Double)">
            <summary>
               Returns the percentile corresponding to the generated value
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.AdvancedParameter.GenerateRandomValues(System.Int32)">
            <summary>
               Generates an array of random values. The dimension of the array is equal to numberOfValues
            </summary>
            <param name="numberOfValues">Number of values to generate</param>
        </member>
        <member name="P:PKSim.Core.Model.AdvancedParameter.DistributionType">
            <summary>
               Returns the distribution type of the advanced parameter
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.AdvancedParameter.AllParameters">
            <summary>
               Returns the parameter of the underlying distribution
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.AdvancedParameter.DistributedParameter">
            <summary>
               The underlying distributed parameter in charge of calculating the distribution values. This is not the parameter
               targeted by the ParameterPath
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.AdvancedParameter.ResetGenerator">
            <summary>
               Reset the generator with the value of the seed.
               This is necessary if we want to be able to generate the same sequence of random numbers
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.AgingData.ToDataTable">
            <summary>
               Returns or set a <seealso cref="T:System.Data.DataTable" /> containing 4 columns. First one is Individual index, second one is parameter ParameterPath, third one is X value (time) in base unit
               and fourth one is value in base unit
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.IApplicationFactory">
            <summary>
               Creates a new instance of application builder by cloning application template (given by {ApplicationType,
               FormulationType} combination) Formulation parameters collection is only required for particles dissolution
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ApplicationFactory.addApplicationProcessDescriptorCondition(PKSim.Core.Model.ISchemaItem,System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.Builder.TransportBuilder},System.String)">
            <summary>
               Add "condition" as descriptor criteria to every source/target descriptor conditions of given transports, which also
               contain "Application" condition
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ApplicationFactory.addDrugStartFormula(OSPSuite.Core.Domain.Builder.ApplicationBuilder,OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Add start formula for the drug molecule. Will be created in the root application container
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ApplicationType.Name">
            <summary>
               Application name as defined in the PKSim Database
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ApplicationType.Route">
            <summary>
               Which route is used by the application type.
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ApplicationType.NeedsFormulation">
            <summary>
               Does a formulation need to be defined for this type?
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ApplicationType.UserDefined">
            <summary>
               is this application type user defined
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ApplicationType.IconName">
            <summary>
               Name of icon used to represent the application
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Compound.AllSimpleParameters">
            <summary>
               Returns the parameter that are not defined in alternatives
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Compound.IsNeutral">
            <summary>
               returns <c>true</c> if the parameter is neutral otherwise false
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Compound.IsSmallMolecule">
            <summary>
               returns <c>true</c> if the parameter is small molecule otherwise false
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Compound.SupersaturationEnabled">
            <summary>
               returns <c>true</c> if the parameter is small molecule otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Compound.ParameterAlternativeGroup(System.String)">
            <summary>
               Return a parameter group for which alternatives might be defined
            </summary>
            <param name="parameterGroupName">Name of a parameters with alteratives</param>
        </member>
        <member name="M:PKSim.Core.Model.Compound.HasProcesses">
            <summary>
               Returns <c>true</c> if at least one process is defined in the compound otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Compound.HasProcesses``1">
            <summary>
               Returns <c>true</c> if at least one process of type <typeparamref name="TCompoundProcess"/> is defined in the compound otherwise false
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.CompoundPK">
            <summary>
            Represents a cache containing specific PK-Values calculated for a given compound
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.CompoundProcess.InternalName">
            <summary>
            This is the internal name of the process as defined in the database. This should never be changed programmatically
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.CompoundProcess.DataSource">
            <summary>
               Source (reference) where the process was measured
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.CompoundProcess.RefreshName">
            <summary>
               Update name from DataSource
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.CompoundProcessesSelection.AllInducedMoleculeNames(PKSim.Core.Model.IndividualMolecule)">
            <summary>
               returns the name of all molecules that will be created due to the active processes defined for a given protein
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.CompoundProcessesSelection.AllEnablingMoleculeNames">
            <summary>
               Returns the distinct name of all well defined molecules that enable a process (Enzyme, Transport or Protein name)
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.ICompoundProcessParameterMapping">
            <summary>
               Used for mapping of compound process parameters measured in-vitro, in plasma etc.
               Parameters mapped are usually Organ/Compartment volumes, blood flows, etc.
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ICompoundProcessParameterMapping.ProcessName">
            <summary>
               Name of compound process
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ICompoundProcessParameterMapping.ParameterName">
            <summary>
               Name of process parameter to be mapped
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ICompoundProcessParameterMapping.MappedParameterPath">
            <summary>
               Path to the mapped parameter (e.g. ORGANISM/Liver/Volume)
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.CompoundProperties">
            <summary>
               Configuration for one specific compound
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.CompoundProperties.Compound">
            <summary>
               Reference to the compound in the simulation for which the settings apply
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.CompoundProperties.Simulation">
            <summary>
               Reference to parent simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.CompoundProperties.ProtocolProperties">
            <summary>
               Protocol configuration such as formulation mapping for formulation keys
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ContainerExtensions.AllVisibleParameters(OSPSuite.Core.Domain.IContainer)">
            <summary>
               Returns all direct visible parameters (not in sub-containers)
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ContainerExtensions.AllUserDefinedParameters(OSPSuite.Core.Domain.IContainer)">
            <summary>
               Returns all user defined parameters (direct children and in sub-containers)
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ContainerExtensions.IsSurrogate(OSPSuite.Core.Domain.IContainer)">
            <summary>
               Returns true if the container is representing a generic compartment such as blood cells, plasma or endosome
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ContainerExtensions.IsUndefinedMolecule(OSPSuite.Core.Domain.IContainer)">
            <summary>
               Returns true if the container is representing an undefined molecule.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ContainerExtensions.IsOrganWithLumen(OSPSuite.Core.Domain.IContainer)">
            <summary>
            Returns <c>True</c> of the container is an organ with lumen, otherwise <c>False</c>.
            Typically, Kidney, Liver and all mucosal tissues
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.EnzymaticProcess.MetaboliteName">
            <summary>
               Metabolite information is free-form. It does not need to match an existing compound
               It will be matched up during creation of a simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.EnzymaticProcessSelection.MetaboliteName">
            <summary>
               Name of metabolite associated with the enzymatic process. If not set, no metabolite was selected
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.EventMapping.TemplateEventId">
            <summary>
               Id of template event used in mapping
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.EventMapping.StartTime">
            <summary>
               Start time at which the event will be triggered
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ExpressionContainerInfo.ContainerName">
            <summary>
               Name of PK-Sim container for which an expression is required
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ExpressionContainerInfo.ContainerDisplayName">
            <summary>
               Display name for the container
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ExpressionContainerInfo.RelativeExpression">
            <summary>
               Former value for the container if available
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ExpressionResult.ContainerName">
            <summary>
               Name of PK-Sim container for which an expression was found
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ExpressionResult.RelativeExpression">
            <summary>
               Relative expression for that container.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Extensions.DataRepositoryExtensions.PeripheralVenousBloodColumn(OSPSuite.Core.Domain.Data.DataRepository,System.String)">
            <summary>
               tries to find peripheral venous blod plasma if defined in the repository. returns null otherwise
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Extensions.DataRepositoryExtensions.VenousBloodColumn(OSPSuite.Core.Domain.Data.DataRepository,System.String)">
            <summary>
               tries to find venous blood plasma if defined in the repository. returns null otherwise
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.FloatMatrix.AddSortedValues(System.Single[])">
            <summary>
            Add sorted and validated values (i.e NaN were removed)
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.FloatMatrix.AddValuesAndSort(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
               Add values by removing all nan and sorting the values
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.RateFor(PKSim.Core.Model.ParameterRateMetaData,OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Creates and returns a formula based on the <paramref name="rateDefinition" /> and add it to the
               <paramref
                  name="formulaCache" />
               If a formula with the same combo "Rate-CalculationMethods" already exists in the formulaCache, the formula will be
               returned instead
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.ConcentrationFormulaFor(OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Returns the concentration formula for a parameter defined in a molecule amount. if the formula was already defined
               in the formula cache, simply returns the same reference
               <remarks>
                  This cannot be defined in the database so far, since the structure does not allow parameter paths reference
                  as needed (..)
               </remarks>
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.DistributionFor(System.Collections.Generic.IEnumerable{PKSim.Core.Model.ParameterDistributionMetaData},OSPSuite.Core.Domain.IDistributedParameter,PKSim.Core.Model.OriginData)">
            <summary>
               Create and returns a distribution formula based on the given <paramref name="distributions" /> .
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.DistributionFor(PKSim.Core.Model.ParameterDistributionMetaData,OSPSuite.Core.Domain.IDistributedParameter)">
            <summary>
               Create and returns a distribution formula based on the given <paramref name="distributionMetaData" /> .
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.ValueFor(PKSim.Core.Model.ParameterValueMetaData)">
            <summary>
               Creates and returns a constant formula based on the <paramref name="valueDefinition" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.ValueFor(System.Double,OSPSuite.Core.Domain.UnitSystem.IDimension)">
            <summary>
               Creates and returns a constant formula with <paramref name="value"/> and <paramref name="dimension"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.RateFor(PKSim.Core.Model.RateKey,OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Return the formula defined for the rate key and add it to the formula cache, if the formula did not exist already
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.CreateTableFormula(System.Boolean)">
            <summary>
               Creates and returns a table formula
            </summary>
            <param name="useDerivedValues">Indicates of derived values of the table should be used when solving the ODE system. Default is <c>true</c></param>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.CreateDistributedTableFormula">
            <summary>
               creates and returns a distributed table formula
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.RateFor(System.String,System.String,OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Return the formula defined for the combination calculation method - rate and add it to the formula cache, if the
               formula did not exist already
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.RHSRateFor(PKSim.Core.Model.ParameterRateMetaData,OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Creates and returns RHS formula based on the <paramref name="parameterRateDefinition" /> and add it to the
               <paramref
                  name="formulaCache" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.BMIFormulaFor(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.IParameter)">
            <summary>
               Creates a formula for BMI referencing the two parameters weight and height
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.AgeFormulaFor(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.IParameter)">
            <summary>
               Creates a formula for age referencing the time in the simulation. This is required for aging simulation.
            </summary>
            <param name="age0Parameter">
               Default age parameter (typically with a constant value that will be used to create the
               formula)
            </param>
            <param name="minToYearFactorParameter">Factor to convert time in min to year</param>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.DrugMassFormulaFor(OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Returns the drug mass formula for an application molecule builder 
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.DoseFromDosePerBodyWeightFor(OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Returns the Dose Formula as a function of the DosePerBodyWeight parameter;
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IFormulaFactory.DoseFromDosePerBodySurfaceAreaFor(OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Returns the Dose Formula as a function of the DosePerBodyWeight parameter;
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.FormulaFactory.addTimeReferenceIfNeeded(OSPSuite.Core.Domain.Formulas.FormulaWithFormulaString)">
            <summary>
               Checks if formula equation is time dependent and add reference to
               <para></para>
               Time (if not already done)
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Formulation.FormulationType">
            <summary>
               Type of formulation (identifier)
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Formulation.Routes">
            <summary>
               Application route (iv, oral, dermal, ...)
               formulation can be used for
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Formulation.IsTable">
            <summary>
               returns true if the formulation is defining a table formulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Formulation.IsParticleDissolution">
            <summary>
               returns true if the formulation is defining a particle dissolution formulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Formulation.IsDissolved">
            <summary>
               returns true if the formulation is defining a dissolved formulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Formulation.IsMonodisperse">
            <summary>
            Returns <c>true</c> if the formulation is particle formulation using monodisperse system otherwise <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Formulation.IsPolydisperse">
            <summary>
            Returns <c>true</c> if the formulation is particle formulation using polydisperse system otherwise <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Formulation.IsPolydisperseNormal">
            <summary>
            Returns <c>true</c> if the formulation is a poly disperse particle formulation using a normal distribution for particle size otherwise <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Formulation.IsPolydisperseLogNormal">
            <summary>
            Returns <c>true</c> if the formulation is a poly disperse particle formulation using a lognormal distribution for particle size otherwise <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Formulation.AddRoute(System.String)">
            <summary>
               add a route to the list of routes where the formula can be used
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:PKSim.Core.Model.Formulation.HasRoute(System.String)">
            <summary>
               returns true if the formulation can be used by the given route otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Formulation.UpdateParticleParametersVisibility">
            <summary>
            Updates visibility and default state of parameters based on disperse system and particle size (only for Particle Dissolution formulation)
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.FormulationMapping.FormulationKey">
            <summary>
               Key used in the protocol for which a mapping is required
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.FormulationMapping.TemplateFormulationId">
            <summary>
               Id of template formulation in project used for mapping
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.FormulationMapping.Formulation">
            <summary>
            Actual formulation reference used in the mapping (this does not be to be serialized. It's only used temporarily to create the simulation).
            The Formulation referenced here is either the template building block or the simulation building block changed in the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IAdvancedParameterContainer.AddAdvancedParameter(PKSim.Core.Model.AdvancedParameter,System.Boolean)">
            <summary>
               Add and advanced parameter to the container. When the parameter <paramref name="generateRandomValues" /> is set to
               true (default),
               random values are also generated for the advanced parameters
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IAdvancedParameterContainer.GenerateRandomValuesFor(PKSim.Core.Model.AdvancedParameter)">
            <summary>
               Create a new set of random values for the advanced parameter
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IAdvancedParameterContainer.AllAdvancedParameters(OSPSuite.Core.Domain.Services.IEntityPathResolver)">
            <summary>
               Returns the parameters defined as advanced in the container
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IAdvancedParameterContainer.AllConstantParameters(OSPSuite.Core.Domain.Services.IEntityPathResolver)">
            <summary>
               Returns the parameters defined as constant in the container
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationFile.NumberOfIndividuals">
            <summary>
               Number of individual in imported file
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ImportPopulation.Settings">
            <summary>
               Population settings for the population
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IImportPopulationFactory.CreateFor(System.Collections.Generic.IReadOnlyCollection{System.String},PKSim.Core.Model.Individual,System.Threading.CancellationToken)">
            <summary>
               Create a population importing the data from the specified list of <paramref name="files" />. The
               <paramref
                  name="cancellationToken" />
               allows the caller to cancel the task
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Individual.Seed">
            <summary>
               Seed used to initialize the random generator while creating the individual
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Individual.OriginData">
            <summary>
               Origin data defining the property used to create the individual
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Individual.Population">
            <summary>
               Population used to create the individual (based on the selected species)
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Individual.AllOrgans">
            <summary>
               all available organs in the individual
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Individual.AvailableGenders">
            <summary>
               Returns the available genders defined for the population in which the individual belongs
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Individual.AllMolecules">
            <summary>
               All molecules defined in the individual
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Individual.AllDefinedMolecules">
            <summary>
               All defined molecules defined in the individual
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Individual.AllUndefinedMolecules">
            <summary>
               All defined molecules defined in the individual
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Individual.AllMolecules``1">
            <summary>
               All protein of type <typeparamref name="TMolecule" /> in the individual
            </summary>
            <typeparam name="TMolecule"> Type of molecule to be retrieved </typeparam>
        </member>
        <member name="M:PKSim.Core.Model.Individual.AllMolecules``1(System.Func{``0,System.Boolean})">
            <summary>
               All protein of type <typeparamref name="TMolecule" /> in the individual
            </summary>
            <typeparam name="TMolecule"> Type of molecule to be retrieved </typeparam>
        </member>
        <member name="M:PKSim.Core.Model.Individual.MoleculeByName``1(System.String)">
            <summary>
               Return the protein with the name <paramref name="name" /> if defined in the individual, otherwise null
            </summary>
            <typeparam name="TMolecule"> Type of protein </typeparam>
            <param name="name"> Name of protein </param>
        </member>
        <member name="M:PKSim.Core.Model.Individual.MoleculeBy``1(System.Func{``0,System.Boolean})">
            <summary>
               Return the first protein meeting the search criteria, or null if not found
            </summary>
            <typeparam name="TMolecule"> Type of protein </typeparam>
            <param name="criteria"> search criteria </param>
        </member>
        <member name="P:PKSim.Core.Model.Individual.Age">
            <summary>
               Input age of the individual.
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Individual.InputWeight">
            <summary>
               Input Weight of the individual.
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Individual.InputHeight">
            <summary>
               Input Height of the individual.
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Individual.MeanHeight">
            <summary>
               Mean height as defined in the database for the organism
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Individual.MeanWeight">
            ///
            <summary>
               Mean weight as defined in the database for the organism
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Individual.WeightParameter">
            <summary>
               Actual weight of the individual (might differ from input weight and mean weight if volumes were changed)
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Individual.AgeParameter">
            <summary>
               Actual age of the individual
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Individual.HasMolecules">
            <summary>
               Returns <c>true</c> if at least one molecule is defined in the individual otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Individual.HasMolecules``1">
            <summary>
               Returns <c>true</c> if at least one molecule of type <typeparamref name="TIndividualMolecule" />is defined in the
               individual otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Individual.AllPhysicalContainersWithMoleculeFor(PKSim.Core.Model.IndividualMolecule)">
            <summary>
               Returns all possible (physical) containers of the organism in which <paramref name="molecule" /> will be defined or
               an empty array if the organism is not defined
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Individual.AllMoleculeParametersFor(PKSim.Core.Model.IndividualMolecule)">
            <summary>
               Returns all possible molecule parameters defined for <paramref name="molecule" /> in the individual.
               This also returns the global molecule parameters
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Individual.AllMoleculeContainersFor(PKSim.Core.Model.IndividualMolecule)">
            <summary>
               Returns all possible molecule containers of the individual in which <paramref name="molecule" /> will be defined.
               This also returns global container under the global molecule named after <paramref name="molecule" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Individual.AllMoleculeContainersFor``1(PKSim.Core.Model.IndividualMolecule)">
            <summary>
               Returns all possible molecule containers of the individual in which <paramref name="molecule" /> will be defined.
               This also returns global container under the global molecule named after <paramref name="molecule" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IIndividualFactory.CreateAndOptimizeFor(PKSim.Core.Model.OriginData,System.Nullable{System.Int32})">
            <summary>
               Create an individual an optimize the volume if required. if the <paramref name="seed" /> parameter is defined, it
               will be used as seed in the created individual
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IndividualSimulation.DataRepository">
            <summary>
               Representation in memory of the actual simulation results
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IndividualSimulation.VenousBloodColumn(System.String)">
            <summary>
               tries to find venous blood plasma if defined in the repository. returns null otherwise
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IndividualTransporter.TransportType">
            <summary>
               Transporter type => Direction of transport
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.InteractionProperties.Any">
            <summary>
               Returns true if any interaction is defined otherwise false
            </summary>
            <returns></returns>
        </member>
        <member name="P:PKSim.Core.Model.InteractionProperties.InteractingMoleculeNames">
            <summary>
               Returns the names of all molecules involved in interaction processes
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.InteractionProperties.Uses(PKSim.Core.Model.InteractionProcess)">
            <summary>
               Returns <c>true</c> if the <paramref name="interactionProcess" /> is being used as part of the interactions
               otherwise <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.InteractionSelection.Matches(PKSim.Core.Model.InteractionProcess)">
            <summary>
            Returns <c>true</c> if the <paramref name="interactionProcess"/> matches the compound and process used in this selection otherwise <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IPopulationDataCollector.SupportsMultipleAggregations">
            <summary>
            Returns true if supports different aggregation methods, e.g. based on aggregated curve or aggregated from all individuals
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.IProcessMapping">
            <summary>
            Defines the mapping of a <see cref="T:PKSim.Core.Model.CompoundProcess"/> in a <see cref="T:PKSim.Core.Model.Compound"/> and an <see cref="T:PKSim.Core.Model.IndividualMolecule"/> in an <see cref="T:PKSim.Core.Model.Individual"/>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IProcessMapping.ProcessName">
            <summary>
               Process name as defined in <see cref="T:PKSim.Core.Model.Compound"/>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IProcessMapping.MoleculeName">
            <summary>
               Name of <see cref="T:PKSim.Core.Model.IndividualMolecule"/> in charge of triggering the reaction (defined in <see cref="T:PKSim.Core.Model.Individual"/>)
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IProcessMapping.CompoundName">
            <summary>
            Name of the <see cref="T:PKSim.Core.Model.Compound"/> where the process is defined. This is required as the same name may be used for a process in different <see cref="T:PKSim.Core.Model.Compound"/>.
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.IReactionMapping">
            <summary>
            Defines a reaction mapping resulting in the creation of a product
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IReactionMapping.ProductName(System.String)">
            <summary>
               Returns the name of the product resulting of the reaction induced by the process and the drug
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.ISimulationSubject">
            <summary>
               Defines an item that can be simulated in a simulation (e.g. a population or an individual)
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ISimulationSubject.OriginData">
            <summary>
               Origin data defining the property used to create the individual or the population
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ISimulationSubject.Species">
            <summary>
               Species used to create the individual
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ISimulationSubject.IsHuman">
            <summary>
               Returns <c>true</c> if the underlying species is Human otherwise <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ISimulationSubject.IsPreterm">
            <summary>
               Returns <c>true</c> if the underlying subject is preterm otherwise <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ISimulationSubject.IsAgeDependent">
            <summary>
               Returns <c>true</c> if the underlying individual is age dependent otherwise <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.MoleculeByName(System.String)">
            <summary>
               Returns the molecule named <paramref name="moleculeName" /> or NULL if not found
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.MoleculeByName``1(System.String)">
            <summary>
               Returns the molecule named <paramref name="moleculeName" /> or NULL if not found
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.ExpressionProfileFor(PKSim.Core.Model.IndividualMolecule)">
            <summary>
            Returns the expression profile associated with the <paramref name="molecule"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.AddExpressionProfile(PKSim.Core.Model.ExpressionProfile)">
            <summary>
               Adds a <paramref name="expressionProfile" /> reference to the underlying subject
            </summary>
            <param name="expressionProfile"> Expression profile to add </param>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.RemoveExpressionProfile(PKSim.Core.Model.ExpressionProfile)">
            <summary>
               Removes a <paramref name="expressionProfile" /> from the subject
            </summary>
            <param name="expressionProfile">Expression profile to remove </param>s
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.AllExpressionProfiles">
            <summary>
              Returns all expression profiles used by the subject
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.MoleculeFor(PKSim.Core.Model.ExpressionProfile)">
            <summary>
             Returns the molecule associated with the expression profile or null if the expression profile isn't used
            </summary>
            <param name="expressionProfile"></param>
            <returns></returns>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.Uses(PKSim.Core.Model.ExpressionProfile)">
            <summary>
            Returns <c>true</c> if the expression profile is used by the subject otherwise <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.AddMolecule(PKSim.Core.Model.IndividualMolecule)">
            <summary>
               Add a <paramref name="molecule" /> to the subject
            </summary>
            <param name="molecule"> Molecule to add </param>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.RemoveMolecule(PKSim.Core.Model.IndividualMolecule)">
            <summary>
               Remove a <paramref name="molecule" /> from the subject
            </summary>
            <param name="molecule"> Molecule to remove </param>
            <returns>all containers for the simulation subject that were removed from the individual structure</returns>
        </member>
        <member name="P:PKSim.Core.Model.ISimulationSubject.Individual">
            <summary>
               The underlying individual associated with the simulation subject
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.AllExpressionParametersFor(PKSim.Core.Model.IndividualMolecule)">
            <summary>
               Returns a cache with all expression parameters defined for <paramref name="molecule" /> in the simulation subject.
               Global expression parameters are also returned
            </summary>
            <example>If we have the following structure Kidney|Intracellular|CYP3A4|RelExp, it will return (Kidney, RelExp)</example>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.AllMoleculeContainersFor(PKSim.Core.Model.IndividualMolecule)">
            <summary>
             Returns all possible molecule containers of the individual in which <paramref name="molecule"/> will be defined.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationSubject.AllMoleculeContainersFor``1(PKSim.Core.Model.IndividualMolecule)">
            <summary>
               Returns all possible molecule containers of the individual in which <paramref name="molecule" /> will be defined.
               This also returns global container under the global molecule named after <paramref name="molecule" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IVectorialParametersContainer.AllValuesFor(System.String)">
            <summary>
               Returns the values defined for the parameter in the container
               The returned array contains one element for each item in the container and as thus
               the dimension [0..NumberOfItems -1]
            </summary>
            <param name="parameterPath">Parameter path of parameter for which the value over all individuals should be retrieved</param>
        </member>
        <member name="M:PKSim.Core.Model.IVectorialParametersContainer.AllPercentilesFor(System.String)">
            <summary>
               Returns the percentile defined for the parameter in the container
               The returned array contains one element for each item in the container and as thus
               the dimension [0..NumberOfItems -1]
            </summary>
            <param name="parameterPath">Parameter path of parameter for which the percentiles over all individuals should be retrieved</param>
        </member>
        <member name="P:PKSim.Core.Model.IVectorialParametersContainer.NumberOfItems">
            <summary>
               Vector dimension
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IVectorialParametersContainer.AllVectorialParameters(OSPSuite.Core.Domain.Services.IEntityPathResolver)">
            <summary>
               Returns all distinct vectorial parameters defined in the container
            </summary>
            <param name="entityPathResolver">Services used to resolve the path of the given parameter</param>
        </member>
        <member name="M:PKSim.Core.Model.IVectorialParametersContainer.AllParameters(OSPSuite.Core.Domain.Services.IEntityPathResolver)">
            <summary>
               Returns a cache containing all parameters defined in the containers (vectorial and constants) that can potentially be defined
               as vectorial parameters
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IVectorialParametersContainer.ParameterByPath(System.String,OSPSuite.Core.Domain.Services.IEntityPathResolver)">
            <summary>
               Returns the vectorial parameter with the given path or null if not found
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IVectorialParametersContainer.AllGenders(PKSim.Core.Repositories.IGenderRepository)">
            <summary>
               Returns all genders associated to the vectorial container
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IVectorialParametersContainer.AllCovariateValuesFor(System.String)">
            <summary>
            Returns all covariates values defined for the covariate named <paramref name="covariateName"/>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IVectorialParametersContainer.AllCovariateNames">
            <summary>
            Returns all defined covariate names
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IVectorialParametersContainer.DisplayParameterUsingGroupStructure">
            <summary>
            Returns whether the parameters should be displayed using the group structure or the container structure
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IVersionable.Version">
            <summary>
               Version of the building block  when the simulation was created or building block version itself
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IVersionable.StructureVersion">
            <summary>
               Structure version of the building block when the simulation was created or building block structure version itself
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.ModelConfiguration">
            <summary>
            A model configuration defineds for a given model and species the list of possible category and all their calculation methods.
            This does not contain the selected calculation methods, just the possible selection
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.MoleculeExpressionContainer.RelativeExpression">
            <summary>
               relative expression value for the container
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.MoleculeExpressionContainer.RelativeExpressionParameter">
            <summary>
               Parameter representing the relative expression value for this container
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.MoleculeExpressionContainer.LogicalContainer">
            <summary>
               Returns the logical container where the expression container is defined.
               The parent is typically a compartment so we go one level up (parent.parent) 
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.MoleculeExpressionContainer.LogicalContainerName">
            <summary>
               Returns the name of the logical container where the expression container is defined.
               The parent is typically a compartment so we go one level up (parent.parent) and get its name.
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.MoleculeExpressionContainer.CompartmentName">
            <summary>
               Returns the name of the physical container where the expression container is defined.
               The parent is typically a compartment 
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.IMoleculeStartFormula">
            <summary>
               Start formula of a molecule amount in container
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IMoleculeStartFormula.MoleculePath">
            <summary>
               Database path to the molecule, e.g. "ORGANISM\Liver\Plasma\DRUG"
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IMoleculeStartFormula.RateKey">
            <summary>
               Calculation method and rate for given formula
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ObserverSetMapping.TemplateObserverSetId">
            <summary>
               Id of template observer set used in mapping
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Organism.Organ(System.String)">
            <summary>
               Returns the organ with the given name if defined, or null otherwise
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Organism.OrgansByType(PKSim.Core.Model.OrganType)">
            <summary>        
               Returns collection of organs whose type match <c>organType</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Organism.OrgansByName(System.String[])">
            <summary>
               Returns collection of organs whose name is one of <c>names</c>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Organism.NonGITissueContainers">
            <summary>
               Returns all non-GI tissue containers defined in the organism
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Organism.GITissueContainers">
            <summary>
               Returns all GI tissue containers defined in the organism
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Organism.TissueContainers">
            <summary>
               Returns all tissue containers (Non-GI and GI) defined in the organism
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.OrganType">
            <summary>
                One type for each organ. This type allows us to easily create
                collections of organs subset
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.OriginDataParameter.Name">
            <summary>
               Name of parameter. Can be null if parameter is used as field
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.OriginDataParameter.Value">
            <summary>
               Value of parameter, always in base unit
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.OriginDataParameter.Unit">
            <summary>
               Unit used When the parameter was entered. This is the unit selected by the user and it not necessarily the base unit
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.ParameterAlternative">
            <summary>
               Represents one alternative for a group of compound parameters
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IParameterAlternativeFactory.CreateTableAlternativeFor(PKSim.Core.Model.ParameterAlternativeGroup,System.String)">
            <summary>
            Creates an alternatuve with parameter <paramref name="tableParameterName"/> formula set to a default <see cref="T:OSPSuite.Core.Domain.Formulas.TableFormula"/>
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.ParameterAlternativeGroup">
            <summary>
               Represents list of alternatives for a group of compound parameters
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ParameterAlternativeGroup.AllAlternatives">
            <summary>
               All available alternative definitions for current group.
               One alternative contains all group parameters
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ParameterAlternativeGroup.DefaultAlternative">
            <summary>
               Returns the default alternative if defined otherwise the first alternative, if any is available
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ParameterAlternativeGroup.TemplateParameters">
            <summary>
               Template parameters for current group (usually read from Db)
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ParameterExtensions.ValueIsDefined(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Returns <c>true</c> if the value can be computed and is not NaN otherwise <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ParameterExtensions.ValueIsComputable(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Returns <c>true</c> if the value can be computed otherwise <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ParameterExtensions.ScaleFactor(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Returns the factor with which the value was changed from current value
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IParameterFactory.CreateFor(System.String,OSPSuite.Core.Domain.PKSimBuildingBlockType)">
            <summary>
               Returns a default parameter with the name set to <paramref name="parameterName" /> and the buildingBlockType set to
               <paramref name="buildingBlockType" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IParameterFactory.CreateFor(System.String,System.Double,OSPSuite.Core.Domain.PKSimBuildingBlockType)">
            <summary>
               Returns a default parameter with the name set to <paramref name="parameterName" />, the value set to
               <paramref name="defaultValue" />
               and the buildingBlockType set to <paramref name="buildingBlockType" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IParameterFactory.CreateFor(System.String,System.Double,System.String,OSPSuite.Core.Domain.PKSimBuildingBlockType)">
            <summary>
               Returns a default parameter with the name set to <paramref name="parameterName" /> , the value set to
               <paramref name="defaultValue" />
               ,
               the dimension set to  <paramref name="dimensionName" /> and the buildingBlockType set to
               <paramref name="buildingBlockType" />
            </summary>
            <exception cref="T:OSPSuite.Core.Domain.NotFoundException">
               is thrown if the no dimension can be found in the dimension repository with the given
               <paramref name="dimensionName" />
            </exception>
        </member>
        <member name="M:PKSim.Core.Model.IParameterFactory.CreateFor(PKSim.Core.Model.ParameterRateMetaData,OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Returns a parameter with a formula rate defined according to <paramref name="parameterRateDefinition" /> and add the
               formula in the
               <paramref name="formulaCache" />
               if the formula was not added already
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IParameterFactory.CreateFor(PKSim.Core.Model.ParameterValueMetaData)">
            <summary>
               Returns a parameter with a constant formula defined according to <paramref name="parameterValueDefinition" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IParameterFactory.CreateFor(System.Collections.Generic.IReadOnlyList{PKSim.Core.Model.ParameterDistributionMetaData},PKSim.Core.Model.OriginData)">
            <summary>
               Returns a distributed parameter with a distributed formula created according to the distributions definition
               <paramref name="distributions" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IParameterFactory.CreateConcentrationParameterIn(OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Create a concentration parameter with the concentration formula equal to amount / volume of parent compartment
               The created formula will be added in the <paramref name="formulaCache" />if it does not exist already
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ParameterMessages.DisplayValueFor(OSPSuite.Core.Domain.IParameter,System.Boolean)">
            <summary>
               Returns the formatted display value for the <paramref name="parameter" />. If the flag
               <paramref name="numericalDisplayOnly" /> is set to <c>true</c>, the returned display value will only contain
               numbers. Otherwise unit will be added to display and boolean will be converted to true or false.
               Default value if <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ParameterMetaData.IsInput">
            <summary>
               Species if the parameter is a parameter set by the user or a input parameter parameter set in the DB. Default value
               is <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ParameterMetaData.IsDefault">
            <summary>
               Species if the parameter is a parameter set by the user or a default parameter parameter set in the DB. Default
               value is <c>true</c>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PartialProcess.MoleculeName">
            <summary>
               Name of the molecule responsible for triggering the process
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IPKSimBuildingBlock.Root">
            <summary>
               Root Container of the building block (container of all sub containers and parameters)
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IPKSimBuildingBlock.HasChanged">
            <summary>
               Indicates if a loaded building block was changed and hence needs to be saved
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.IPKSimBuildingBlock.OwnedBy">
            <summary>
            A building block might use building block internally to hold structure
            (ExpressionProfile or Population have an internal individual instance).
            In this case, this would be the reference to the parent building block
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PKSimEvent.TemplateName">
            <summary>
               Name of event builder template used to create the building block
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PKSimProject.OutputSelections">
            <summary>
               returns the default settings for the given settings type or null if not found
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PKSimProject.AllSimulationComparisons">
            <summary>
               Returns all <see cref="T:PKSim.Core.Model.ISimulationComparison" /> defined in the project
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PKSimProject.AllQualificationPlans">
            <summary>
               Returns all <see cref="T:PKSim.Core.Model.QualificationPlan" /> defined in the project
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PKSimProject.AddSimulationComparison(PKSim.Core.Model.ISimulationComparison)">
            <summary>
               Adds the <paramref name="simulationComparison" /> to the project
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PKSimProject.AddQualificationPlan(PKSim.Core.Model.QualificationPlan)">
            <summary>
               Adds the <paramref name="qualificationPlan" /> to the project
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PKSimProject.RemoveSimulationComparison(PKSim.Core.Model.ISimulationComparison)">
            <summary>
               Removes the <paramref name="simulationComparison" /> from the project
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PKSimProject.All(OSPSuite.Core.Domain.PKSimBuildingBlockType)">
            <summary>
               Returns all the building block of a given type <paramref name="buildingBlockType" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PKSimProject.All``1(System.Func{``0,System.Boolean})">
            <summary>
               Returns all the building block of a given type <typeparamref name="T" /> matching a given predicate
            </summary>
            <typeparam name="T">Type if building block</typeparam>
        </member>
        <member name="M:PKSim.Core.Model.PKSimProject.AddBuildingBlock(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Add a building block to the project
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PKSimProject.RemoveBuildingBlock(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Remove a building block from the project
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PKSimProject.AllDataRepositories">
            <summary>
            Returns all <see cref="T:OSPSuite.Core.Domain.Data.DataRepository"/> defined in the project. They are collected from all <see cref="T:PKSim.Core.Model.IndividualSimulation"/> having results and all ObservedData defined in the project
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IPKSimSpatialStructureFactory.CreateFor(PKSim.Core.Model.Individual,PKSim.Core.Model.Simulation)">
            <summary>
               Create the spatial structure based on the individual and model properties
            </summary>
            <param name="individual">individual building block</param>
            <param name="simulation">Simulation</param>
        </member>
        <member name="P:PKSim.Core.Model.Population.IndividualValuesCache">
            <summary>
               The underlying cache managing the individuals and their values
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Population.Seed">
            <summary>
               Seed used to generate random values for the population
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Population.AllOrganismValuesFor(System.String,OSPSuite.Core.Domain.Services.IEntityPathResolver)">
            <summary>
               Returns all values defined for the organism parameter names <paramref name="parameterName" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Population.AddIndividualValues(OSPSuite.Core.Domain.Populations.IndividualValues)">
            <summary>
               Add one individual to the population
            </summary>
            <param name="individualValues">properties of individual added to population</param>
        </member>
        <member name="P:PKSim.Core.Model.Population.FirstIndividual">
            <summary>
               Return the fist individual defined in the population
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Population.AllIndividualParameters">
            <summary>
               Return the individual parameters defined in the population
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.AxisSettings.AutoRange">
            <summary>
            Indicates that the axis range is automatically configured by the control to fit all the content
            In other words, Min and Max would not be applied.
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.PopulationAnalyses.NumberOfBinsGroupingDefinition">
            <summary>
               This class separates a list of values into n groups.
            </summary>
            <remarks>
               Same as Limits with
               Limits = 1*100/Bins Percentile(Field), 2*100/Bins Percentile(Field).. (Bins-1)*100/Bins Percentile(Field)
            </remarks>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.GroupingDefinition.FieldName">
            <summary>
               The name of the underlying field being referenced by the grouping definition
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.GroupingDefinition.CanBeUsedFor(System.Type)">
            <summary>
               Returns true if the grouping definition can be defined for a field of type <paramref name="dataType" /> otherwise
               false
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.IntervalGroupingDefinition.Dimension">
            <summary>
               Dimension of the referenced field
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.IntervalGroupingDefinition.Limits">
            <summary>
               Limits used to calculate the intervals. The limit should be ordered
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.IntervalGroupingDefinition.DisplayUnit">
            <summary>
               Display unit of the referenced field
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.IntervalGroupingDefinition.GetExpression">
            <summary>
               This method generates an expression labelling intervals of values with lables.
            </summary>
            <remarks>
               Intervals are [-Inf;L1[,[L1;L2[,[L2;L3[,..,[Ln-1;Ln[,[Ln;Inf].
            </remarks>
        </member>
        <member name="T:PKSim.Core.Model.PopulationAnalyses.NumericFieldContext">
            <summary>
            This is required to retrieve Molweight in Merge Dimensions. We avoid that way a back reference from an analysis to its populationDataCollector
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.PopulationAnalyses.ObservedDataCollection">
            <summary>
               Represents a collection of <see cref="T:OSPSuite.Core.Domain.Data.DataRepository" /> also containing <see cref="M:PKSim.Core.Model.PopulationAnalyses.ObservedDataCollection.ObservedDataCurveOptions" /> for
               each observed data columns.
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.PopulationAnalyses.PivotResult">
            <summary>
            Contains the information required to create the ChartData for a given analysis
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PivotResult.Analysis">
            <summary>
            Analysis for which chart data should be created
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PivotResult.PivotedData">
            <summary>
            Data resulting of the pivotation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PivotResult.PopulationDataCollector">
            <summary>
            Reference to the <see cref="T:PKSim.Core.Model.IPopulationDataCollector"/> used to create the <see cref="P:PKSim.Core.Model.PopulationAnalyses.PivotResult.PivotedData"/> based on the <see cref="P:PKSim.Core.Model.PopulationAnalyses.PivotResult.Analysis"/>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PivotResult.ObservedDataCollection">
            <summary>
            Reference to the <see cref="P:PKSim.Core.Model.PopulationAnalyses.PivotResult.ObservedDataCollection"/> that might be associated to the <see cref="P:PKSim.Core.Model.PopulationAnalyses.PivotResult.Analysis"/> that should be displayed
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PivotResult.AggregationName">
            <summary>
            Name of the column in the <see cref="P:PKSim.Core.Model.PopulationAnalyses.PivotResult.PivotedData"/> that will contain the value of the aggregation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PivotResult.DataColumnName">
            <summary>
            Name of the column in the <see cref="P:PKSim.Core.Model.PopulationAnalyses.PivotResult.PivotedData"/> that will contain the key representing the aggregated data
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysis.RenameField(System.String,System.String)">
            <summary>
               Renames the field named <paramref name="oldFieldName" /> to <paramref name="newFieldName" />
               and ensure that all derived fields and grouping depending on that field are updated as well
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysis.AllFieldsReferencedBy(PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDerivedField)">
            <summary>
               Returns all fields referenced (either directly or indirectly) by the <paramref name="derivedField" />.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysis.AllFieldsReferencing(PKSim.Core.Model.PopulationAnalyses.IPopulationAnalysisField)">
            <summary>
               Returns all fields referencing (either directly or indirectly) the <paramref name="populationAnalysisField" />.
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDataField.DerivedFieldAllowed">
            <summary>
               Specifies wether derived field can be defined for the current <see cref="T:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDataField" />. Default is
               <c>true</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDerivedField.IsDerivedTypeFor``1">
            <summary>
               Returns true if this is derived field for a field of type <typeparamref name="T" /> otherwise false.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDerivedField.IsDerivedTypeFor(System.Type)">
            <summary>
               Returns true if this is derived field for a field of type <paramref name="fieldType" /> otherwise false.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDerivedField.RenameReferencedField(System.String,System.String)">
            <summary>
               Renames any referenced field used named <paramref name="oldFieldName" /> to <paramref name="newFieldName" />.
               Does not rename anything if the field is not being used
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDerivedField.ReferencedFieldNames">
            <summary>
               Returns the names of all fields referenced bu the this derived field
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDerivedField.CanBeUsedFor(System.Type)">
            <summary>
               Returns true if the derived field can be used for a data field whose data are of type <paramref name="dataType" />
               otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisExpressionField.RenameReferencedField(System.String,System.String)">
            <summary>
               This method renames a referenced field within the expression.
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisFieldBase.PopulationAnalysis">
            <summary>
               Reference to the population analysis containing the field
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisFieldBase.Compare(System.Object,System.Object)">
            <summary>
               This method defines a sorter for values of the field.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisGroupingField.Compare(System.Object,System.Object)">
            <summary>
               This method compares the given values using the ordering of the labels.
            </summary>
            <remarks>
               The user has specified a list of string representations for grouping continous data
               and therefor the specified labels represent an interval of underlying data values.
               The data is ordered and therefor the values of the field should be sorted by the index of the value in
               the labels array.
            </remarks>
            <param name="value1">For an interval grouping definition, a label, otherwise a value</param>
            <param name="value2">For an interval grouping definition, a label, otherwise a value</param>
        </member>
        <member name="T:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisNumericField">
            <summary>
               Represents a field that can be used in the analyses. This is required to ensure that the numeric type
               used throughout the analysis are consistent
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisNumericField.DisplayUnit">
            <summary>
               Unit in which the field should be displayed
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisNumericField.Dimension">
            <summary>
               Dimension of the underlying
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisOutputField.DisplayUnit">
            <summary>
               Unit in which the field should be displayed
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisOutputField.Dimension">
            <summary>
               Dimension of the underlying
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.PopulationPivotAnalysis.Compare(System.String,System.String)">
            <summary>
               This compare method s used to give an ordering for PopulationAnalysisFields.
            </summary>
            <param name="x">Name of PopulationAnalysisField</param>
            <param name="y">Name of PopulationAnalysisField</param>
            <returns>Order information</returns>
        </member>
        <member name="P:PKSim.Core.Model.PopulationAnalyses.PopulationStatisticalAnalysis.TimeUnit">
            <summary>
            Unit in which the statistical analysis will be displayed
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.PopulationAnalyses.PredefinedStatisticalAggregation">
            <summary>
               One of the predefined selected curved such as median, mean etc..
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.PopulationAnalyses.PercentileStatisticalAggregation">
            <summary>
               One of the dynamic percentile selection curved
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationAnalyses.ValueMappingGroupingDefinition.GetExpression">
            <summary>
               This method creates an expression labelling mapped values with mapped labels.
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.PopulationSimulation.ParameterValuesCache">
            <summary>
               All the distributed parameters of the population simulation. This does not contain the distributed parameter of the
               underlying population
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationSimulation.AddAgingTableFormula(System.String,System.Int32,OSPSuite.Core.Domain.Formulas.TableFormula)">
            <summary>
               Add the TableFormula representing the aging data for the individual with index <paramref name="individualIndex" />
               and the parameter
               with path <paramref name="parameterPath" />.
            </summary>
            <param name="parameterPath">Parameter full path</param>
            <param name="individualIndex">Index of individual</param>
            <param name="tableFormula">TableFormula representing the growth function for the parameter</param>
        </member>
        <member name="P:PKSim.Core.Model.PopulationSimulation.AllPotentialAdvancedParameters">
            <summary>
               Returns all parameters that could potentially be defined as advanced parameters in a simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.PopulationSimulation.AllOrganismValuesFor(System.String,OSPSuite.Core.Domain.Services.IEntityPathResolver)">
            <summary>
               Returns all values defined for the organism parameter names <paramref name="parameterName" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ProcessSelectionGroup.AllEnablingMoleculeNames">
            <summary>
               Returns the distinct name of all well defined molecules that enable a process (Enzyme, Transport or Protein name)
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ProcessSelectionGroup.ProcessSelectionFor(PKSim.Core.Model.SystemicProcessType)">
            <summary>
               returns the systemic process for the given type if it was defined and mapped
               otherwise null
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Protocol.TimeUnit">
            <summary>
               Time in minute when the protocol will end
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.ProtocolProperties.Protocol">
            <summary>
            Reference to <see cref="P:PKSim.Core.Model.ProtocolProperties.Protocol"/> used in the simulation.
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.QueryExpressionResults.QueryConfiguration">
            <summary>
               Query configuration that will be saved in pksim and should be used to restore the query when loaded a second time
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.QueryExpressionResults.ProteinName">
            <summary>
               Name of selected Protein
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.QueryExpressionResults.SelectedUnit">
            <summary>
               Name of selected Unit
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.QueryExpressionResults.Description">
            <summary>
               Description of whole action to be used for command description.
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.QueryExpressionResults.ExpressionResults">
            <summary>
               Results of query
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.QueryExpressionSettings.ExpressionContainers">
            <summary>
               All containers for which a protein expression might be retrieved
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.QueryExpressionSettings.QueryConfiguration">
            <summary>
               Former query configuration when the component is called for the second time or after project load
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.RandomPopulation.Settings">
            <summary>
               Population settings for the given random population
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.IRandomPopulationFactory.CreateFor(PKSim.Core.Model.RandomPopulationSettings,System.Threading.CancellationToken,System.Nullable{System.Int32},System.Boolean)">
            <summary>
               Creates a random population using the specified <paramref name="populationSettings" />.
               The <paramref name="cancellationToken" /> allows the caller to cancel the task. If the <paramref name="seed" /> is
               provided, it will be set in the created population to generate random values
            </summary>
            <param name="populationSettings">Population settings used to create the population</param>
            <param name="cancellationToken">Allows the called to cancel the task</param>
            <param name="seed">
               If provided, the seed will be used to generate random values and will overwrite the seed created in
               the population
            </param>
            <param name="addMoleculeParametersVariability">
               If set to <c>true</c> (default), default parameter variability will be
               created for all molecules for which information is available in the database
            </param>
        </member>
        <member name="P:PKSim.Core.Model.Schema.oneRepetionLength">
            <summary>
               repetion length is the max betweed time span between the first and the last schema item
               and the time between repetitions
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ISchemaItemFactory.Create(PKSim.Core.Model.ApplicationType,OSPSuite.Core.Domain.IContainer)">
            <summary>
            Returns a new <see cref="T:PKSim.Core.Model.ISchemaItem"/> with an application type set to <paramref name="applicationType"/>. Its name will be unique in the
            <paramref name="container"/> if defined
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ISchemaItemFactory.CreateBasedOn(PKSim.Core.Model.SchemaItem,OSPSuite.Core.Domain.IContainer)">
            <summary>
            Returns an exact duplicate of the <paramref name="schemaItemToClone"/> and adjust its name to be unique in the
            <paramref name="container"/>
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.ResultsVersion">
            <summary>
               Returns the version that the simulation had when it was run and the simulation was saved
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.Model">
            <summary>
               underlying Core Model used to run the simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.Reactions">
            <summary>
               The reaction building block used to create the simulation. This is only use as meta information
               on model creation for now. Adding <see cref="T:OSPSuite.Core.Domain.Reaction" /> to the building block will not change the model structure
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.UsedBuildingBlocks">
            <summary>
               Returns all building blocks used by the simulation.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.UsedBuildingBlockById(System.String)">
            <summary>
               Returns the building block with the given building block id
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.UsedBuildingBlockBy(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Returns <see cref="T:PKSim.Core.Model.UsedBuildingBlock" /> using the <paramref name="buildingBlockInSimulation" /> as BuildingBlock
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.TemplateBuildingBlockIdUsedBy(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Returns the template id of the <see cref="T:PKSim.Core.Model.IPKSimBuildingBlock" /> used by the simulation
               <see cref="T:PKSim.Core.Model.IPKSimBuildingBlock" /> <paramref name="buildingBlockInSimulation" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.UsedBuildingBlockByTemplateId(System.String)">
            <summary>
               Returns <see cref="T:PKSim.Core.Model.UsedBuildingBlock" /> with the given building block template id
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.BuildingBlockByTemplateId``1(System.String)">
            <summary>
               Returns <see cref="T:PKSim.Core.Model.UsedBuildingBlock" /> with the given building block template id
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.GetAltered(System.String)">
            <summary>
               return true if the building block with the given id was altered in the simulation otherwise false
            </summary>
            <param name="usedBuildingBlockId">id of the building block for which the altered status is retrieved</param>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.SetAltered(System.String,System.Boolean)">
            <summary>
               Set the altered status of the building block with the id buildingBlockId in the simulation to the altered value.
               <param name="altered">the value of the altered status</param>
               <param name="usedBuildingBlockId">id of the building block for which the status should be changed</param>
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.ParametersOfType(OSPSuite.Core.Domain.PKSimBuildingBlockType)">
            <summary>
               return all parameters defined with the given building block type
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.All``1">
            <summary>
               Returns all entities of the given type defined in the simulation (from config entities to model entities)
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.AddUsedBuildingBlock(PKSim.Core.Model.UsedBuildingBlock)">
            <summary>
               Add a building block as being used by the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.RemoveUsedBuildingBlock(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Remove the building block as used in the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.RemoveUsedBuildingBlock(PKSim.Core.Model.UsedBuildingBlock)">
            <summary>
               Remove the building block as used in the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.RemoveUsedBuildingBlock(System.String)">
            <summary>
               Remove the building block as used in the simulation using the templateId
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.RemoveAllBuildingBlockOfType(OSPSuite.Core.Domain.PKSimBuildingBlockType)">
            <summary>
               Remove the building blocks as used in the simulation by type
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.UsesBuildingBlock(PKSim.Core.Model.UsedBuildingBlock)">
            <summary>
               Return true if the simulation uses the given building block otherwise false.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.UsesBuildingBlock(System.String)">
            <summary>
               Return true if the simulation uses the given building block id otherwise false.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.AddAnalysis(OSPSuite.Core.Domain.ISimulationAnalysis)">
            <summary>
               add a analysis to the simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.UsedObservedData">
            <summary>
               Returns all used observed data in the simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.Analyses">
            <summary>
               All analyses defined for the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.AnalysesOfType``1">
            <summary>
               All analyses defined for the simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.Charts">
            <summary>
               All charts defined for the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.RemoveAnalysis(OSPSuite.Core.Domain.ISimulationAnalysis)">
            <summary>
               remove the chart from the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.RemoveUsedObservedData(OSPSuite.Core.Domain.Data.DataRepository)">
            <summary>
               Mark the observed data as unused in the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.RemoveOutputMappings(OSPSuite.Core.Domain.Data.DataRepository)">
            <summary>
               Remove the output mappings mapped to the dataRepository
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.UsesObservedData(OSPSuite.Core.Domain.Data.DataRepository)">
            <summary>
               returns true if the observed data is used in the current simulation otherwise false
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.Results">
            <summary>
               Results of the simulation, if the simulation was run
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.ComesFromPKSim">
            <summary>
               Returns true if the simulation originated from PK-Sim. Otherwise false
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.IsImported">
            <summary>
               Returns true if the simulation was imported (e.g. through pkml load). Otherwise false
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.HasUpToDateResults">
            <summary>
               Returns true if the simulation results are up-to-date.
               (true: simulation was performed with current parameters, false: simulation parameters have changed ...)
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.ResultsHaveChanged">
            <summary>
               Returns true if a simulation run was performed and the results where updated since the simulation was loaded
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.ClearResults">
            <summary>
               Remove the available results and the corresponding charts
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.UpdateFromOriginalSimulation(PKSim.Core.Model.Simulation)">
            <summary>
               Update the common settings from the original simulation. This is only used when configuring
               a simulation based on another one (no clone involved)
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.TotalDrugMassPerBodyWeightFor(System.String)">
            <summary>
               returns the total drug mass per body weight in [umol/kg BW]
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.EndTime">
            <summary>
               Returns the end time of the simulation in kernel unit
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.Properties">
            <summary>
               gets or sets the simulation properties used to configure the simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.BodyWeight">
            <summary>
               Returns the Body weight <see cref="T:OSPSuite.Core.Domain.IParameter" /> if available in the simulation otherwise null.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.TotalDrugMassFor(System.String)">
            <summary>
               Returns the total drug mass defined in the simulation.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.BuildingBlock``1">
            <summary>
               returns the building block used in the simulation with the given type
            </summary>
            <typeparam name="TBuildingBlock">type of the building block we are looking for in the simulation</typeparam>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.AllBuildingBlocks``1">
            <summary>
               returns all building blocks used in the simulation of a given type
            </summary>
            <typeparam name="TBuildingBlock">type of the building blocks we are looking for in the simulation</typeparam>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.UsedBuildingBlockInSimulation``1">
            <summary>
               Returns the building block used in the simulation with the given building block type
            </summary>
            <typeparam name="TBuildingBlock">type of the building blocks we are looking for in the simulation</typeparam>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.UsedBuildingBlocksInSimulation``1">
            <summary>
               Returns the building blocks used in the simulation with the given building block type
            </summary>
            <typeparam name="TBuildingBlock">type of the building blocks we are looking for in the simulation</typeparam>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.UsedBuildingBlockInSimulation(OSPSuite.Core.Domain.PKSimBuildingBlockType)">
            <summary>
               Returns the building block used in the simulation with the given building block type.
               If multiple building blocks are found, the first one is returned.
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.Simulation.UsedBuildingBlocksInSimulation(OSPSuite.Core.Domain.PKSimBuildingBlockType)">
            <summary>
               Returns all the building block with the given type used in the simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.AllowAging">
            <summary>
               Specifies if the simulation subject should age during simulation run
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.OutputSelections">
            <summary>
               Returns the <see cref="P:PKSim.Core.Model.Simulation.OutputSelections" /> for the simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.ModelProperties">
            <summary>
               return the model properties used in the simulation configuration
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.OutputSchema">
            <summary>
               Returns the <see cref="T:OSPSuite.Core.Domain.OutputSchema" /> defined in the settings
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.Solver">
            <summary>
               Returns the <see cref="P:PKSim.Core.Model.Simulation.Solver" />  defined in the settings
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.CompoundPropertiesList">
            <summary>
               Returns the compound properties used in the simulation configuration
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.ModelConfiguration">
            <summary>
               Returns the model used in the simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.EventProperties">
            <summary>
               Returns the event mappings used in the simulation configuration
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.ObserverSetProperties">
            <summary>
               Returns the observer set mappings used in the simulation configuration
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.Simulation.InteractionProperties">
            <summary>
               Returns the interactions used in the simulation configuration
            </summary>
        </member>
        <member name="T:PKSim.Core.Model.ISimulationFactory">
            <summary>
               Creates a simulation based on properties given as parameter
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationFactory.CreateFrom(PKSim.Core.Model.ISimulationSubject,System.Collections.Generic.IReadOnlyList{PKSim.Core.Model.Compound},PKSim.Core.Model.ModelProperties,PKSim.Core.Model.Simulation)">
            <summary>
               Creates a new simulation using the given <paramref name="simulationSubject" /> and <paramref name="compounds" /> as
               building block as well as the <paramref name="modelProperties" />.
               The created simulation does not have a model yet. Only basic building blocks are set.
               If the <paramref name="originalSimulation" /> is not null, all other building blocks such as
               <see cref="T:PKSim.Core.Model.Formulation" /> ,  <see cref="T:PKSim.Core.Model.Protocol" /> or <see cref="T:OSPSuite.Core.Domain.Event" /> will be used as well as their existing
               configuration in the simulation.
            </summary>
            <remarks>
               References defined in <paramref name="originalSimulation" /> will be used in the newly created simulation. A
               clone of any existing simulation should be used
            </remarks>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationFactory.CreateBasedOn``1(OSPSuite.Core.Domain.IModelCoreSimulation)">
            <summary>
               Creates a simulation using the given <paramref name="modelCoreSimulation" /> as model.
            </summary>
            <typeparam name="TSimulation">Type of simulation to be created</typeparam>
            <param name="modelCoreSimulation">Model to use</param>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationFactory.CreateForBioAvailability(PKSim.Core.Model.Protocol,PKSim.Core.Model.Compound,PKSim.Core.Model.Simulation)">
            <summary>
               Creates a full simulation (including model) where the existing protocol for the <paramref name="compound" /> is
               replaced with the given <paramref name="ivProtocol" />
            </summary>
            <param name="ivProtocol">IV Protocol for the <paramref name="compound" /></param>
            <param name="compound">Compound for which bioavailability will be determined</param>
            <param name="originalSimulation">Original simulation that will be used to create the new simulation</param>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationFactory.CreateForDDIRatio(PKSim.Core.Model.Simulation)">
            <summary>
               Creates a full simulation (including model) where the all inhibition processes are turned off
            </summary>
            <param name="originalSimulation">Original simulation that will be used to create the new simulation</param>
        </member>
        <member name="M:PKSim.Core.Model.ISimulationFactory.CreateForVSS(PKSim.Core.Model.Protocol,PKSim.Core.Model.Individual,PKSim.Core.Model.Compound)">
            <summary>
               Creates a full simulation (including model) where the protocol for the <paramref name="compound" /> is set to
               <paramref name="protocol" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.SimulationFactory.createModelLessSimulationBasedOn(PKSim.Core.Model.Simulation)">
            <summary>
               Creates a new simulation using a clone of all building blocks defined in the given
               <paramref name="originalSimulation" />.
               The resulting simulation should only be used for ad-hoc calculations and be discarded after use
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationPartialProcess.CompoundProcess">
            <summary>
               Selected Process in compound
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationPartialProcess.IndividualMolecule">
            <summary>
               Selected Protein in individual
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationPartialProcess.PartialProcessMapping">
            <summary>
               Partial process mapping that was used. This is only set when loading a simulation and null otherwise
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationPartialProcess.Status">
            <summary>
               Status of mapping
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationPartialProcess.ProcessName">
            <summary>
               Name of process used in the compound
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationPartialProcess.MoleculeName">
            <summary>
               Name of molecule used in the individual
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationProperties.ModelProperties">
            <summary>
               Model Configuration
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationProperties.CompoundPropertiesList">
            <summary>
               Compound configuration such as group mapping, processes selection etc
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationProperties.EventProperties">
            <summary>
               Events configuration
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationProperties.ObserverSetProperties">
            <summary>
               Observer set configuration
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationProperties.InteractionProperties">
            <summary>
               Interaction configuration (Inhibition, Induction etc.)
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationProperties.AllowAging">
            <summary>
               Returns true if the subject should age during simulation otherwise false. Default is false
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SimulationProperties.Simulation">
            <summary>
               Reference to simulation with this properties
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.SimulationProperties.Clone(OSPSuite.Core.Domain.Services.ICloneManager)">
            <summary>
               Returns a clone of the current simulation properties
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SystemicProcessType.SystemicProcessTypeId">
            <summary>
               Systemic process id
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.SystemicProcessType.IconName">
            <summary>
               Name of icon used to represent the process
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.LocalTemplate.References">
            <summary>
               List of <see cref="T:PKSim.Core.Model.Template" /> referenced by current <see cref="T:PKSim.Core.Model.Template" />.
               A template should not reference itself!
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.RemoteTemplate.Version">
            <summary>
               Version of the template (not the software version)
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.RemoteTemplate.Url">
            <summary>
               Url for a remote snapshot (raw json file)
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.RemoteTemplate.RepositoryUrl">
            <summary>
               Actual repository URL inferred from the raw Url
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.RemoteTemplate.MinVersion">
            <summary>
               Optional minimum version of the software required to use this template. For instance, if the template requires at
               least v11 and the software is v10, this template won't be loaded
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.RemoteTemplate.MaxVersion">
            <summary>
               Optional maximal version of the software required to use this template. For instance, if the template requires
               at most v10 and the software is v11, this template won't be loaded
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.RemoteTemplate.Qualified">
            <summary>
            Indicates if this remote template is qualified. 
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.TransporterContainerTemplate.Gene">
            <summary>
               Gene associated with the template
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.TransporterContainerTemplate.Species">
            <summary>
               Species for which the template is defined
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.TransporterContainerTemplate.TransportType">
            <summary>
               Transporter type => Direction of transport
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.TransporterContainerTemplate.ContainerName">
            <summary>
               Organ where the transporter is defined
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.TransporterTemplate.Gene">
            <summary>
               Gene associated with the template
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.TransporterTemplate.Species">
            <summary>
               Species for which the template is defined
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.TransporterTemplate.TransportType">
            <summary>
               Transporter type => Direction of transport
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.UsedBuildingBlock.BuildingBlockType">
            <summary>
               Type of the building block
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.UsedBuildingBlock.TemplateId">
            <summary>
               Id of the template building block used in the project (this is not the id of the building block saved as member but
               the id of the template
               used to generate the building block (e.g. origin))
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.UsedBuildingBlock.Altered">
            <summary>
               Was the original building block altered in the simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.UsedBuildingBlock.Id">
            <summary>
               Id of building block used in the simulation
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.UsedBuildingBlock.Name">
            <summary>
               Name of the building block (based on the template building block). The name will be changed when the building
               block in the simulation is changed as well. The name of the internal building block however remains unchanged
            </summary>
        </member>
        <member name="P:PKSim.Core.Model.UsedBuildingBlock.BuildingBlock">
            <summary>
               Clone of the project building block used in the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Model.UsedBuildingBlock.UpdateVersionFrom(PKSim.Core.Model.UsedBuildingBlock)">
            <summary>
               Update the version and structural version from the given building block, only if the building block is not loaded
            </summary>
        </member>
        <member name="F:PKSim.Core.PKSimColors.Formula">
            <summary>
            Color used for cell that are a formula
            </summary>
        </member>
        <member name="F:PKSim.Core.PKSimColors.Changed">
             <summary>
            Color used for cells containing parameter whose value was changed by the user
             </summary>
        </member>
        <member name="P:PKSim.Core.PKSimColors.ChartBack">
            <summary>
            Color used for a plot back color (everything but diagram)
            </summary>
        </member>
        <member name="F:PKSim.Core.PKSimColors.Female">
            <summary>
            Color used for the female gender (Start of gradient)
            </summary> 
        </member>
        <member name="F:PKSim.Core.PKSimColors.Female2">
            <summary>
            Color used for the female gender (End of gradient)
            </summary> 
        </member>
        <member name="F:PKSim.Core.PKSimColors.Male">
            <summary>
            Color used for the male gender (Start of gradient)
            </summary> 
        </member>
        <member name="F:PKSim.Core.PKSimColors.Male2">
            <summary>
            Color used for the female gender (End of gradient)
            </summary> 
        </member>
        <member name="F:PKSim.Core.PKSimColors.SelectedDistribution">
            <summary>
            Color used for the selected distribution that should be exported in report
            </summary>
        </member>
        <member name="F:PKSim.Core.PKSimColors.StartGroupingColor">
            <summary>
            Color used to generate a grouping color gradient in NumberOfBins use case (Start of gradient)
            </summary>
        </member>
        <member name="F:PKSim.Core.PKSimColors.EndGroupingColor">
            <summary>
            Color used to generate a grouping color gradient in NumberOfBins use case (End of gradient)
            </summary>
        </member>
        <member name="F:PKSim.Core.PKSimColors.DefaultSeriesColors">
            <summary>
            Default colors used for series (for instance in population analysis)
            </summary>
        </member>
        <member name="T:PKSim.Core.PKSimRegistrationConvention">
            <summary>
               Register components in the container using following logic
               1- if an interface IMyType for type MyType is found, the component is registered with the given interface
               2- if an interface starting with I in the PKSim namespace was defined for type MyType, and the flag
               "registerWithBasedInterface" is true (default),
               the component is registered with the given interface
               3- Otherwise, the component is registered as is
            </summary>
        </member>
        <member name="M:PKSim.Core.IProjectChangedNotifier.NotifyChangedFor(System.Object)">
            <summary>
            On top of notifying the project change, this method sets the <c>HasChanged</c> flag to <c>true</c> for a <see cref="T:PKSim.Core.Model.IPKSimBuildingBlock"/>
            </summary>
            <param name="objectThatHasChanged"></param>
        </member>
        <member name="T:PKSim.Core.Reporting.IReportGenerator">
            <summary>
               Generates a report that can be displayed for instance as tool tip
            </summary>
        </member>
        <member name="M:PKSim.Core.Reporting.ReportPart.AddToContent(System.String,System.Object[])">
            <summary>
               Add line to content. If line does not end with '\n', it is added at the end
            </summary>
            <param name="lineToAdd">Line to add as a string. it can contain special format character such as {0} that should then set in the args list</param>
            <param name="args"></param>
        </member>
        <member name="M:PKSim.Core.Reporting.ReportPart.AddToContent(PKSim.Core.Reporting.ReportPart)">
            <summary>
               Add the report as string to the content of the current report part
            </summary>
        </member>
        <member name="M:PKSim.Core.Reporting.ReportPart.AddPart(PKSim.Core.Reporting.ReportPart)">
            <summary>
               Add a sub part to the report
            </summary>
        </member>
        <member name="P:PKSim.Core.Reporting.ReportPart.Content">
            <summary>
               Returns the content of the report. Sub parts content is not included
            </summary>
        </member>
        <member name="M:PKSim.Core.Reporting.ReportPart.ToStringReport">
            <summary>
               Returns title, content + sub parts
            </summary>
        </member>
        <member name="T:PKSim.Core.Repositories.IApplicationTransportRepository">
            <summary>
               Repository for application processes (=transports)
               <para></para>
               Application transports are implemented as passive transport builder
            </summary>
        </member>
        <member name="P:PKSim.Core.Repositories.ICompoundParameterRateRepository.EditableGroups">
            <summary>
               Compound parameter groups with at least one editable parameter
               Editable = Visible and Not Locked
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.ICompoundProcessParameterMappingRepository.MappedParameterPathFor(System.String,System.String)">
            <summary>
               Retrieves path of mapped (individual) parameter for the given
               <para></para>
               {ProcessName, ParameterName}-combination
            </summary>
            <param name="compoundProcessName">Internal name of the compound process</param>
            <param name="processParameterName">Name of parameter</param>
        </member>
        <member name="M:PKSim.Core.Repositories.ICompoundProcessParameterMappingRepository.HasMappedParameterFor(System.String,System.String)">
            <summary>
               Returns true if a mapping is available for the give{Process, ParameterName} otherwise false
            </summary>
            <param name="compoundProcessName">Internal name of the compound process</param>
            <param name="processParameterName">Name of parameter</param>
        </member>
        <member name="M:PKSim.Core.Repositories.ICompoundProcessRepository.ProcessByName(System.String)">
            <summary>
               Returns compound compoundProcess template by name
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.ICompoundProcessRepository.ProcessByName``1(System.String)">
            <summary>
               Returns compound compoundProcess template by name
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IDimensionRepository.MergedDimensionFor(System.Object)">
            <summary>
            Returns the dimension if the <paramref name="objectThatMightHaveDimension"/> implements the <see cref="T:OSPSuite.Core.Domain.IWithDimension"/> interface
            of the NO_DIMENSION otherwise
            </summary>
        </member>
        <member name="T:PKSim.Core.Repositories.IEventGroupRepository">
            <summary>
               Repository for all predefined events which are NOT applications
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IModelContainerMoleculeRepository.MoleculeNamesWithoutDrug(System.String)">
            <summary>
            All molecules names - without DRUG, present in given model<para/>
            (only static molecules, dynamically created molecules (metabolites, enzymes, ...) are not present here
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IModelContainerMoleculeRepository.MoleculeNamesIncludingDrug(System.String)">
            <summary>
            Same as <see cref="M:PKSim.Core.Repositories.IModelContainerMoleculeRepository.MoleculeNamesWithoutDrug(System.String)"/>, but DRUG is also included into the list
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IModelContainerMoleculeRepository.IsPresent(System.String,System.Int32,System.String)">
            <summary>
            Checks if molecule is available in container (for given model).<para/>
            Default behaviour for the case no entry for {model, container, molecule} is found:
              - for moleculeName = DRUG return true
              - for moleculeName != DRUG return false
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IModelContainerMoleculeRepository.IsPresent(System.String,OSPSuite.Core.Domain.ObjectPath,System.String)">
            <summary>
            Checks if molecule is available in container (for given model).<para/>
            Default behaviour for the case no entry for {model, container, molecule} is found:
              - for moleculeName = DRUG return true
              - for moleculeName != DRUG return false
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IModelContainerMoleculeRepository.NegativeValuesAllowed(System.String,OSPSuite.Core.Domain.ObjectPath,System.String)">
            <summary>
            Checks if molecule is available in container (for given model).<para/>
            Default behaviour for the case no entry for {model, container, molecule} is found: return false
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IMoleculeParameterRepository.AllParametersFor(System.String)">
            <summary>
               Returns all parameters defined in the database for the molecule named <paramref name="moleculeName" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IMoleculeParameterRepository.ParameterFor(System.String,System.String)">
            <summary>
               Returns the parameter named <paramref name="parameterName" /> defined in the template database for the molecule
               named <paramref name="moleculeName" /> or null if the molecule is not found or the parameter is not defined for the molecule.
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IMoleculeParameterRepository.ParameterValueFor(System.String,System.String,System.Nullable{System.Double},OSPSuite.Core.Maths.Random.RandomGenerator)">
            <summary>
               Returns the value of the parameter named <paramref name="parameterName" /> defined in the template database for the
               molecule named <paramref name="moleculeName" /> or <paramref name="defaultValue" /> if the parameter named
               <paramref name="parameterName" /> does not exist for this molecule.
               If a <paramref name="randomGenerator" /> is specified, a random value will be generated for the underlying
               parameter. Otherwise the mean value will be returned.
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IMoleculeStartFormulaRepository.RateKeyFor(OSPSuite.Core.Domain.ObjectPath,PKSim.Core.Model.ModelProperties)">
            <summary>
               Calculation method and rate for given molecule path.
               <para></para>
               Calculation method must be part of <paramref name="modelProperties" />
               <para></para>
               <paramref name="moleculePath" /> must be a database path to the molecule (e.g. "ORGANISM\Liver\Plasma\DRUG")
            </summary>
            <returns>Rate key if found, null if not found</returns>
        </member>
        <member name="M:PKSim.Core.Repositories.IOntogenyRepository.AllOntogenyFactorForStrictBiggerThanPMA(PKSim.Core.Model.Ontogeny,PKSim.Core.Model.OriginData,System.String,OSPSuite.Core.Maths.Random.RandomGenerator)">
            <summary>
               Returns all ontogenies factor defined for the given origin data with pma > origin data.pma
            </summary>
            <param name="ontogeny">ontogeny</param>
            <param name="originData">origin data</param>
            <param name="containerName">container were the ontogeny is defined</param>
            <param name="randomGenerator">If defined, the factor will be distributed using the existing gsd</param>
            <returns>A set of Sample {X = age, Y = factor}</returns>
        </member>
        <member name="M:PKSim.Core.Repositories.IOntogenyRepository.AllPlasmaProteinOntogenyFactorForStrictBiggerThanPMA(System.String,PKSim.Core.Model.OriginData,OSPSuite.Core.Maths.Random.RandomGenerator)">
            <summary>
               Returns all ontogenies factor defined for the given origin data with pma > origin data.pma
            </summary>
            <param name="parameterName">name of ontogeny factor parameter</param>
            <param name="originData">origin data</param>
            <param name="randomGenerator">If defined, the factor will be distributed using the existing gsd</param>
            <returns>A set of Sample {X = age, Y = factor}</returns>
        </member>
        <member name="M:PKSim.Core.Repositories.IOntogenyRepository.OntogenyParameterDistributionFor(PKSim.Core.Model.Ontogeny,PKSim.Core.Model.OriginData,System.String)">
            <summary>
            Returns the parameter distribution associated with the ontogeny for the PMA defined in OriginData at location <paramref name="containerName"/>
            </summary>
            <param name="ontogeny">Ontogeny for which a distribution should be retrieved</param>
            <param name="originData">Origin data used to evaluate the PMA (as a function of age and gestational age)</param>
            <param name="containerName">Location of the ontogeny distribution to retrieve. (e.g. GI vs Liver)</param>
        </member>
        <member name="M:PKSim.Core.Repositories.IOrganTypeRepository.OrganTypeFor(OSPSuite.Core.Domain.IContainer)">
            <summary>
            Returns the organ type of the given <paramref name="container"/> or Unknown if undefined
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IRateObjectPathsRepository.PathWithAlias(PKSim.Core.Model.RateKey,System.String)">
            <summary>
               Returns a clone of the first path defined for the rateKey with the given alias. If not path is found, returns null.
              A clone is returned to ensure that the original path is not modified
            </summary>
        </member>
        <member name="T:PKSim.Core.Repositories.ISimulationActiveProcessRepository">
            <summary>
               Repository for active processes in the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.ISimulationActiveProcessRepository.ProcessFor(System.String)">
            <summary>
               Returns the simulation compoundProcess template which corresponds to the input compound compoundProcess
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.ISimulationActiveProcessRepository.ProcessFor``1(System.String)">
            <summary>
               Returns the simulation compoundProcess template of type
               <typeparam name="TActiveProcess">TActiveProcess</typeparam>
               which corresponds to the input compound compoundProcess
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.ISimulationActiveProcessRepository.TransportFor(System.String,System.String)">
            <summary>
               Returns the transport process for the given <paramref name="individualProcessName"/> and <paramref name="compoundProcessName"/>
            </summary>
        </member>
        <member name="T:PKSim.Core.Repositories.IStaticReactionRepository">
            <summary>
            Repository for all static (=non template) reactions
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.ITransporterContainerTemplateRepository.TransporterContainerTemplateFor(System.String,System.String,System.String)">
            <summary>
            Returns the default transporter template container defined for the concrete location <paramref name="containerName"/> and for a specific gene. 
            </summary>
            <param name="speciesName">Species where the transporter will be defined</param>
            <param name="containerName">Concrete transporter location (e.g Kidney, Liver etc...)</param>
            <param name="geneName">Specific gene for which templates should be returned</param>
        </member>
        <member name="P:PKSim.Core.Repositories.ITransporterTemplateRepository.AllTransporterNames">
            <summary>
               Returns the name of all transporters defined in the PKSim Database (template transporters and their synonyms)
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.ITransporterTemplateRepository.TransportTypeOrDefaultFor(System.String,System.String)">
            <summary>
               Returns the <see cref="T:OSPSuite.Core.Domain.TransportType" /> defined for a transporter named <paramref name="transporterName" />
               and for the species named <paramref name="speciesName" /> or default if nothing is defined in the database (TransportType.Efflux)
            </summary>
            <param name="speciesName">Species where the transporter will be defined</param>
            <param name="transporterName">Transporter name (e.g. user input)</param>
        </member>
        <member name="M:PKSim.Core.Repositories.ITransporterTemplateRepository.HasTransporterTemplateFor(System.String,System.String)">
            <summary>
               Returns true if a template was defined for a transporter named <paramref name="transporterName" /> for the species
               named <paramref name="speciesName" />
               otherwise false;
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IValueOriginRepository.ValueOriginFor(OSPSuite.Core.Domain.IParameter)">
            <summary>
            Returns the <see cref="T:OSPSuite.Core.Domain.ValueOrigin"/> defined for the <paramref name="parameter"/> or a default <see cref="T:OSPSuite.Core.Domain.ValueOrigin"/> if not found
            </summary>
        </member>
        <member name="M:PKSim.Core.Repositories.IValueOriginRepository.FindBy(System.Nullable{System.Int32})">
            <summary>
            Returns the <see cref="T:OSPSuite.Core.Domain.ValueOrigin"/> defined in the database with the given <paramref name="id"/> or a default <see cref="T:OSPSuite.Core.Domain.ValueOrigin"/> if not found
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IAdvancedParameterInPopulationUpdater.UpdatePopulationContaining(OSPSuite.Core.Domain.IParameter)">
            <summary>
               this function should retrieve the advanced parameter containing the given distribution parameter.
               Then update the advanced parameter container containing the retrieved advanced parameter and notify the change
            </summary>
            <param name="parameter">
               Parameter of the underlying distribution of an advanced parameter that was changed and requires
               the containing population to update
            </param>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockFinalizer.Finalize(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               This function should be called whenever a building block is created or loaded
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInProjectManager.UpdateStatusForSimulationUsing(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Each simulation using the given building block will notify a status update
            </summary>
            <param name="buildingBlock">building block used to filter the simulation that will notify an update</param>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInProjectManager.SimulationsUsing(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Returns all <see cref="T:PKSim.Core.Model.Simulation" /> using the given <paramref name="buildingBlock" />
            </summary>
            <param name="buildingBlock">building block used to filter the simulation</param>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInProjectManager.BuildingBlockUsing(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Returns all <see cref="T:PKSim.Core.Model.IPKSimBuildingBlock" /> using the given <paramref name="buildingBlock" />.
               For instance Individual using a given expression profile. This also returns Simulation using the
               <paramref name="buildingBlock" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInProjectManager.StatusFor(PKSim.Core.Model.UsedBuildingBlock)">
            <summary>
               Returns the status for the used building block given as parameter
            </summary>
            <param name="usedBuildingBlock">Used building block for which the status should be retrieved</param>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInProjectManager.StatusFor(PKSim.Core.Model.Simulation)">
            <summary>
               Returns the status for the simulation given as parameter
            </summary>
            <param name="simulation">Simulation for which the status shoul be retrieved</param>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInProjectManager.UpdateBuildingBlockNamesUsedIn(PKSim.Core.Model.Simulation)">
            <summary>
               Set the name that should be used for the building blocks according to the  building block status
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInProjectManager.TemplateBuildingBlocksUsedBy``1(PKSim.Core.Model.Simulation)">
            <summary>
               Returns the template building blocks used for a given type in a simulation
               If the template used in the simulation is the same as one available in the project as template, returns the
               template otherwise returns the building block used when the simulation was created
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInProjectManager.TemplateBuildingBlockUsedBy``1(PKSim.Core.Model.UsedBuildingBlock)">
            <summary>
               Returns the template building block used for a given used building block
               If the template used in the simulation is the same as one available in the building block repository, returns the
               repository item
               otherwise returns the building block used when the simulation was created
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInProjectManager.TemplateBuildingBlockUsedBy(PKSim.Core.Model.UsedBuildingBlock)">
            <summary>
               Returns the template building block used for a given used building block
               If the template used in the simulation is the same as one available in the building block repository, returns the
               repository item
               otherwise returns the building block used when the simulation was created
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInProjectManager.TemplateBuildingBlockUsedBy``1(PKSim.Core.Model.Simulation,``0)">
            <summary>
               Returns the template building block used to create <paramref name="buildingBlockInSimulation" /> used by
               <paramref name="simulation" />.
               If the template used in the simulation is the same as one available in the template building block repository,
               returns the template building block
               otherwise returns the <paramref name="buildingBlockInSimulation" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInProjectManager.UpdateStatusForSimulation(PKSim.Core.Model.Simulation)">
            <summary>
               Simulation given as parameter will notify status update
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInProjectManager.SimulationUsing(PKSim.Core.Model.UsedBuildingBlock)">
            <summary>
               Returns the <see cref="T:PKSim.Core.Model.Simulation" /> using the given <paramref name="usedBuildingBlock" /> or <c>null</c> if not
               found
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockInSimulationSynchronizer.UpdateUsedBuildingBlockBasedOnTemplateIn(PKSim.Core.Model.Simulation)">
            <summary>
               For used building blocks referencing templates, we ensure that the building block used is a clone of the template
               building block (so that if an alternative was used in the compound, this alternative is available to the user)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockParametersToSimulationUpdater.UpdateParametersFromBuildingBlockInSimulation(PKSim.Core.Model.IPKSimBuildingBlock,PKSim.Core.Model.Simulation)">
            <summary>
               Updates the parameter values from the building block given as parameter into the simulation
            </summary>
            <param name="templateBuildingBlock">Template building block containing the original values</param>
            <param name="simulation">Simulation whose parameter will be updated</param>
        </member>
        <member name="M:PKSim.Core.Services.BuildingBlockParametersToSimulationUpdater.synchronizeBuildingBlocks(PKSim.Core.Model.IPKSimBuildingBlock,PKSim.Core.Model.Simulation)">
            <summary>
               We need to make sure that once the simulation has been updated with the building block, depending building blocks
               are also updated
               For instance, if we update the individual in the simulation, we will also update all expression profile (since
               expression profile are linked to the individual)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.BuildingBlockParametersToSimulationUpdater.updateParameterValues(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter},PKSim.Core.Model.Simulation,OSPSuite.Core.Domain.PKSimBuildingBlockType)">
            <summary>
               Update parameter values from the used building block into the simulation
            </summary>
            <param name="usedBuildingBlockParameters">All used building blocks parameters</param>
            <param name="simulation">simulation for which parameters should be updated</param>
            <param name="buildingBlockType">Type of parameters to update</param>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockRetriever.BuildingBlockContaining(OSPSuite.Core.Domain.IEntity)">
            <summary>
               Retrieve the building block containing the given entity
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockRetriever.BuildingBlockWithId(System.String)">
            <summary>
               Retrieve the building block with the given id
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockRetriever.BuildingBlockWithId``1(System.String)">
            <summary>
               Retrieve the building block with the given id and the given type
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockRetriever.BuildingBlockIdContaining(OSPSuite.Core.Domain.IEntity)">
            <summary>
               Retrieve the id of the building block containing the given entity
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ChartDataCreator`2.CheckFields">
            <summary>
               Returns true if the charts can be created based on the analysis, otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ChartDataCreator`2.DataField``1(System.Data.DataRow)">
            <summary>
               Returns the field of type <typeparamref name="T" /> defined in the analysis whose named can be found
               in the column <c>PivotResult.DATA_FIELD_NAME</c> from the given <paramref name="row" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row">Current row from which the field name should be taken</param>
        </member>
        <member name="M:PKSim.Core.Services.ChartDataCreator`2.RowsForDataField(System.String)">
            <summary>
               Returns the <see cref="T:System.Data.DataView" /> of the data containing all rows where the value in column
               <c>PivotResult.DATA_FIELD_NAME</c> is equal to <paramref name="fieldName" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IChartTask.UpdateObservedDataInChartsFor(PKSim.Core.Model.Simulation,OSPSuite.Core.Domain.IProject)">
            <summary>
               updates all observed data defined in the simulation to the underlying charts of this simulation
            </summary>
            <param name="simulation">Simulation used to retrieve the charts to update</param>
            <param name="project">Optional project. If undefined, it will be retrieved from the project retriever</param>
        </member>
        <member name="M:PKSim.Core.Services.IChartTask.UpdateObservedDataInChartFor(PKSim.Core.Model.Simulation,OSPSuite.Core.Chart.ChartWithObservedData,OSPSuite.Core.Domain.IProject)">
            <summary>
               adds all observed data defined in the simulation to<paramref name="chartWithObservedData" />
            </summary>
            <param name="simulation">Simulation used to retrieve the charts to update</param>
            >>
            <param name="chartWithObservedData">Chart where observed data should be updated</param>
            <param name="project">Optional project. If undefined, it will be retrieved from the project retriever</param>
        </member>
        <member name="M:PKSim.Core.Services.IChartTask.IsColumnVisibleInDataBrowser(OSPSuite.Core.Domain.Data.DataColumn)">
            <summary>
               Returns if the column should be displayed or not
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IChartTask.SetOriginTextFor(System.String,OSPSuite.Core.Chart.IChart)">
            <summary>
               Sets origin data for the <paramref name="chart" /> to indicate project name , <paramref name="simulationName" /> and
               current date/time
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICloner.CloneForModel``1(``0)">
            <summary>
               Clones an object in the context of a model building=>Will not share formula in any case but origin id for formula
               will be saved to minimize outputs
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICloner.CloneObject``1(``0)">
            <summary>
               Clones the given <paramref name="objectToClone" /> using either the standard IUpdatable strategy if
               <paramref name="objectToClone" /> implements
               <see cref="T:OSPSuite.Core.Domain.IUpdatable" />. Otherwise, falls back to serializing and deserializing the same stream. The id of the
               returned parameter if defined will be reset
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IColorGradientGenerator.GenerateGradient(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
               Generates a color gradient between the <paramref name="start" /> color and the <paramref name="end" /> color using
               the number of <paramref name="steps" />
            </summary>
            <param name="start">Start color of the gradient</param>
            <param name="end">End color of the gradient</param>
            <param name="steps">Number of colors to generate between start and end</param>
            <returns></returns>
        </member>
        <member name="T:PKSim.Core.Services.CompetitiveInhibitionsKineticUpdaterSpecification">
            <summary>
               Represents the updater for competitive inhibition processes only (not mixed inhibition)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.CompoundPKContext.InitializeQuantityPKParametersFrom(PKSim.Core.Model.PopulationSimulation)">
            <summary>
            Initializes the context compound PK ratio parameters from the calculated simulation PK Parameters
            Adds BioAvailability, AUCRatio, and CMaxRatio to the context
            </summary>
            <param name="populationSimulation">The simulation that contains the PK Parameters</param>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundPropertiesUpdater.UpdateCompoundPropertiesIn(PKSim.Core.Model.Simulation)">
            <summary>
            Ensure that the compound properties list defined in the <paramref name="simulation"/> has up to date references to the actual <see cref="T:PKSim.Core.Model.Compound"/> 
            and <see cref="T:PKSim.Core.Model.Protocol"/> building blocks defined in the simulation.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICreateIndividualAlgorithm.Optimize(PKSim.Core.Model.Individual)">
            <summary>
               Apply the create individual to the given individual based on its origin data
            </summary>
            <param name="individual">Individual for which the create individual will be applied</param>
        </member>
        <member name="M:PKSim.Core.Services.ICreateIndividualAlgorithm.Randomize(PKSim.Core.Model.Individual,OSPSuite.Core.Domain.IParameter,System.Nullable{System.Double},System.Nullable{System.Double},System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter},OSPSuite.Core.Maths.Random.RandomGenerator)">
            <summary>
               Randomize the distributed parameter of the individual based on the origin data.
               the generated weight should be in the interval [<paramref name="minWeight" />, [<paramref name="maxWeight" />]
            </summary>
            <param name="individual">Individual to perturbate</param>
            <param name="weightParameter">Weight parameter for the given individual</param>
            <param name="minWeight">minimal weight allowed for the randomized individual. Null means not constrained</param>
            <param name="maxWeight">maximal weight allowed for the randomized individual. Null means not constrained</param>
            <param name="allIndividualParameters">All individual parameters defined in the individual (optimization purpose only)</param>
            <param name="randomGenerator">Random generator used to create values</param>
        </member>
        <member name="M:PKSim.Core.Services.IDataRepositoryFromResultsCreator.CreateResultsFor(PKSim.Core.Model.IndividualSimulation)">
            <summary>
               Returns a new <see cref="T:OSPSuite.Core.Domain.Data.DataRepository" /> containing the results of the <paramref name="simulation" />
            </summary>
            <param name="simulation">Simulation whose results should be converted to <see cref="T:OSPSuite.Core.Domain.Data.DataRepository" /></param>
        </member>
        <member name="M:PKSim.Core.Services.IDataRepositoryFromResultsCreator.UpdateColumnInternalUse(PKSim.Core.Model.IndividualSimulation,OSPSuite.Core.Domain.Data.DataRepository)">
            <summary>
               Adjusts the Internal flag for the columns defined in <paramref name="dataRepository" /> based on the selected output
               values in <paramref name="simulation" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.DataRepositoryFromResultsCreator.quantityAndPathFrom(PKSim.Core.Model.Simulation,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
               Returns the quantity and the consolidated object path of that quantity in the simulation (adding the simulation name
               at the beginning)
            </summary>
            <param name="simulation"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PKSim.Core.Services.DataRepositoryFromResultsCreator.createDataColumn(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},OSPSuite.Core.Domain.IQuantity,OSPSuite.Core.Domain.UnitSystem.IDimension,OSPSuite.Core.Domain.Data.BaseGrid,PKSim.Core.Model.Simulation)">
            <summary>
               create a bare bone datacolumn with the given id, name, path and dimension
               Also makes sure that molweight is being updated for the created column
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.IMuSigma.Mean">
            <summary>
               return the mean of the distribution
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.IMuSigma.Deviation">
            <summary>
               return the deviation of the distributin
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.IMuSigma.DefaultValue">
            <summary>
               return the default value for the distribution
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMuSigma.GenerateRandomValueForIndividual(OSPSuite.Core.Maths.Random.RandomGenerator)">
            <summary>
               Generate a random value for the distribution around the mean
            </summary>
            <param name="randomGenerator"> random generator used to generate random values </param>
        </member>
        <member name="M:PKSim.Core.Services.IMuSigma.GenerateRandomValueForPopulation(OSPSuite.Core.Maths.Random.RandomGenerator)">
            <summary>
               Generate a random value for the distribution around the mean
            </summary>
            <param name="randomGenerator"> random generator used to generate random values </param>
        </member>
        <member name="M:PKSim.Core.Services.IMuSigma.ScaleWith(System.Double,System.Double)">
            <summary>
               Scale mu and sigma with the given hrel (relative height) and apha (AllometricScaleFactor)
            </summary>
            <param name="hrel"> Relative height </param>
            <param name="alpha"> Allometric Scale Factor </param>
        </member>
        <member name="M:PKSim.Core.Services.IMuSigma.ProbabilityFor(System.Double)">
            <summary>
               return the probability value for the given value
            </summary>
            <param name="value"> value (e.g. of the volume) </param>
        </member>
        <member name="M:PKSim.Core.Services.IDistributedParametersUpdater.UpdateDistributedParameter(OSPSuite.Core.Domain.PathCache{OSPSuite.Core.Domain.IDistributedParameter},OSPSuite.Core.Domain.PathCache{OSPSuite.Core.Domain.IDistributedParameter},PKSim.Core.Model.OriginData)">
            <summary>
               Update the distributions defined in the distributed parameters according to the given origin data
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IDistributedParameterToTableParameterConverter.UpdateSimulationConfigurationForAging(OSPSuite.Core.Domain.Builder.SimulationConfiguration,PKSim.Core.Model.Simulation,System.Boolean)">
            <summary>
               Create a table parameter for each distributed parameter defined in the simulation subject of the simulation if the
               simulation is aging
            </summary>
            <param name="simulationConfiguration"> spatialStructure that will be use to create the simulation </param>
            <param name="simulation"> Model less simulation that whose spatial structure will be created </param>
            <param name="createAgingDataInPopulationSimulation">
               Set to <c>True</c>, generates the AgingData if <paramref name="simulation" /> is a population simulation. Note that
               aging data will be added to the population simulation directly
               and therefor modifying the instance of the simulation
            </param>
        </member>
        <member name="T:PKSim.Core.Services.DistributedParameterToTableParameterConverter.TableFormulaParameter`1">
            <summary>
               Help class used to collect parameters required to create a table parameters
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.DistributedParameterToTableParameterConverter.TableFormulaParameter`1.OriginData">
            <summary>
               Origin Data for which the table should be created. This is not necessarily the origin data from the individual
               when used in a population
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.DistributedParameterToTableParameterConverter.TableFormulaParameter`1.Parameter">
            <summary>
               The actual parameter for which a table should be generated
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.DistributedParameterToTableParameterConverter.TableFormulaParameter`1.Value">
            <summary>
               The value of the parameter. This is not necessarily the value of the parameter when used in a population
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.DistributedParameterToTableParameterConverter.TableFormulaParameter`1.Percentile">
            <summary>
               The percentile in the distribution for the Value; This is not necessarily the percentile of the parameter when used
               in a population
               This is also only used if the parameter is distributed
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IEntitiesInContainerRetriever.OutputsFrom(PKSim.Core.Model.PopulationSimulation)">
            <summary>
               Returns all <see cref="T:OSPSuite.Core.Domain.IQuantity" /> that were selected when calculating the
               <paramref name="populationSimulation" />  (e.g.
               Persistable=true)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IEntitiesInContainerRetriever.OutputsFrom(PKSim.Core.Model.IPopulationDataCollector)">
            <summary>
               Returns all <see cref="T:OSPSuite.Core.Domain.IQuantity" /> that were selected when calculating the
               <paramref name="populationDataCollector" />  (e.g.
               Persistable=true). The search is performed using the intersectio nof all quantities by path
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IEntitiesInContainerRetriever.QuantitiesFrom(PKSim.Core.Model.PopulationSimulation)">
            <summary>
               Returns all <see cref="T:OSPSuite.Core.Domain.IQuantity" /> defined under the <paramref name="populationSimulation" />  (search performed
               using
               complete hierarchy)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IEntitiesInContainerRetriever.QuantitiesFrom(PKSim.Core.Model.IPopulationDataCollector)">
            <summary>
               Returns all <see cref="T:OSPSuite.Core.Domain.IQuantity" /> defined under the <paramref name="populationDataCollector" />  (search
               performed using
               intersection of all quantities by path)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IEntitiesInContainerRetriever.ParametersFrom(PKSim.Core.Model.PopulationSimulation)">
            <summary>
               Returns all <see cref="T:OSPSuite.Core.Domain.IParameter" /> defined in the <paramref name="populationSimulation" /> (search performed
               using
               complete hierarchy)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IEntitiesInContainerRetriever.ParametersFrom(PKSim.Core.Model.IPopulationDataCollector)">
            <summary>
               Returns all <see cref="T:OSPSuite.Core.Domain.IParameter" /> defined in the <paramref name="populationDataCollector" /> (search
               performed using
               complete hierarchy and results intersected using parameter path)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IEventBuildingBlockCreator.CreateFor(PKSim.Core.Model.Simulation)">
            <summary>
               return the event building block built based on the given protocol and the associated formulation.
               Special simulation event such as eat,sport etc.. should be managed in this class as well
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IExpressionProfileUpdater.UpdateMoleculeName(PKSim.Core.Model.ExpressionProfile,System.String)">
            <summary>
               Update the molecule name in <paramref name="expressionProfile" /> to be <paramref name="newMoleculeName" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IExpressionProfileUpdater.SynchroniseSimulationSubjectWithExpressionProfile(PKSim.Core.Model.ISimulationSubject,PKSim.Core.Model.ExpressionProfile)">
            <summary>
               Updates the value from the <paramref name="expressionProfile" /> into the <paramref name="simulationSubject" />.
               ExpressionProfile => SimulationSubject
            </summary>
            <param name="simulationSubject">Simulation subject to update</param>
            <param name="expressionProfile">Expression profile used as source</param>
        </member>
        <member name="M:PKSim.Core.Services.IExpressionProfileUpdater.SynchronizeAllSimulationSubjectsWithExpressionProfile(PKSim.Core.Model.ExpressionProfile)">
            <summary>
               Updates the value from the <paramref name="expressionProfile" /> into all simulation subjects defined in the project
               referencing <paramref name="expressionProfile" />.  ExpressionProfile => All SimulationSubject in Project using it
            </summary>
            <param name="expressionProfile">Expression profile used as source</param>
        </member>
        <member name="M:PKSim.Core.Services.IExpressionProfileUpdater.SynchronizeExpressionProfileWithSimulationSubject(PKSim.Core.Model.ExpressionProfile,PKSim.Core.Model.ISimulationSubject)">
            <summary>
               Updates the value from the <paramref name="simulationSubject" /> into the <paramref name="expressionProfile" />.
               SimulationSubject => ExpressionProfile. This is typically called for project conversion.
            </summary>
            <param name="expressionProfile">Expression profile to update</param>
            <param name="simulationSubject">Simulation subject used as source</param>
        </member>
        <member name="M:PKSim.Core.Services.IExpressionProfileUpdater.SynchronizeExpressionProfileWithExpressionProfile(PKSim.Core.Model.ExpressionProfile,PKSim.Core.Model.ExpressionProfile)">
            <summary>
               Updates the value from the <paramref name="sourceExpressionProfile" /> into the
               <paramref name="targetExpressionProfile" />.
               ExpressionProfile => ExpressionProfile. This is typically called when cloning an expression profile
            </summary>
            <param name="sourceExpressionProfile">Expression profile to update used as source</param>
            <param name="targetExpressionProfile">Expression profile to update</param>
        </member>
        <member name="M:PKSim.Core.Services.IExpressionProfileUpdater.SynchronizeExpressionProfilesUsedInSimulationSubjectWithSimulation(PKSim.Core.Model.ISimulationSubject,PKSim.Core.Model.Simulation)">
            <summary>
               Updates the values from all expression profiles used by the <paramref name="templateSimulationSubject" /> into the
               <paramref name="simulation" />
               This is required for instance when synchronizing and individual with a simulation=>Underlying building block may
               need to be updated as well
            </summary>
            <param name="templateSimulationSubject">
               Template simulation subject (building block) that should be used to update the
               expression profile in the simulation
            </param>
            <param name="simulation">Simulation to update </param>
        </member>
        <member name="T:PKSim.Core.Services.IFormulationFromMappingRetriever">
            <summary>
               Retrieve the formulation used in a simulation for a given mapping
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IFormulationFromMappingRetriever.FormulationUsedBy(PKSim.Core.Model.Simulation,PKSim.Core.Model.FormulationMapping)">
            <summary>
               Returns the formulation building block used in the simulation for the given mapping.
               This will not be the template building block but the used building block in general unless the simualtion as not
               initialized
               yet. In that case, the template with the corresponding id will be returned if available
            </summary>
            <param name="simulation">Simulation where formulation should be defined</param>
            <param name="formulationMapping">mapping for which a formulation should be retrieved</param>
            <returns>the formulation used for the mapping or null if the parameter is null or does not use any formulation</returns>
            <exception cref="T:System.ArgumentException">An exception is thrown is the formulation id used in the mapping is not found</exception>
        </member>
        <member name="M:PKSim.Core.Services.IFormulationFromMappingRetriever.TemplateFormulationUsedBy(PKSim.Core.Model.Simulation,PKSim.Core.Model.FormulationMapping)">
            <summary>
               Returns the template formulation building block used in the simulation for the given mapping.
               If the status of the building block is changed, returns the used building block in the simulation, otherwise the
               template building block
            </summary>
            <param name="simulation">Simulation where formulation should be defined</param>
            <param name="formulationMapping">mapping for which a formulation should be retrieved</param>
            <returns>the formulation used for the mapping or null if the parameter is null or does not use any formulation</returns>
            <exception cref="T:System.ArgumentException">An exception is thrown is the formulation id used in the mapping is not found</exception>
        </member>
        <member name="M:PKSim.Core.Services.IGlobalPKAnalysisRunner.RunForBioavailability(PKSim.Core.Model.SimpleProtocol,PKSim.Core.Model.Simulation,PKSim.Core.Model.Compound)">
            <summary>
            Creates a <see cref="T:PKSim.Core.Model.Simulation"/> based on the given <paramref name="simulation"/> for bioavailability calculations and run the simulation
            </summary>
            <param name="simpleIvProtocol">Iv protocol that will be used in the created simulation for the <paramref name="compound"/></param>
            <param name="simulation">Base simulation</param>
            <param name="compound">Compound for which the bioavailability should be calculated</param>
            <returns>The simulation that was created and run</returns>
        </member>
        <member name="M:PKSim.Core.Services.IGlobalPKAnalysisRunner.RunForDDIRatio(PKSim.Core.Model.Simulation)">
            <summary>
            Creates a <see cref="T:PKSim.Core.Model.Simulation"/> based on the given <paramref name="simulation"/> for DDI Ratio calculations and run the simulation
            </summary>
            <param name="simulation">Base simulation</param>
            <returns>The simulation that was created and run</returns>
        </member>
        <member name="M:PKSim.Core.Services.IGroupingLabelGenerator.GenerateLabels(PKSim.Core.Services.LabelGenerationOptions,System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Generates labels using the <paramref name="options"/> and the given <paramref name="intervalLimitsInDisplayUnit"/>. 
            </summary>
            <param name="options">Option used to generate the labels</param>
            <param name="intervalLimitsInDisplayUnit">Limits in display unit. The number of labels generated will be equal to the count -1</param>
        </member>
        <member name="M:PKSim.Core.Services.IGroupingLabelGenerator.GenerateLabels(PKSim.Core.Model.IPopulationDataCollector,PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisNumericField,PKSim.Core.Model.PopulationAnalyses.NumberOfBinsGroupingDefinition)">
            <summary>
            Generates labels using the settins defined in <paramref name="groupingDefinition"/>. The <paramref name="populationDataCollector"/> and <paramref name="numericField"/>
            are used to calculate the min and max of the definiion interval. It is assumes that limits were calculated already for the <paramref name="groupingDefinition"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGroupingLabelGenerator.GenerateLabels(PKSim.Core.Model.IPopulationDataCollector,PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisNumericField,PKSim.Core.Services.LabelGenerationOptions,System.Int32)">
            <summary>
            Generates labels using the settins defined in <paramref name="options"/>. The <paramref name="populationDataCollector"/>, <paramref name="numericField"/> and <paramref name="numberOfLabels"/>
            are used to calculate the interval limits. 
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.GroupingLabelGenerator.toAlpha(System.Int32)">
            <summary>
               This method converts integers to letters
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IApplicationSettingsPersistor.SaveCurrent">
            <summary>
            Saves current application settings
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockTask.SaveAsTemplate(OSPSuite.Utility.Collections.ICache{PKSim.Core.Model.IPKSimBuildingBlock,System.Collections.Generic.IReadOnlyList{PKSim.Core.Model.IPKSimBuildingBlock}},PKSim.Core.Model.TemplateDatabaseType)">
            <summary>
               Saves the building blocks defined as key in <paramref name="buildingBlocksWithReferenceToSave" /> and all their
               references as well (defined as value of the cache <paramref name="buildingBlocksWithReferenceToSave" />).
               It is expected that each reference is available as key in the cache as well.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockTask.SaveAsTemplate(System.Collections.Generic.IReadOnlyList{PKSim.Core.Model.IPKSimBuildingBlock},PKSim.Core.Model.TemplateDatabaseType)">
            <summary>
               Saves the building blocks defined in <paramref name="buildingBlocks" />. References won't be saved
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockTask.AddToProject``1(``0,System.Boolean,System.Boolean)">
            <summary>
               Add the given building block to the project and returns the command resulting from the action.
            </summary>
            <param name="buildingBlock">Building block to add to the project</param>
            <param name="editBuildingBlock"> if set to <c>true</c>, the edit action is started as well. Default is false</param>
            <param name="addToHistory">if set to <c>true</c>, the add command is also added to the history. Default is true</param>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockTask.BuildingBlockNameIsAlreadyUsed(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Returns true if a <see cref="T:PKSim.Core.Model.IPKSimBuildingBlock" /> with the same name and <see cref="T:OSPSuite.Core.Domain.PKSimBuildingBlockType" /> as
               the
               given <paramref name="buildingBlock" /> already exists in the project otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IBuildingBlockTask.RenameBuildingBlockIfAlreadyUsed(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               If a a <see cref="T:PKSim.Core.Model.IPKSimBuildingBlock" /> does not exist in the project with the same name and
               <see cref="T:OSPSuite.Core.Domain.PKSimBuildingBlockType" /> as the
               given <paramref name="buildingBlock" /> returns <c>true</c>. Otherwise, asks the user to rename the building block.
               If the rename as performed, returns
               <c>true</c> otherwise <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICloneSimulationTask.Clone(PKSim.Core.Model.Simulation)">
            <summary>
               Clone the simulation. Only a simulation for which all building blocks are uptodate can be clone
            </summary>
            <param name="simulationToClone">Simulation to clone</param>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.AddParameterGroupAlternativeTo(PKSim.Core.Model.ParameterAlternativeGroup,PKSim.Core.Model.ParameterAlternative)">
            <summary>
               Adds the given <paramref name="parameterAlternative" /> to the given <paramref name="compoundParameterGroup" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.RemoveParameterGroupAlternative(PKSim.Core.Model.ParameterAlternativeGroup,PKSim.Core.Model.ParameterAlternative)">
            <summary>
               Removes the  <paramref name="parameterAlternative" /> from the <paramref name="parameterGroup" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.SetAlternativeParameterValue(OSPSuite.Core.Domain.IParameter,System.Double)">
            <summary>
               Sets the value of the parameter. If the alternative containing the parameter is not used in any simulation,
               the command will not update the building block version of the compound
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.SetAlternativeParameterUnit(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.UnitSystem.Unit)">
            <summary>
               Sets the unit of the parameter. If the alternative containing the parameter is not used in any simulation,
               the command will not update the building block version of the compound
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.SetAlternativeParameterTable(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.Formulas.TableFormula)">
            <summary>
               Updates the table formula in <paramref name="parameter" /> with the <paramref name="formula" />.  If the alternative
               containing the parameter is not used in any simulation,the command will not update the building block version of the
               compound
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.UpdateValueOrigin(PKSim.Core.Model.ParameterAlternative,OSPSuite.Core.Domain.ValueOrigin)">
            <summary>
               Edits the value origin for the given <paramref name="parameterAlternative" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.PermeabilityValuesFor(PKSim.Core.Model.Compound)">
            <summary>
               Returns the possible parameters for the permeability depending on the different alternatives defined for
               Lipophilicity
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.IntestinalPermeabilityValuesFor(PKSim.Core.Model.Compound)">
            <summary>
               Returns the possible parameters for the intestinal permeability depending on the different alternatives defined for
               Lipophilicity
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.SetDefaultAlternativeFor(PKSim.Core.Model.ParameterAlternativeGroup,PKSim.Core.Model.ParameterAlternative)">
            <summary>
               Sets the given parameter alternative as default alternative in the parameter group
            </summary>
            <param name="parameterGroup">Parameter group containing the alternative</param>
            <param name="parameterAlternative">Parameter alternative that will be set as default</param>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.SetSpeciesForAlternative(PKSim.Core.Model.ParameterAlternativeWithSpecies,PKSim.Core.Model.Species)">
            <summary>
               Sets the given <paramref name="species" /> as species describing the value entered for the given alternative
            </summary>
            <param name="parameterAlternative">Parameter alternative whose species should be set</param>
            <param name="species">Species to be set in the alternative</param>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.SolubilityTableForPh(PKSim.Core.Model.ParameterAlternative,PKSim.Core.Model.Compound)">
            <summary>
               Returns a table formula containing the solubility as a function of ph for the given solubility alternative
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.ImportSolubilityTableFormula">
            <summary>
               Imports a solubility table from file and returns the imported table
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundAlternativeTask.PrepareSolubilityAlternativeForTableSolubility(PKSim.Core.Model.ParameterAlternative)">
            <summary>
               Performs initialization steps for a brand new solubility alternative that should behave as a Table alternative
            </summary>
            <param name="solubilityAlternative"></param>
        </member>
        <member name="M:PKSim.Core.Services.ICompoundProcessTask.SetMetaboliteForEnzymaticProcess(PKSim.Core.Model.EnzymaticProcess,System.String)">
            <summary>
               Change the metabolite for an enzymatic process
            </summary>
            <param name="process">The process being updated</param>
            <param name="newMetabolite">The new metabolite</param>
            <returns>The command used to update the process</returns>
        </member>
        <member name="M:PKSim.Core.Services.IDefaultIndividualRetriever.DefaultIndividual">
            <summary>
               Retrieves a default individual for the default species
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IDefaultIndividualRetriever.DefaultHuman">
            <summary>
               Retrieves the default human
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IDefaultIndividualRetriever.DefaultIndividualFor(PKSim.Core.Model.Species)">
            <summary>
               Retrieves the default individual for the given species
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IDefaultIndividualRetriever.DefaultIndividualFor(PKSim.Core.Model.SpeciesPopulation)">
            <summary>
               Retrieves the default human for the given population
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IDiseaseStateImplementation.ApplyTo(PKSim.Core.Model.Individual)">
            <summary>
               Apply the disease state implementation to an individual in the context of a create individual (it will change the
               underlying distributions)
            </summary>
            <param name="individual">Individual to update</param>
            <returns><c>true</c> if the algorithm could be applied otherwise <c>false</c> </returns>
        </member>
        <member name="M:PKSim.Core.Services.IDiseaseStateImplementation.ApplyForPopulationTo(PKSim.Core.Model.Individual)">
            <summary>
               Apply the disease state implementation to an individual in the context of a population creation (it will not change
               the underlying distributions or formula)
            </summary>
            <param name="individual">Individual to update</param>
            <returns><c>true</c> if the algorithm could be applied otherwise <c>false</c> </returns>
        </member>
        <member name="M:PKSim.Core.Services.IDiseaseStateImplementation.CreateBaseIndividualForPopulation(PKSim.Core.Model.Individual)">
            <summary>
               Returns an individual that can be used as based when creating a population with disease state
            </summary>
            <param name="originalIndividual">Original individual selected by the user as based individual</param>
            <returns></returns>
        </member>
        <member name="M:PKSim.Core.Services.IDiseaseStateImplementation.ResetParametersAfterPopulationIteration(PKSim.Core.Model.Individual)">
            <summary>
               Ensures that some parameters that might have been overwritten by the algorithm are reset (distributions or formula)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IDiseaseStateImplementation.Validate(PKSim.Core.Model.OriginData)">
            <summary>
               Validates that the parameters are compatible with the underlying disease state (age constraints etc..).
               Throws an exception if the origin data is not valid
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IDiseaseStateImplementation.IsValid(PKSim.Core.Model.OriginData)">
            <summary>
               Returns <c>true</c> if the parameters are compatible with th underlying disease state otherwise <c>false</c>
               If the <paramref name="originData" /> is not valid, the return value will contain the reason in error
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IDiseaseStateImplementation.ApplyTo(PKSim.Core.Model.ExpressionProfile,System.String)">
            <summary>
               Apply any change required to the disease factor parameter associated with the molecule
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IDiseaseStateImplementation.CanBeAppliedToExpressionProfile(OSPSuite.Core.Domain.QuantityType)">
            <summary>
               Returns <c>true</c> if the implementation modifies the expression profile otherwise <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.AbstractDiseaseStateImplementation.ParameterUpdate.#ctor(OSPSuite.Core.Domain.IParameter,System.Double,PKSim.Core.Services.AbstractDiseaseStateImplementation.ParameterUpdateMode)">
            <summary>
               Create a parameter update: Default mode is factor
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IEntityTask.Rename(OSPSuite.Core.Domain.IEntity)">
            <summary>
               Renames the element. Does not trigger a structural change of the containing building block
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IEntityTask.StructuralRename(OSPSuite.Core.Domain.IEntity)">
            <summary>
               Renames the element and triggers a structural change of the containing building block
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.GetProteinsByName(System.String)">
            <summary>
               This function retrieves a list of found proteins fulfilling the search criteria.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.GetExpressionDataByGeneId(System.Int64)">
            <summary>
               This function retrieves expression data for a special protein.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.GetContainerTissueMapping">
            <summary>
               This function retrieves the default container tissue mapping.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.GetGenderHint(System.String)">
            <summary>
               This function retrieves information for a gender.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.GetTissueHint(System.String)">
            <summary>
               This function retrieves information for a tissue.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.GetHealthStateHint(System.String)">
            <summary>
               This function retrieves information for a health state.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.GetSampleSourceHint(System.String)">
            <summary>
               This function retrieves information for a sample source.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.GetUnitHint(System.String)">
            <summary>
               This function retrieves information for a unit.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.GetNameTypeHint(System.String)">
            <summary>
               This function retrieves information for a name type.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.GetDataBaseRecProperties(System.String,System.String)">
            <summary>
               This function retrieves a list of property strings for a data base record id.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.GetDataBaseRecInfos(System.String,System.String)">
            <summary>
               This function retrieves a list of information strings for a data base record id.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.ValidateDatabase">
            <summary>
               Checks the validity of a protein expression database.
            </summary>
            <remarks>Throws an exceptions if not valid.</remarks>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionQueries.ClearCache">
            <summary>
            Clear all cached queries
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionsDatabasePathManager.HasDatabaseFor(PKSim.Core.Model.Species)">
            <summary>
               return true if a database has been defined for the species, otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionsDatabasePathManager.HasDatabaseFor(System.String)">
            <summary>
               return true if a database has been defined for the species, otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionsDatabasePathManager.ConnectToDatabaseFor(PKSim.Core.Model.Species)">
            <summary>
               Update the current database connection to point on path defined for the species
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">is thrown if no protein expression database is available for that species. </exception>
        </member>
        <member name="M:PKSim.Core.Services.IGeneExpressionsDatabasePathManager.ConnectToDatabaseFor(System.String)">
            <summary>
               Update the current database connection to point on path defined for the species
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">is thrown if no protein expression database is available for that species. </exception>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionKineticUpdaterSpecification.UpdateRequiredFor(System.String,System.String,PKSim.Core.Model.Simulation)">
            <summary>
            Returns <c>true</c> if specific interactions are defined in the <paramref name="simulation"/> for the molecule named <paramref name="moleculeName"/> otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionKineticUpdaterSpecification.UpdateKmFactorReferences(OSPSuite.Core.Domain.IParameter,System.String,System.String,PKSim.Core.Model.Simulation,OSPSuite.Core.Domain.IContainer)">
            <summary>
            Updates the references to object dynamically added to the formula of the Km_interaction_factor
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionKineticUpdaterSpecification.UpdateKcatFactorReferences(OSPSuite.Core.Domain.IParameter,System.String,System.String,PKSim.Core.Model.Simulation,OSPSuite.Core.Domain.IContainer)">
            <summary>
            Updates the references to object dynamically added to the formula of the Vmax_interaction_factor
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionKineticUpdaterSpecification.UpdateCLSpecFactorReferences(OSPSuite.Core.Domain.IParameter,System.String,System.String,PKSim.Core.Model.Simulation,OSPSuite.Core.Domain.IContainer)">
            <summary>
            Updates the references to object dynamically added to the formula of the CL_spec_interaction_factor
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionKineticUpdaterSpecification.KmNumeratorTerm(System.String,System.String,PKSim.Core.Model.Simulation)">
            <summary>
            Returns the term modifying the numerator of the Km factor or an empty string if no modification is required
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionKineticUpdaterSpecification.KmDenominatorTerm(System.String,System.String,PKSim.Core.Model.Simulation)">
            <summary>
            Returns the term modifying the denominator of the Km factor or an empty string if no modification is required
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionKineticUpdaterSpecification.KcatDenominatorTerm(System.String,System.String,PKSim.Core.Model.Simulation)">
            <summary>
            Returns the term modifying the denominator of the Vmax factor or an empty string if no modification is required
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionKineticUpdaterSpecification.CLSpecDenominatorTerm(System.String,System.String,PKSim.Core.Model.Simulation)">
            <summary>
            Returns the term modifying the denominator of the CL spec factor or an empty string if no modification is required
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionKineticUpdaterSpecification.UpdateModifiers(OSPSuite.Core.Domain.Builder.ReactionBuilder,System.String,System.String,PKSim.Core.Model.Simulation)">
            <summary>
            Add all inhibitors as modifier of the given <paramref name="reaction"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ILazyLoadTask.LoadResults``1(``0)">
            <summary>
               Loads the simulation results for the given simulation (if not already loaded)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ILazyLoadTask.LoadResults(PKSim.Core.Model.IPopulationDataCollector)">
            <summary>
               Loads the simulation results for the given <paramref name="populationDataCollector" /> (if not already loaded)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoBiExportTask.StartWith(PKSim.Core.Model.Simulation)">
            <summary>
               Exports the simulation and starts mobi with it
            </summary>
            <param name="simulation">simulation to export</param>
        </member>
        <member name="M:PKSim.Core.Services.IMoBiExportTask.StartWithContentFile(System.String)">
            <summary>
            Starts MoBi with the content file as start parameter. The file contains binary data that should be
            decrypted by MoBi
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoBiExportTask.ExportSimulationToPkmlFile(PKSim.Core.Model.Simulation)">
            <summary>
               Exports the simulation into a predefined file
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoBiExportTask.ExportSimulationToPkmlFile(PKSim.Core.Model.Simulation,System.String)">
            <summary>
            Exports the simulation into the file with path <paramref name="fileName"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoBiExportTask.ExportSimulationToPkmlFileAsync(PKSim.Core.Model.Simulation,System.String)">
            <summary>
            Exports the simulation into the file with path <paramref name="fileName"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IModelNeighborhoodQuery.NeighborhoodsFor(OSPSuite.Core.Domain.IContainer,PKSim.Core.Model.ModelProperties)">
            <summary>
               Returns all the neighborhood builders that are defined for the given organism structure and the model properties.
            </summary>
            <param name="individualNeighborhoods">List of neighborhood already defined in the individual</param>
            <param name="modelProperties">Model Properties defining the criteria with which the neighborhoods should be retrieved</param>
        </member>
        <member name="M:PKSim.Core.Services.IModelObserverQuery.AllObserversFor(OSPSuite.Core.Domain.Builder.MoleculeBuildingBlock,PKSim.Core.Model.Simulation)">
            <summary>
               Return all the observers defined for the given molecule name and the model properties
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IModelPassiveTransportQuery.AllPassiveTransportsFor(PKSim.Core.Model.Simulation)">
            <summary>
               Return the passive transports building block defined for the given simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IndividualExtractionOptions.GenerateIndividualName(System.String,System.Int32)">
            <summary>
            Generates an individual name based on the defined <see cref="P:PKSim.Core.Services.IndividualExtractionOptions.NamingPattern"/> 
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IIndividualExtractor.ExtractIndividualsFrom(PKSim.Core.Model.Population,System.Int32[])">
            <summary>
               Extracts individuals with id in <paramref name="individualIds" /> from <paramref name="population" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IIndividualExtractor.ExtractIndividualsFrom(PKSim.Core.Model.Population,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
               Extracts individuals with id in <paramref name="individualIds" /> from <paramref name="population" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IIndividualExtractor.ExtractIndividualsFrom(PKSim.Core.Model.Population,PKSim.Core.Services.IndividualExtractionOptions)">
            <summary>
               Extracts individuals from <paramref name="population" /> using the provided
               <paramref name="individualExtractionOptions" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IIndividualExtractor.ExtractIndividualsFromPopulationCommand(PKSim.Core.Model.Population,PKSim.Core.Services.IndividualExtractionOptions)">
            <summary>
               Extracts individuals from <paramref name="population" /> using the provided
               <paramref name="individualExtractionOptions" />
            </summary>
            <returns>The executed command for the extraction. This command was not added to the history</returns>
        </member>
        <member name="M:PKSim.Core.Services.IIndividualModelTask.CreateModelStructureFor(PKSim.Core.Model.Individual)">
            <summary>
            Creates the model structure (containers and neighborhoods)
            </summary>
            <param name="individual"></param>
        </member>
        <member name="M:PKSim.Core.Services.IIndividualModelTask.CreateOrganStructureFor(PKSim.Core.Model.Individual)">
            <summary>
            Creates the organ structure (containers only)
            </summary>
            <param name="individual"></param>
        </member>
        <member name="M:PKSim.Core.Services.IIndividualModelTask.BMIBasedOn(PKSim.Core.Model.OriginData,OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.IParameter)">
            <summary>
               Returns a BMI Parameter as a function of height and weight
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IIndividualMoleculeFactory.CreateEmpty">
            <summary>
               Returns an empty <see cref="T:PKSim.Core.Model.IndividualMolecule" />  (only parameters are defined in the protein, no protein
               container)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IIndividualMoleculeFactory.AddAgeDependentOntogenyParametersTo(PKSim.Core.Model.IndividualMolecule)">
            <summary>
               Add all predefined ontogeny parameters to the global molecule. This is only required for actual SimulationSubject
            </summary>
            <param name="individualMolecule"></param>
        </member>
        <member name="T:PKSim.Core.Services.IInteractionKineticUpdater">
            <summary>
               Updates the kinetic of the given process (reaction, transport etc.) to take the inhibition defined in the simulation
               into account.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionKineticUpdater.UpdateReaction(OSPSuite.Core.Domain.Builder.ReactionBuilder,System.String,System.String,PKSim.Core.Model.Simulation,OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Updates the given <paramref name="reaction" /> taking place between the <paramref name="compoundName" /> (e.g. Drug)
               and the <paramref name="enzymeName" /> (e.g. CYP3A4) with the required interaction terms
               based on the interaction defined in the <paramref name="simulation" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionKineticUpdater.UpdateTransport(OSPSuite.Core.Domain.Builder.TransporterMoleculeContainer,System.String,System.String,PKSim.Core.Model.Simulation,OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Updates the given transport process <paramref name="transporterMoleculeContainer" /> triggered by the
               <paramref name="transporterName" />  and the <paramref name="transportedMolecule" /> (e.g. Drug) with the required
               interaction terms
               based on the interaction defined in the <paramref name="simulation" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionProcessRetriever.AllFor(PKSim.Core.Model.Simulation,System.Collections.Generic.IReadOnlyList{PKSim.Core.Model.IProcessMapping},System.Boolean)">
            <summary>
               Returns all partial processes that could be created for the given simulation over all compounds..
               One item will be created for each molecule in individual. Match will be performed according to molecule name in
               individual and compound
            </summary>
            <param name="simulation">simulation</param>
            <param name="processSelections">possibly used processes in the simulation for the given type</param>
            <param name="addDefaultPartialProcess">
               if set to true, the default mapping logic will be used to create the simulation partial
               process
            </param>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionTask.HasInteractionInvolving(PKSim.Core.Model.Compound,PKSim.Core.Model.Simulation)">
            <summary>
               Returns <c>true</c> if a partial process induced by a molecule is defined for the <paramref name="compound" /> and
               at the same time, an interaction process
               is defined involving that same molecule otherwise <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionTask.IsMetabolite(PKSim.Core.Model.Compound,PKSim.Core.Model.Simulation)">
            <summary>
               Returns <c>true</c> if the <paramref name="compound" /> is defined as metabolite of a metabolization process
               otherwise <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionTask.AllInteractionContainers(PKSim.Core.Model.Simulation)">
            <summary>
               Returns all interaction containers defined in the model of the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionTask.AllInteractionsSelectionsFor(System.String,PKSim.Core.Model.Simulation)">
            <summary>
               Returns all enabled <see cref="T:PKSim.Core.Model.InteractionSelection" /> defined in the <paramref name="simulation" /> for the
               molecule named  <paramref name="moleculeName" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IInteractionTask.AllInteractionProcessesFor(System.String,PKSim.Core.Model.InteractionType,PKSim.Core.Model.Simulation,System.String)">
            <summary>
               Returns all enabled <see cref="T:PKSim.Core.Model.InteractionProcess" /> defined in the <paramref name="simulation" /> for the molecule
               named  <paramref name="moleculeName" />
               having the type <paramref name="interactionType" />. If <paramref name="compoundName" /> is specified, all
               <see cref="T:PKSim.Core.Model.InteractionProcess" /> induced by a compound
               named <paramref name="compoundName" /> will be filtered out (defacto removing auto-inhibiting processes)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IObservedDataTask.AddObservedDataToAnalysable(System.Collections.Generic.IReadOnlyList{OSPSuite.Core.Domain.Data.DataRepository},OSPSuite.Core.Domain.IAnalysable)">
            <summary>
               Add the given observed data repository to the analysable. Curves will not be shown
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IObservedDataTask.AddObservedDataToAnalysable(System.Collections.Generic.IReadOnlyList{OSPSuite.Core.Domain.Data.DataRepository},OSPSuite.Core.Domain.IAnalysable,System.Boolean)">
            <summary>
               Add the given observed data repository to the simulation. Curves be shown if the showData flat is set to true
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IObservedDataTask.LoadObservedDataFromTemplateAsync">
            <summary>
               Loads observed data from the template database
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IObservedDataTask.SaveToTemplate(OSPSuite.Core.Domain.Data.DataRepository)">
            <summary>
               Saves the given <paramref name="observedData" /> to the template database
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IObservedDataTask.ExportToPkml(OSPSuite.Core.Domain.Data.DataRepository)">
            <summary>
               Export observed data to pkml format
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IObservedDataTask.LoadFromSnapshot">
            <summary>
            Loads observed data from snapshot
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationAnalysisGroupingFieldCreator.CreateGroupingFieldFor(PKSim.Core.Model.PopulationAnalyses.IPopulationAnalysisField,PKSim.Core.Model.IPopulationDataCollector)">
            <summary>
            Creates a grouping field based on the <paramref name="populationAnalysisField"/> given as parameter.
            </summary>
            <param name="populationAnalysisField">Field for which a grouping should be created</param>
            <param name="populationDataCollector">Population simulaation for which the field should be defined</param>
            <returns>The created grouping field or null, if the action was cancelled</returns>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationAnalysisGroupingFieldCreator.EditDerivedField(PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDerivedField,PKSim.Core.Model.IPopulationDataCollector)">
            <summary>
            Edit the <paramref name="derivedField"/> given as parameter. Returns true if the field as indeed edited. 
            Returns false if the user canceled the action
            </summary>
            <param name="derivedField">Field to edit</param>
            <param name="populationDataCollector">Simulation that will be analyzed using the field</param>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationAnalysisTemplateTask.LoadDerivedFieldForAsync(PKSim.Core.Model.PopulationAnalyses.PopulationAnalysis,PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDataField)">
            <summary>
            Loads a new derived field for the data field <paramref name="populationAnalysisDataField"/> belonging to the <paramref name="populationAnalysis"/>. 
            The derived field  is not added to the population. However the name of the derived field will be changed if required to ensure
            unicity in the <paramref name="populationAnalysis"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationExportTask.ExportToCSV(PKSim.Core.Model.Population,System.String)">
            <summary>
               Export the given <paramref name="population" /> to <paramref name="fileFullPath" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationExportTask.ExportToCSV(PKSim.Core.Model.Population,PKSim.Core.Services.FileSelection)">
            <summary>
               Export the given <paramref name="population" /> to <paramref name="fileSelection" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationExportTask.CreatePopulationDataFor(PKSim.Core.Model.Population,System.Boolean)">
            <summary>
               Returns a DataTable containing one row per variable parameter in the <paramref name="population" /> and one column
               per individual
               The First Columns contains the consolidated path (Starting with Organism for instance) of the parameter
               <param name="population">The population to export</param>
               <param name="includeUnitsInHeader">If true, then the column header will include the parameter base unit</param>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationExportTask.ExportToCSV(PKSim.Core.Model.PopulationSimulation,System.String)">
            <summary>
               Export the given <paramref name="populationSimulation" /> to <paramref name="fileFullPath" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationExportTask.ExportToCSV(PKSim.Core.Model.PopulationSimulation,PKSim.Core.Services.FileSelection)">
            <summary>
               Export the given <paramref name="populationSimulation" /> to <paramref name="fileSelection" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationExportTask.CreatePopulationDataFor(PKSim.Core.Model.PopulationSimulation,System.Boolean)">
            <summary>
               Returns a DataTable containing one row per advanced parameter in the <paramref name="populationSimulation" /> as
               well as all
               variable parameters defined in the underlying population. One column is created per individual
               The First Columns contains the consolidated path (Starting with Organism for instance) of the parameter.
               <param name="populationSimulation">The simulation using the population to export</param>
               <param name="includeUnitsInHeader">If true, then the column header will include the parameter base unit</param>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationSimulationAnalysisStarter.EditAnalysisForPopulationSimulation(PKSim.Core.Model.IPopulationDataCollector,PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisChart)">
            <summary>
               Edits the <paramref name="populationAnalysisChartToEdit" /> and returns the edited analysis. This might be another
               reference
               if the user confirmed the edition or the same reference if the edition action was canceled
            </summary>
            <param name="populationDataCollector">Simulation containing the analysis to edit</param>
            <param name="populationAnalysisChartToEdit">Analysis that will be edited</param>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationTask.ExtractIndividuals(PKSim.Core.Model.Population,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Starts the extraction of individuals workflow from the given <paramref name="population"/>. The user will be prompted to select the individuals to extract
            </summary>
            <param name="population">Population used for the extraction</param>
            <param name="individualIds">Optional individualIds to exctrat</param>
        </member>
        <member name="M:PKSim.Core.Services.IRenameBuildingBlockTask.RenameSimulation(PKSim.Core.Model.Simulation,System.String)">
            <summary>
               Renames the model used in the simulation based on the new name of the simulation
            </summary>
            <param name="simulation">Simulation to be renamed</param>
            <param name="newName">new simulation name</param>
        </member>
        <member name="M:PKSim.Core.Services.IRenameBuildingBlockTask.RenameBuildingBlock(PKSim.Core.Model.IPKSimBuildingBlock,System.String)">
            <summary>
               Renames the building block to <paramref name="newName" /> and ensures that all dependent objects are
               updated accordingly
            </summary>
            <param name="templateBuildingBlock">Building block to be renamed</param>
            <param name="newName">new building block name name</param>
        </member>
        <member name="T:PKSim.Core.Services.IrreversibleInhibitionKineticUpdaterSpecification">
            <summary>
               Represents the updater for irreversible inhibition processes only
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IScalingMethodSpecification.IsDefaultFor(PKSim.Core.Services.ParameterScaling)">
            <summary>
               Indicates whether the scaling method is the default for the parameter scaling
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.IScalingMethodSpecification.Method">
            <summary>
               The underlying scaling method
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationAnalysesLoader.LoadAnalysesFor(PKSim.Core.Model.PopulationSimulation)">
            <summary>
               Loads the PKAnalyses saved for the given <paramref name="populationSimulation" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationChartsLoader.LoadChartsFor(PKSim.Core.Model.Simulation)">
            <summary>
            Load the chart defined for the simulation and add them into the simulation
            </summary>
            <param name="simulation">Simulation for which the charts should be loaded</param>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationEngine`2.RunAsync(`0,PKSim.Core.Services.SimulationRunOptions)">
            <summary>
               Run the simulation asynchronously (Hand returns right away to the caller)
            </summary>
            <param name="simulation">simulation to run</param>
            <param name="simulationRunOptions">Run options for this simulation run</param>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportResultsToExcelAsync(PKSim.Core.Model.IndividualSimulation)">
            <summary>
               Exports individual simulation results to excel file selected by the user
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportResultsToExcelAsync(PKSim.Core.Model.IndividualSimulation,System.String,System.Boolean)">
            <summary>
               Exports individual simulation results to excel file with path <paramref name="fileName" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportResultsToCSVAsync(PKSim.Core.Model.Simulation)">
            <summary>
               Exports simulation results to csv file selected by the user
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportSimulationToCppAsync(PKSim.Core.Model.Simulation)">
            <summary>
               Exports simulation to C++ code
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportSimulationToCppAsync(PKSim.Core.Model.Simulation,System.String)">
            <summary>
               Exports simulation to C++ code to the folder <paramref name="outputFolder"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportResultsToCSVAsync(PKSim.Core.Model.Simulation,System.String)">
            <summary>
               Exports simulation results to the csv file with path <paramref name="fileName" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportSimulationToXmlAsync(PKSim.Core.Model.Simulation)">
            <summary>
               save the simulation as xml format (the one saved in the pksim project)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportSimulationToSimModelXmlAsync(PKSim.Core.Model.Simulation)">
            <summary>
               save the simulation as sim model xml  format (the one used in SimModel or matlab)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportSimulationToSimModelXmlAsync(PKSim.Core.Model.Simulation,System.String)">
            <summary>
               save the simulation as sim model xml  format (the one used in SimModel or matlab)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportPKAnalysesToCSVAsync(PKSim.Core.Model.PopulationSimulation)">
            <summary>
               Exports simulation pk-analyses to csv file
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportPKAnalysesToCSVAsync(PKSim.Core.Model.PopulationSimulation,System.String)">
            <summary>
               Exports simulation pk-analyses to csv file
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportODEForMatlab(PKSim.Core.Model.Simulation)">
            <summary>
               Exports simulation ODE to matlab conform code />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportODEForMatlab(PKSim.Core.Model.Simulation,System.String)">
            <summary>
               Exports simulation ODE to matlab conform code into the folder <paramref name="outputFolder"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportODEForR(PKSim.Core.Model.Simulation)">
            <summary>
               Exports simulation ODE to R conform code/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationExportTask.ExportODEForR(PKSim.Core.Model.Simulation,System.String)">
            <summary>
               Exports simulation ODE to R conform code into the folder <paramref name="outputFolder"/>
            </summary>
        </member>
        <member name="T:PKSim.Core.Services.ISimulationResultsTask">
            <summary>
               This service is in charge of copying or cloning results between a souce and a target simulation.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationResultsTask.CloneResults(PKSim.Core.Model.Simulation,PKSim.Core.Model.Simulation)">
            <summary>
               Clones the results defined in the source simulation into the target simulation.
               This is typically used after cloning the <paramref name="sourceSimulation"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationResultsTask.CopyResults(PKSim.Core.Model.Simulation,PKSim.Core.Model.Simulation)">
            <summary>
               Copy simulation results and charts
               This is typically used after configuration the <paramref name="sourceSimulation"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationSettingsRetriever.SettingsFor(PKSim.Core.Model.Simulation)">
            <summary>
               Starts the use case to define settings for the simulation
            </summary>
            <param name="simulation">The simulation for which settings should be defined</param>
            <returns>The updated settings or null if user cancels</returns>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationSettingsRetriever.SynchronizeSettingsIn(PKSim.Core.Model.Simulation)">
            <summary>
               Makes sure that the settings used do match the simulation. They could have become out of sync after a clone or configuration
               where the compound was changed
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationTransferLoader.Load(System.String)">
            <summary>
               Load the simulation transfer that is defined in the file <paramref name="pkmlFileFullPath" />
            </summary>
            <param name="pkmlFileFullPath">Full path of the simulation transfer file</param>
            <returns>The simulation transfer deserialized using the file <paramref name="pkmlFileFullPath" /></returns>
            <exception cref="T:PKSim.Core.PKSimException">is thrown if the file does not represent a SimulationTransfer file</exception>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateDatabaseCreator.CreateDefaultTemplateDatabase">
            <summary>
            Creates a default user template database if not already available for the current user
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTask.SaveToTemplate``1(``0,PKSim.Core.Model.TemplateType,System.String)">
            <summary>
               Starts the save to template workflow asking the user to enter a name under which the
               <paramref name="objectToSave" /> shall be saved.
            </summary>
            <param name="objectToSave">Object to be saved as template</param>
            <param name="templateType">Template type under which the <paramref name="objectToSave" /> will be categorized</param>
            <param name="defaultName">Default name for the template</param>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTask.SaveToTemplate``1(``0,PKSim.Core.Model.TemplateType)">
            <summary>
               Starts the save to template  workflow asking the user to enter a name under which the
               <paramref name="objectToSave" /> shall be saved. The default name used will bethe name of the  <paramref name="objectToSave"/>
            </summary>
            <param name="objectToSave">Object to be saved as template</param>
            <param name="templateType">Template type under which the <paramref name="objectToSave" /> will be categorized</param>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTask.LoadFromTemplateAsync``1(PKSim.Core.Model.TemplateType)">
            <summary>
               Starts the load from template workflow allowing the user to select one template for the given
               <paramref name="templateType" />
            </summary>
            <returns>Returns the selected template or an empty list if the action was cancelled by the user</returns>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTask.LoadSingleFromTemplateAsync``1(PKSim.Core.Model.TemplateType)">
            <summary>
               Starts the load from template workflow allowing the user to select one template for the given
               <paramref name="templateType" />
            </summary>
            <returns>Returns the selected template or null</returns>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTaskQuery.AllTemplatesFor(PKSim.Core.Model.TemplateType)">
            <summary>
               Returns all available templates for the given <paramref name="templateType" />
            </summary>
            <param name="templateType">Type of template object for which the available templates should be retrieved</param>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTaskQuery.AllTemplatesFor(PKSim.Core.Model.TemplateDatabaseType,PKSim.Core.Model.TemplateType)">
            <summary>
               Returns all available templates of type <paramref name="templateDatabaseType" /> for the given
               <paramref name="templateType" />
            </summary>
            <param name="templateDatabaseType">Type of database template to search for.</param>
            <param name="templateType">Type of template object for which the available templates should be retrieved</param>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTaskQuery.LoadTemplateAsync``1(PKSim.Core.Model.Template)">
            <summary>
               Returns a fully loaded building block from the database with the given <paramref name="template" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTaskQuery.Exists(PKSim.Core.Model.TemplateDatabaseType,System.String,PKSim.Core.Model.TemplateType)">
            <summary>
               This method check whether a template already exists in the database for given building block type with given name.
            </summary>
            <param name="templateDatabaseType">Type of template to search for.</param>
            <param name="name">Name to search for.</param>
            <param name="templateType">Type to search for.</param>
            <returns>True, is there is already a template defined with that name</returns>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTaskQuery.SaveToTemplate(PKSim.Core.Model.LocalTemplate)">
            <summary>
               Save the given <paramref name="templateItem" /> in the template database
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTaskQuery.SaveToTemplate(System.Collections.Generic.IReadOnlyList{PKSim.Core.Model.LocalTemplate})">
            <summary>
               Save the given <paramref name="templateItems" /> in the template database/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTaskQuery.DeleteTemplate(PKSim.Core.Model.Template)">
            <summary>
               Deletes the  template identified by <paramref name="templateToDelete" /> .
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTaskQuery.IsPrimitiveType(PKSim.Core.Model.TemplateType)">
            <summary>
               Returns true if the  is a primitive type (i.e can be saved in the database as template) or false otherwise;
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ITemplateTaskQuery.RenameTemplate(PKSim.Core.Model.Template,System.String)">
            <summary>
               Renames the given building block template with the given <paramref name="newName" />
            </summary>
            <param name="buildingBlockTemplate">Building block template to rename</param>
            <param name="newName">New name</param>
        </member>
        <member name="P:PKSim.Core.Services.IVersionChecker.ProductName">
            <summary>
               Name of the product as registered in the version file
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.IVersionChecker.CurrentVersion">
            <summary>
               Current version of the product in format x.y.z
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.IVersionChecker.VersionFileUrl">
            <summary>
               Url of the version file
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.IVersionChecker.LatestVersion">
            <summary>
               Returns the latest version available for the registered product
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IVersionChecker.LatestVersionFor(System.String)">
            <summary>
               Returns the latest version available for the  product named <paramref name="productName"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IVersionChecker.DownloadLatestVersionInfoAsync">
            <summary>
               Downloads the latest version available for our software products
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.IVersionChecker.NewVersionIsAvailable">
            <summary>
               Returns true if a new version was found otherwise false. The latest version can be retrieved from LatestVersion
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IVersionChecker.NewVersionIsAvailableFor(System.String,System.String)">
            <summary>
               Returns true if a new version was found for product named <paramref name="productName" /> otherwise false.
            </summary>
        </member>
        <member name="T:PKSim.Core.Services.MixedInhibitionKineticUpdaterSpecification">
            <summary>
               Represents the updater for non-competitive inhibition processes only
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IModelPropertiesTask.DefaultFor(PKSim.Core.Model.OriginData)">
            <summary>
               Creates the default model properties based on origin data
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IModelPropertiesTask.DefaultFor(PKSim.Core.Model.OriginData,System.String)">
            <summary>
               Creates the default model properties based on origin data and model name
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IModelPropertiesTask.DefaultFor(PKSim.Core.Model.ModelConfiguration,PKSim.Core.Model.OriginData)">
            <summary>
               Creates the default model properties for a predefined model configuration
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IModelPropertiesTask.Update(PKSim.Core.Model.ModelProperties,PKSim.Core.Model.ModelProperties,PKSim.Core.Model.OriginData)">
            <summary>
               Checks if the old and new model properties are compatible (same model and species). In that case, return the old one
               else
               we try to update as many properties as possible in the old one (such as cm , model etc.)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IModelPropertiesTask.UpdateCategoriesIn(PKSim.Core.Model.ModelProperties,PKSim.Core.Model.OriginData)">
            <summary>
               Make sure that the model properties are up-to-date with the definition in the database. This should be called once
               the simulation is being loaded
            </summary>
        </member>
        <member name="T:PKSim.Core.Services.MolarToMassConcentrationDimensionConverter">
            <summary>
               Converter should convert a value into the concentration
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeCalculationRetriever.AllMoleculeCalculationMethodsUsedBy(PKSim.Core.Model.Simulation)">
            <summary>
            Returns the distinct <see cref="T:OSPSuite.Core.Domain.Builder.CoreCalculationMethod"/> used in the <paramref name="simulation"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeCalculationRetriever.AllMoleculeCalculationMethodsUsedBy(PKSim.Core.Model.IWithCalculationMethods)">
            <summary>
            Returns the distinct <see cref="T:OSPSuite.Core.Domain.Builder.CoreCalculationMethod"/> used in the <paramref name="withCalculationMethods"/>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeExpressionTask`1.AddExpressionProfile(`0,PKSim.Core.Model.ExpressionProfile)">
            <summary>
               Add an expression profile to the given individual named based on the
               <paramref name="expressionProfile" />
            </summary>
            <param name="simulationSubject">Simulation subject where the molecule will be added</param>
            <param name="expressionProfile">Expression profile to add to the simulation subject</param>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeExpressionTask`1.RemoveExpressionProfileFor(PKSim.Core.Model.IndividualMolecule,`0)">
            <summary>
               Remove the given molecule from the simulationSubject
            </summary>
            <param name="moleculeToRemove">Molecule to be removed</param>
            <param name="simulationSubject">Simulation subject containing the molecule to be removed</param>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeExpressionTask`1.SetTransportDirection(PKSim.Core.Model.TransporterExpressionContainer,PKSim.Core.Model.TransportDirectionId)">
            <summary>
               Updates the transport direction type for the transporter container given as parameter
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeExpressionTask`1.SetExpressionLocalizationFor(PKSim.Core.Model.IndividualProtein,PKSim.Core.Model.Localization,`0)">
            <summary>
               Update the localization of the protein
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeExpressionTask`1.SetTransporterTypeFor(PKSim.Core.Model.IndividualTransporter,OSPSuite.Core.Domain.TransportType)">
            <summary>
               Updates the transporter type for all organ defines for transporter with the given transporter type (only if the
               transporter type is defined)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeOntogenyVariabilityUpdater.UpdateAllOntogenies(PKSim.Core.Model.Population)">
            <summary>
               Updates the ontogeny factor for all plasma proteins and molecules defined in the population
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeParameterTask.SetDefaultMoleculeParameters(PKSim.Core.Model.IndividualMolecule,System.String)">
            <summary>
               Updates the default global molecule parameters in the molecule based on the values defined in the database
            </summary>
            <param name="molecule">Molecule containing the parameters to update</param>
            <param name="moleculeName">
               Name of molecule to use to retrieve the default parameters. If not set,
               <paramref name="molecule" /> name will be used instead
            </param>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeParameterTask.SetDefaultFor(PKSim.Core.Model.ExpressionProfile,System.String)">
            <summary>
               Updates the default molecule parameters in the molecule based on the values defined in the database
            </summary>
            <param name="expressionProfile">Expression profile containing the parameters to update</param>
            <param name="moleculeName">
               Name of molecule to use to retrieve the default parameters. If not set,
               <paramref name="expressionProfile" /> molecule name will be used instead
            </param>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeParameterVariabilityCreator.AddVariabilityTo(PKSim.Core.Model.Population)">
            <summary>
               Automatically adds variability to the <paramref name="population" />
               but only for molecule parameters defined in the database.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeParameterVariabilityCreator.AddMoleculeVariability(PKSim.Core.Model.IndividualMolecule,PKSim.Core.Model.Population,System.Boolean)">
            <summary>
               Automatically adds user defined variability to the <paramref name="population" /> for
               the <paramref name="molecule" /> only if the information is available in the database and returns the
               executed command. If<paramref name="usePredefinedMeanVariability" /> is <c>true</c>, the mean defined in the
               database will be used. Otherwise the value defined in the molecule will used.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculeParameterVariabilityCreator.AddMoleculeVariability(System.String,PKSim.Core.Model.Population,System.Boolean)">
            <summary>
               Automatically adds user defined variability to the <paramref name="population" /> for
               the molecile named <paramref name="moleculeName" /> only if the information is available in the database and returns the
               executed command. If<paramref name="usePredefinedMeanVariability" /> is <c>true</c>, the mean defined in the
               database will be used. Otherwise the value defined in the molecule will used.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IMoleculesAndReactionsCreator.CreateFor(OSPSuite.Core.Domain.Module,PKSim.Core.Model.Simulation)">
            <summary>
               Create Molecule building block based on the selected individual and compound.
               One molecule will be created for the compound.
               One active transport for each active transport process taking place in the individual for the compound.
               One enzyme/metabolite pair for each metabolization process taking place in the individual for the compound.
               Once the molecules have been created the reaction taking place in the system will be added
               Last, the molecule start values will be set
            </summary>
        </member>
        <member name="T:PKSim.Core.Services.NonCompetitiveInhibitionKineticUpdaterSpecification">
            <summary>
               Represents the updater for non-competitive inhibition processes only
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IObservedDataInSimulationManager.SimulationsUsing(OSPSuite.Core.Domain.Data.DataRepository)">
            <summary>
               Returns all the simulation using the given observed data
            </summary>
            <param name="observedData">data repository used to filter the simulation</param>
        </member>
        <member name="M:PKSim.Core.Services.IObservedDataInSimulationManager.UpdateObservedDataInSimulationsUsing(OSPSuite.Core.Domain.Data.DataRepository)">
            <summary>
               Trigger an update of all simulatuon using the given data repository (for instance after a rename)
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IObserverTask.LoadObserverFrom(System.String)">
            <summary>
               Load the observer that is defined in the file <paramref name="fileName" />
            </summary>
            <param name="fileName">Full path of the observer file</param>
            <returns>The observer deserialized using the file <paramref name="fileName" /></returns>
            <exception cref="T:PKSim.Core.PKSimException">is thrown if the file does not represent an observer file</exception>
        </member>
        <member name="M:PKSim.Core.Services.IParameterChangeUpdater.UpdateObjectsDependingOn(OSPSuite.Core.Domain.IParameter)">
            <summary>
            Update all objects depending on the <paramref name="parameter"/> given as parameter. 
            For example, if the MolWeight of a compound building block is changed, all observed data defined for that compound will
            have the value of internal molweight value updated
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterChangeUpdater.UpdateMolWeightIn(OSPSuite.Core.Domain.Data.DataRepository)">
            <summary>
            Updates the internal molweight value stored in <paramref name="observedData"/> to match the molweight value of the compound buildingblock
            for which this <paramref name="observedData"/> was imported.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ParameterContainerTask.addParametersTo(OSPSuite.Core.Domain.IContainer,PKSim.Core.Model.OriginData,System.Collections.Generic.IEnumerable{System.String},System.Func{PKSim.Core.Model.ParameterMetaData,System.Boolean},System.Action{PKSim.Core.Model.ParameterMetaData,OSPSuite.Core.Domain.IParameter},OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               Add all parameters defined in the database for the given <paramref name="originData" /> and
               <paramref name="calculationMethods" /> in <paramref name="parameterContainer" />
            </summary>
            <param name="parameterContainer">Container where all parameters will be added</param>
            <param name="originData">Origin data used to retrieve constant parameter values</param>
            <param name="calculationMethods">Calculation methods used to retrieve rate parameter values</param>
            <param name="predicate">Optional predicate used to filter out some parameter from the query</param>
            <param name="parameterValueModifier">
               Optional action that will allow the caller to manipulate the default value created
               for the parameter
            </param>
            <param name="formulaCache">Formula cache where the formula will be defined for a rate parameter</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterGroupTask.TopGroupsUsedBy(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Returns all the top groups used by the parameters
            </summary>
            <param name="allParameters">Parameters for which the used groups should be retrieved</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterGroupTask.GroupsUsedBy(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Returns all the  groups used by parameters (only the groups actually containing parameters)
            </summary>
            <param name="allParameters">Parameters for which the used groups should be retrieved</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterGroupTask.ParametersIn(OSPSuite.Core.Domain.IGroup,System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Return for the given group the subset from <paramref name="allParameters" />  belonging to that group.
            </summary>
            <param name="group">Group for which the subset of parmeters should be retrieved</param>
            <param name="allParameters">all existing parameters (some of which may or may not belong to the group</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterGroupTask.ParametersIn(System.String,System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Returns for the given group the subset from <paramref name="allParameters" />  belonging to that group.
            </summary>
            <param name="groupName">Name of the group for which the subset of parmeters should be retrieved</param>
            <param name="allParameters">all existing parameters (some of which may or may not belong to the group</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterGroupTask.ParametersInTopGroup(OSPSuite.Core.Domain.IGroup,System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Returns for the given top group the subset from <paramref name="allParameters" />  belonging to that top group.
               (e.g. there are in a group whose root is the group with the name topGroupName)
            </summary>
            <param name="group">Group for which the subset of parmeters should be retrieved</param>
            <param name="allParameters">all existing parameters (some of which may or may not belong to the group</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterGroupTask.ParametersInTopGroup(System.String,System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Returns for the given top group the subset from <paramref name="allParameters" />  belonging to that top group.
               (e.g. there are in a group whose root is the group with the name topGroupName)
            </summary>
            <param name="topGroupName">Name of the top group for which the subset of parmeters should be retrieved</param>
            <param name="allParameters">all existing parameters (some of which may or may not belong to the group</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterGroupTask.GroupHasParameter(OSPSuite.Core.Domain.IGroup,System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Returns true if at least one parameter in <paramref name="allParameters" /> is child of the given group
               <paramref
                  name="group" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterIdUpdater.ResetParameterOrigin(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Resets the parameter origin in all <paramref name="parameters" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterIdUpdater.ResetParameterOrigin(OSPSuite.Core.Domain.ParameterOrigin)">
            <summary>
               Resets the <paramref name="parameterOrigin" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterIdUpdater.UpdateParameterId(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.IParameter)">
            <summary>
               Update the origin parameter id of the target parameter with the id of the source parameter
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterIdUpdater.UpdateParameterIds(OSPSuite.Core.Domain.IContainer,OSPSuite.Core.Domain.IContainer)">
            <summary>
               Update the origin parameter ids of a parameter in the target container with the id of the same parameter
               in the source container, if available.
               <remarks>Same is defined as "having the same name"</remarks>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterIdUpdater.UpdateParameterIds(OSPSuite.Core.Domain.IContainer,System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Update the origin parameter ids of a parameter in the target enumeration with the id of the same parameter
               in the source container, if available.
               <remarks>Same is defined as "having the same name"</remarks>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterIdUpdater.UpdateParameterIds(OSPSuite.Core.Domain.PathCache{OSPSuite.Core.Domain.IParameter},OSPSuite.Core.Domain.PathCache{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Update the origin parameter ids of a parameter in the target enumeration with the id of the same parameter
               in the source container, if available.
               <remarks>Same is defined as "having the same path"</remarks>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterIdUpdater.UpdateBuildingBlockId(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter},PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Update the building block if of all parameters to the id of the building block given as parameter
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterIdUpdater.UpdateBuildingBlockId(OSPSuite.Core.Domain.IContainer,PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Update the building block if of all parameters defined in the container and its sub container to the id of the
               building block given as parameter
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterIdUpdater.ResetParameterIsDefaultState(OSPSuite.Core.Domain.IContainer,System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IWithName})">
            <summary>
               Find parameters by name in the <paramref name="sourceContainer" /> based on the
               <paramref name="parameterUsedByNamesForLookup" /> and
               set the IsDefault value to false. This is really useful when simulation parameters from building block parameters
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.ParameterScaling.SourceParameter">
            <summary>
               Origin parameter for the scaling (e.g. Adult parameter)
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.ParameterScaling.TargetParameter">
            <summary>
               Target parameter for the scaling (e.g. child parameter)
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.ParameterScaling.ScalingMethod">
            <summary>
               Method after which the scaling should be performed
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.ParameterScaling.ScaledValue">
            <summary>
               Returns the scaled value in base unit according to the scaling method
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.ParameterScaling.TargetScaledValueInDisplayUnit">
            <summary>
               Returns the scaled value in Display Unit
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.ParameterScaling.SourceDefaultValueInDisplayUnit">
            <summary>
               Returns the source value in Display Unit
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.ParameterScaling.SourceValueInDisplayUnit">
            <summary>
               Returns the source value in Display Unit
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.ParameterScaling.TargetDefaultValueInDisplayUnit">
            <summary>
               Returns the target default in Display Unit
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.ParameterScaling.TargetValue">
            <summary>
               Returns the target default in core unot
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ParameterScaling.Scale">
            <summary>
               Scales the target parameter and returns the actual scale command that was used to perform the scaling
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.ParameterScaling.IsDistributedScaling">
            <summary>
               Returns true if both source and target parameters are distributed
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterSetUpdater.UpdateValues(OSPSuite.Core.Domain.IContainer,OSPSuite.Core.Domain.IContainer)">
            <summary>
               Update all parameters defined in the target container with the value of the same parameter in the source container
               if available. Same parameter is defined as "have the same absolute path".
            </summary>
            <param name="sourceContainer">container from which the value should be taken</param>
            <param name="targetContainer">container for which the parameter values should be updated</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterSetUpdater.UpdateValues(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter},System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Update all parameters defined in the target enumeration with the value of the same parameter in the source
               enumeration
               <paramref name="sourceParameters" />. Same parameter is defined as "have the same absolute path".
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterSetUpdater.UpdateValues(OSPSuite.Core.Domain.PathCache{OSPSuite.Core.Domain.IParameter},OSPSuite.Core.Domain.IContainer)">
            <summary>
               Update all parameters defined in the target container  with the value of the same parameter in the source cache
               <paramref name="sourceParameters" />. Same parameter is defined as "have the same absolute path".
            <param name="sourceParameters"> Parameters from which the value should be taken</param>
               <param name="targetContainer">container for which the parameter values should be updated</param>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterSetUpdater.UpdateValues(OSPSuite.Core.Domain.PathCache{OSPSuite.Core.Domain.IParameter},OSPSuite.Core.Domain.PathCache{OSPSuite.Core.Domain.IParameter},System.Boolean)">
            <summary>
               Update all parameters defined in the target cache with the value of the same parameter in the source cache
               <paramref name="sourceParameters" />. Same parameter is defined as being registered with the same key in the cache.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterSetUpdater.UpdateValuesByName(OSPSuite.Core.Domain.IContainer,OSPSuite.Core.Domain.IContainer)">
            <summary>
               Update all parameters defined in the target container with the value of the same parameter in the source container
               if available. Same parameter is defined as "have the same name"
            </summary>
            <param name="sourceContainer">container from which the value should be taken</param>
            <param name="targetContainer">container for which the parameter values should be updated</param>
            <returns></returns>
        </member>
        <member name="M:PKSim.Core.Services.IParameterSetUpdater.UpdateValuesByName(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter},System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Update all parameters defined in the target enumeration with the value of the same parameter in the source
               enumeration
               <paramref name="sourceParameters" />. Same parameter is defined as "have the same name".
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterSetUpdater.UpdateValuesByName(OSPSuite.Core.Domain.IContainer,System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Update all parameters defined in the target enumeration with the value of the same parameter in the source container
               if available. Same parameter is defined as "have the same name"
            </summary>
            <param name="sourceContainer">container from which the value should be taken</param>
            <param name="targetParameters">Parameter enumeration for which the parameter values should be updated</param>
            <returns></returns>
        </member>
        <member name="M:PKSim.Core.Services.IParameterSetUpdater.UpdateValue(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.IParameter,System.Boolean)">
            <summary>
               Update the value from the source parameter in the target parameter
            </summary>
            <param name="sourceParameter">Source parameter containing the value</param>
            <param name="targetParameter">Target parameter that will be updated with the value from the source parameter</param>
            <param name="updateParameterOriginId">
               Set to true, the <paramref name="targetParameter" /> origin id will be set to the
               id of <paramref name="sourceParameter" />
            </param>
            <returns></returns>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterDisplayValue(OSPSuite.Core.Domain.IParameter,System.Double)">
            <summary>
               Sets the value in the parameter. Value will be converted in kernel unit
            </summary>
            <param name="parameter">Parameter</param>
            <param name="valueToSetInGuiUnit">Value in display unit</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterDisplayValue(OSPSuite.Core.Domain.IParameter,System.Enum)">
            <summary>
               Sets the value in the parameter. Value will be converted in kernel unit
            </summary>
            <param name="parameter">Parameter</param>
            <param name="enumValue">Enumeration value that will be converted to a double</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterDisplayValueAsStructureChange(OSPSuite.Core.Domain.IParameter,System.Double)">
            <summary>
               Sets the value in the parameter. Value will be converted in kernel unit
               The command will be a structure change command
            </summary>
            <param name="parameter">Parameter</param>
            <param name="valueToSetInGuiUnit">Value in display unit</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterDisplayValueAsStructureChange(OSPSuite.Core.Domain.IParameter,System.Boolean)">
            <summary>
               Sets the value in the parameter. Value will be converted in kernel unit
               The command will be a structure change command
            </summary>
            <param name="parameter">Parameter</param>
            <param name="value">Boolean value that will be converted to 1 if value==true or 0 otherwise </param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterDisplayValueWithoutBuildingBlockChange(OSPSuite.Core.Domain.IParameter,System.Double)">
            <summary>
               Sets the value in the parameter. Value will be converted in kernel unit
               The command will not induce a change in the version of the containing building block
            </summary>
            <param name="parameter">Parameter</param>
            <param name="valueToSetInGuiUnit">Value in display unit</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterDisplayUnit(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.UnitSystem.Unit,System.Boolean)">
            <summary>
               Sets the display unit of the parameter. Value will not be updated (3 mg=> 3l)
            </summary>
            <param name="parameter">Parameter</param>
            <param name="displayUnit">displayUnit</param>
            <param name="shouldUpdateDefaultStateAndValueOriginForDefaultParameter">
               If set to <c>true</c> default, default state
               and value origin of parameter will be updated as well
            </param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterValue(OSPSuite.Core.Domain.IParameter,System.Double,System.Boolean)">
            <summary>
               Sets the value in the parameter. Value will be take as is
            </summary>
            <param name="parameter">Parameter</param>
            <param name="value">Value in kernel unit</param>
            <param name="shouldUpdateDefaultStateAndValueOriginForDefaultParameter">
               If set to <c>true</c> default, default state
               and value origin of parameter will be updated as well
            </param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterValueAsStructureChange(OSPSuite.Core.Domain.IParameter,System.Double,System.Boolean)">
            <summary>
               Sets the value in the parameter. Value will be taken as is
               The command will be a structure change command
            </summary>
            <param name="parameter">Parameter</param>
            <param name="value">Value in kernel unit</param>
            <param name="shouldUpdateDefaultStateAndValueOrigin">
               If set to <c>true</c> default, default state and value origin of
               parameter will be updated as well
            </param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterValueOrigin(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.ValueOrigin)">
            <summary>
               Updates the value origin in the parameter. The default flag will be updated
            </summary>
            <param name="parameter">Parameter</param>
            <param name="valueOrigin">Value origin</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParametersValueOrigin(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter},OSPSuite.Core.Domain.ValueOrigin)">
            <summary>
               Updates the value origin of all <paramref name="parameters" /> in one single command. In that case, the default flag
               is not updated
            </summary>
            <param name="parameters">Parameters</param>
            <param name="valueOrigin">Value origin</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterPercentile(OSPSuite.Core.Domain.IParameter,System.Double)">
            <summary>
               Sets the percentile in the parameter.
            </summary>
            <param name="parameter">Distributed Parameter</param>
            <param name="percentile">Percentile</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterUnit(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.UnitSystem.Unit)">
            <summary>
               Sets the current unit in the parameter.
            </summary>
            <param name="parameter">Parameter</param>
            <param name="displayUnit">Display unit</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterUnitAsStructuralChange(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.UnitSystem.Unit)">
            <summary>
               Sets the current unit in the parameter and triggers a structural change command
            </summary>
            <param name="parameter">Parameter</param>
            <param name="displayUnit">Display unit</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterUnitWithoutBuildingBlockChange(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.UnitSystem.Unit)">
            <summary>
               Sets the current unit in the parameter. The version of the building block containing the parameter will not be
               changed
            </summary>
            <param name="parameter">Parameter</param>
            <param name="displayUnit">Display unit</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.ResetParameters(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Resets all parameters to their default values
            </summary>
            <param name="parameters">Parameters to be reset</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.ResetParameter(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Resets the parameter to its default value
            </summary>
            <param name="parameter">Parameter to be reset</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.ScaleParameters(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter},System.Double)">
            <summary>
               Scales the value of the given parameters with the factor
            </summary>
            <param name="parametersToScale">Parameters whose values will be multiplied with the factor</param>
            <param name="factor">Scaling factor</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetAdvancedParameterDisplayValue(OSPSuite.Core.Domain.IParameter,System.Double)">
            <summary>
               Sets the value in an advanced parameter. Value will be converted in kernel unit
               On top of setting the value in the parameter, a new distribution will be created for the parent advanced parameter
               container
            </summary>
            <param name="parameter">Parameter</param>
            <param name="valueToSetInGuiUnit">Value in display unit</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetAdvancedParameterUnit(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.UnitSystem.Unit)">
            <summary>
               Sets the display unit in an advanced parameter.
               On top of setting the value in the parameter, a new distribution will be created for the parent advanced parameter
               container
            </summary>
            <param name="parameter">Parameter</param>
            <param name="displayUnit">Display unit</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterFavorite(OSPSuite.Core.Domain.IParameter,System.Boolean)">
            <summary>
               Adds the parameter to the favorite, or remove the parameter from the favorite
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetCompoundType(OSPSuite.Core.Domain.IParameter,PKSim.Core.Model.CompoundType)">
            <summary>
               Sets the given compound type to the compoundType Parameter
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.PathFor(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Returns the full path of the <paramref name="parameter" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.SetParameterFormula(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.Formulas.IFormula)">
            <summary>
               Sets the given formula as formula in the parameter.
            </summary>
            <remarks>
               This should not be used with building block parameters defined in simulation as a reference will be saved in both
               simulation parameters and used building block
            </remarks>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.UpdateTableFormula(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.Formulas.TableFormula)">
            <summary>
               Updates the table formula defined in the tableParameter with the the value of the tableFormula! This implicitly
               performs a clone of the table formula and does not update the references in the tableParameter
            </summary>
            <param name="tableParameter">
               Parameter whose formula should be updated. It is assumed that its formula is a TableFormula
            </param>
            <param name="tableFormula">TableFormula from which the value will be take</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.UpdateTableFormulaWithoutBuildingBlockChange(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.Formulas.TableFormula)">
            <summary>
               Updates the table formula defined in the tableParameter with the value of the tableFormula! This implicitly
               performs a clone of the table formula and does not update the references in the tableParameter. The version of the
               building block containing the parameter will not be changed
            </summary>
            <param name="tableParameter">
               Parameter whose formula should be updated. It is assumed that its formula is a TableFormula
            </param>
            <param name="tableFormula">TableFormula from which the value will be take</param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterTask.UpdateDistributedTableFormula(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.IDistributedParameter)">
            <summary>
               Updates the distributed table formula defines in the <paramref name="tableParameter" /> using the percentile of the
               given <paramref name="distributedParameter" />. If the formula is not a distributed table formula,
               an empty command is returned.
            </summary>
            <param name="tableParameter">
               Table parameter containing the <see cref="T:OSPSuite.Core.Domain.Formulas.DistributedTableFormula" /> that will be updated
            </param>
            <param name="distributedParameter">
               Distributed parameter containing the percentile use to update the <paramref name="tableParameter" /> formula
            </param>
        </member>
        <member name="M:PKSim.Core.Services.IParameterUpdater.UpdateValue(OSPSuite.Core.Domain.IParameter,OSPSuite.Core.Domain.IParameter)">
            <summary>
               Update the parameter formula from the source parameter into the target parameter without any other
               checking necessary
            </summary>
            <param name="sourceParameter">source parameter from which the formula will be taken</param>
            <param name="targetParameter">target parameter whose formula will be set</param>
        </member>
        <member name="T:PKSim.Core.Services.IPartialProcessRetriever">
            <summary>
               Retrieve the possible partial processes that can be created based on the one hand on the compound and individual
               defined in the simulation,
               and on the other hand on the model structure in the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPartialProcessRetriever.AllFor``2(PKSim.Core.Model.Simulation,PKSim.Core.Model.Compound,System.Collections.Generic.IReadOnlyList{PKSim.Core.Model.IProcessMapping},System.Boolean)">
            <summary>
               Returns all partial processes that could be created for the given simulation, and the given compound.
               One item will be created for each molecule in individual. Match will be performed according to molecule name in
               individual and compound
            </summary>
            <typeparam name="TIndividualMolecule">Type of molecule for which the processes need to be retrieved</typeparam>
            <typeparam name="TPartialProcess">Type of partial processes used n the compound</typeparam>
            <param name="simulation">simulation</param>
            <param name="compound">compound</param>
            <param name="processSelections">possibly used processes in the simulation for the given type</param>
            <param name="addDefaultPartialProcess">
               if set to true, the default mapping logic will be used to create the simulation partial
               process
            </param>
        </member>
        <member name="M:PKSim.Core.Services.IPivotResultCreator.Create(PKSim.Core.Model.PopulationAnalyses.PopulationPivotAnalysis,PKSim.Core.Model.IPopulationDataCollector,PKSim.Core.Model.PopulationAnalyses.ObservedDataCollection,OSPSuite.Utility.Data.Aggregate)">
            <summary>
               Using the row data displayed in the pivot, creates the pivot result data that will be pass along to the populaton
               analysis chart
            </summary>
            <param name="pivotAnalysis">The population pivot analysis being run</param>
            <param name="populationDataCollector">The analyzer containing the data for the analysis</param>
            <param name="observedDataCollection">Collection of observed data that ought to be displayed</param>
            <param name="aggregate">The aggregation function used to create the plot data</param>
        </member>
        <member name="M:PKSim.Core.Services.IPKAnalysesTask.CalculateFor(PKSim.Core.Model.PopulationSimulation,PKSim.Core.Services.CompoundPKContext)">
            <summary>
               Calculates the PKAnalyses for the given <paramref name="populationSimulation" />. It does not delete the previous pk
               calculation from the <paramref name="populationSimulation" />
            </summary>
            <param name="populationSimulation">Population simulation for which pk parameters should be calculated</param>
            <param name="compoundPKContext">If there is context such as prior calculations of ratio parameters, they are held here</param>
            <returns>The PopulationSimulationPKAnalyses containing all calculated values</returns>
        </member>
        <member name="M:PKSim.Core.Services.IPKAnalysesTask.CalculateFor(System.Collections.Generic.IReadOnlyList{PKSim.Core.Model.Simulation},System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.Data.DataColumn},PKSim.Core.Model.GlobalPKAnalysis)">
            <summary>
               Calculates the <see cref="T:PKSim.Core.Services.IndividualPKAnalysis" /> for the given <paramref name="dataColumns" /> corresponding to
               outputs defined in the <paramref name="simulations" />. If the optional parameter
               <paramref name="globalPKAnalysis" /> is set, some warning may be displayed for single pK-Parameter values
               based on global pK-parameter values such as fraction absorbed
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPKAnalysesTask.CreatePKAnalysisFromValues(OSPSuite.Core.Domain.Data.PKValues,PKSim.Core.Model.Simulation,System.Nullable{System.Double},System.String)">
            <summary>
               Resolves options and use the mapper to create a PKAnalysis out of the values and a simulation for a given compound
            </summary>
            <param name="pkValues">values to use</param>
            <param name="simulation">the simulation</param>
            <param name="compoundMolWeight">An optional compound molar weight</param>
            <param name="compoundName">The name of the compound to calculate PK Analysis for</param>
            <returns></returns>
        </member>
        <member name="M:PKSim.Core.Services.IPKAnalysesTask.CalculateBioavailabilityFor(PKSim.Core.Model.Simulation,System.String)">
            <summary>
               Starts the calculation of the bioavailability for the compound named <paramref name="compoundName" /> by switching
               its application
               protocol with an iv protocol
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPKAnalysesTask.CalculateDDIRatioFor(PKSim.Core.Model.Simulation)">
            <summary>
               Starts the calculation of the Auc DDI Ratio for all compounds /> by switching off all other applications
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPKAnalysesTask.CanCalculateGlobalPKFor(PKSim.Core.Model.Protocol)">
            <summary>
               Returns true if global pk-analysis can be calculated for the given <paramref name="protocol" /> otherwise false
            </summary>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:PKSim.Core.Services.IPKAnalysesTask.CanCalculateGlobalPKFor(PKSim.Core.Model.Simulation)">
            <summary>
               Returns true if global pk-analysis can be calculated for the given <paramref name="simulation" /> otherwise false
            </summary>
            <param name="simulation"></param>
        </member>
        <member name="M:PKSim.Core.Services.PKAnalysesTask.rangeDescriptions(System.String)">
            <summary>
               Returns the range strings when the <paramref name="text" /> contains 'Range 2.5% to 97.5%' language
            </summary>
            <param name="text">The text being split</param>
            <returns>
               The individual range descriptions as a tuple containing low range and high range.
               If the string cannot be split on 'Range', returns the original text in both members of the tuple
            </returns>
        </member>
        <member name="M:PKSim.Core.Services.IPKCalculationOptionsFactory.CreateFor(PKSim.Core.Model.PopulationSimulation,System.String)">
            <summary>
               Creates the <see cref="T:OSPSuite.Core.Domain.Services.PKCalculationOptions" /> based on the given <paramref name="populationSimulation" /> and
               ensure that the dose is set to <c>null</c>
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationAnalysisFlatTableCreator.Create(PKSim.Core.Model.IPopulationDataCollector,System.Collections.Generic.IReadOnlyCollection{PKSim.Core.Model.PopulationAnalyses.IPopulationAnalysisField})">
            <summary>
               Creates the data that will be displayed in the pivot presenter based on the given
               <paramref name="populationAnalysisFields" /> and the <paramref name="populationDataCollector" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationAnalysisFlatTableCreator.Create(PKSim.Core.Model.IPopulationDataCollector,PKSim.Core.Model.PopulationAnalyses.PopulationAnalysis)">
            <summary>
               Creates the data that will be displayed in the pivot presenter using the fields defined in the given
               <paramref name="populationAnalysis" /> and the <paramref name="populationDataCollector" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationSimulationAnalysisSynchronizer.UpdateAnalysesDefinedIn(PKSim.Core.Model.PopulationSimulation)">
            <summary>
               Ensures that fields used in all population analyses of <paramref name="populationSimulation" /> are referencing
               existing outputs.
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationSimulationExportTask.ExportForCluster(PKSim.Core.Model.PopulationSimulation,System.String,System.String)">
            <summary>
               Export the given <paramref name="populationSimulation" /> to a folder containing all the necessary files to run the
               matlab wrapper
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IPopulationSimulationExportTask.ExportForCluster(PKSim.Core.Model.PopulationSimulation,PKSim.Core.Services.FileSelection)">
            <summary>
               Export the given <paramref name="populationSimulation" /> to a folder containing all the necessary files to run the
               matlab wrapper
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IReactionBuildingBlockCreator.CreateFor(PKSim.Core.Model.Simulation)">
            <summary>
               Creates a <see cref="T:OSPSuite.Core.Domain.Builder.ReactionBuildingBlock" /> based on the process settings defined in the
               <paramref name="simulation" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IScalingMethodTask.AllMethodsFor(PKSim.Core.Services.ParameterScaling)">
            <summary>
               Returns all the scaling methods available for the given parameter scaling
            </summary>
            <param name="parameterScaling">The parameter scaling for which scaling methods need to be retrieved</param>
        </member>
        <member name="M:PKSim.Core.Services.IScalingMethodTask.DefaultMethodFor(PKSim.Core.Services.ParameterScaling)">
            <summary>
               Returns the default scaling method defined for the parameter scaling
            </summary>
            <param name="parameterScaling">The parameter scaling for which the default scaling method needs to be retrieved</param>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationBuildingBlockUpdater.UpdateUsedBuildingBlockInSimulationFromTemplate(PKSim.Core.Model.Simulation,PKSim.Core.Model.IPKSimBuildingBlock,OSPSuite.Core.Domain.PKSimBuildingBlockType)">
            <summary>
               Sets a clone of the template building block as "used building block" in the simulation
            </summary>
            <param name="simulation">Simulation that will be uing the template building block</param>
            <param name="templateBuildingBlock">template building block to be used</param>
            <param name="buildingBlockType">Type of building block</param>
            <remarks>
               This Method should only be used for building blocks whose occurence in a simulation is 0 or 1. (e.g Individual,
               Protocol, Compound)
               For other type (e.g. Formulation, Events), this method is not suited
            </remarks>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationBuildingBlockUpdater.UpdateMultipleUsedBuildingBlockInSimulationFromTemplate(PKSim.Core.Model.Simulation,System.Collections.Generic.IEnumerable{PKSim.Core.Model.IPKSimBuildingBlock},OSPSuite.Core.Domain.PKSimBuildingBlockType)">
            <summary>
               Update building block used in the given simulation.
            </summary>
            <param name="simulation">Simulation</param>
            <param name="templateBuildingBlocks">All template building blocks</param>
            <param name="buildingBlockType">Type of building block</param>
            <remarks>
               This method should only be used for building blocks whose occurence in a simulation is 0 ..* (e.g. Formulation,
               Events) for which all building blocks need to be updated at once
            </remarks>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationBuildingBlockUpdater.QuickUpdatePossibleFor(PKSim.Core.Model.IPKSimBuildingBlock,PKSim.Core.Model.UsedBuildingBlock)">
            <summary>
               Returns true if the parameter values from the  simulation building block can simply be updated from the
               templateBuilding block parameters.
               Returns false if a simple parameter value update cannot be performed (i.e. structural change was made)
            </summary>
            <param name="templateBuildingBlock">Template building block as defined in repository</param>
            <param name="usedBuildingBlock">
               Used building block (the one based on the template building block at a given time). It
               it assumed that the object is loaded (e.g. reference to building block can be used
            </param>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationBuildingBlockUpdater.UpdateProtocolsInSimulation(PKSim.Core.Model.Simulation)">
            <summary>
               Update the used <see cref="T:PKSim.Core.Model.Protocol" /> building blocks used in the <paramref name="simulation" /> based
               on the simulation properties
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationBuildingBlockUpdater.UpdateFormulationsInSimulation(PKSim.Core.Model.Simulation)">
            <summary>
               Update the used <see cref="T:PKSim.Core.Model.Formulation" /> building blocks used in the <paramref name="simulation" /> based
               on the simulation properties
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationBuildingBlockUpdater.BuildingBlockSupportComparison(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Returns whether a building block comparison is available for the building block
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationConfigurationTask.CreateFor(PKSim.Core.Model.Simulation,System.Boolean,System.Boolean)">
            <summary>
               Create a build configuration based on the selected building blocks and model properties from the simulation
            </summary>
            <param name="simulation">Simulation used to create a building block configuration</param>
            <param name="shouldValidate">True if validation should be performed otherwise false</param>
            <param name="createAgingDataInSimulation">
               True if aging data should be created in the simulation. False if they should
               stay as is (typically for MoBi Export)
            </param>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationConfigurationValidator.ValidateConfigurationFor(PKSim.Core.Model.Simulation)">
            <summary>
               Validate the configuration defined in the simulation.
            </summary>
            <param name="simulation">Simulation to validate</param>
            <exception cref="T:PKSim.Core.Services.InvalidSimulationConfigurationException">is thrown if the configuration is not valid</exception>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationModelCreator.CreateModelFor(PKSim.Core.Model.Simulation,System.Boolean,System.Boolean)">
            <summary>
               Creates and sets the model based on the simulation configuration defined in the simulation
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationParametersToBuildingBlockUpdater.UpdateParametersFromSimulationInBuildingBlock(PKSim.Core.Model.Simulation,PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Updates the parameter values into the building block template from the one defined in the simulation
            </summary>
            <param name="simulation">Simulation whose parameter will be used as source</param>
            <param name="templateBuildingBlock">Template building block that will be updated</param>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationParametersUpdater.ReconciliateSimulationParametersBetween(PKSim.Core.Model.Simulation,PKSim.Core.Model.Simulation,OSPSuite.Core.Domain.PKSimBuildingBlockType)">
            <summary>
               Updates all simulation parameter values from the source simulation in the target simulation. Returns a <see cref="T:OSPSuite.Core.Domain.ValidationResult"/> containing
            one message for each parameter that was changed in the <paramref name="sourceSimulation "/> and that does not exist in the <paramref name="targetSimulation"/> anymore.
            </summary>
            <param name="sourceSimulation">Simulation with the original values</param>
            <param name="targetSimulation">Simulation that will be updated</param>
            <param name="buildingBlockType">Type of parameters to be synchronized between simulations. By default, only simulation parameters will be updated</param>
        </member>
        <member name="M:PKSim.Core.Services.SimulationPersistableUpdater.applicationObserverShouldBeHidden(OSPSuite.Core.Domain.Observer)">
            <summary>
               Return true if an application observer should be hidden from user
            </summary>
            <param name="observer"></param>
        </member>
        <member name="T:PKSim.Core.Services.ISimulationResultsSynchronizer">
            <summary>
               The service is used to update the data repository of a simulation after the calcultion was performed.
               Columns that already exists would be updated, new columns will be added, and other columns will be removed
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationResultsSynchronizer.Synchronize(PKSim.Core.Model.IndividualSimulation,OSPSuite.Core.Domain.Data.DataRepository)">
            <summary>
               Synchronize the data in the simulation with the newly calculated data
            </summary>
            <param name="simulation">simulation containing the data </param>
            <param name="newResults">new results obtained after the simulation run</param>
        </member>
        <member name="M:PKSim.Core.Services.ISimulationResultsSynchronizer.Synchronize(PKSim.Core.Model.PopulationSimulation,OSPSuite.Core.Domain.Data.SimulationResults)">
            <summary>
               Synchronise the data in the population simulation as well as all underlying results saved in the charts
            </summary>
            <param name="populationSimulation">population Simulation</param>
            <param name="newResults">new results of simulation</param>
        </member>
        <member name="F:PKSim.Core.Services.JacobianUse.AsIs">
            <summary>
               Do not change anything and respect the settings in simulation
            </summary>
        </member>
        <member name="F:PKSim.Core.Services.JacobianUse.TurnOff">
            <summary>
               Turn off jacobian calculation performed by SimModel and let the solver deals with it irrespectively from simulation
               settings
            </summary>
        </member>
        <member name="F:PKSim.Core.Services.JacobianUse.TurnOn">
            <summary>
               Turn on jacobian calculation performed by SimModel irrespectively from simulation settings
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.SimulationRunOptions.RunForAllOutputs">
            <summary>
               Set to <c>true</c>, the <see cref="T:OSPSuite.Core.Domain.OutputSelections" /> will be effectively ignored and all default quantities will
               be
               exported. Default is <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.SimulationRunOptions.RaiseEvents">
            <summary>
               Set to <c>true</c> application events will be raised indicating that the simulation run is executed.
               Typically set to <c>false</c> in CLI mode
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.SimulationRunOptions.Validate">
            <summary>
               Set to <c>true</c> (default) to validate the simulation before running it. Typically set to <c>false</c> when
               running batch calculations
            </summary>
        </member>
        <member name="P:PKSim.Core.Services.SimulationRunOptions.JacobianUse">
            <summary>
               Specifies how the Jacobian calculation should be performed
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.ITransportContainerUpdater.SetDefaultSettingsForTransporter(PKSim.Core.Model.ISimulationSubject,PKSim.Core.Model.IndividualTransporter,System.String)">
            <summary>
               Update the default transporter settings using the template defined in the database based on the
               <paramref name="transporterName" />/>
            </summary>
        </member>
        <member name="T:PKSim.Core.Services.UncompetitiveInhibitionKineticUpdaterSpecification">
            <summary>
               Represents the updater for uncompetitive inhibition processes only
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IVSSCalculator.VSSPhysChemFor(PKSim.Core.Model.Simulation,System.String)">
            <summary>
               Returns the VSS Phys-Chem for the compound named <paramref name="compoundName" /> in the
               <paramref name="simulation" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IVSSCalculator.VSSPhysChemFor(PKSim.Core.Model.Simulation)">
            <summary>
               Returns a cache [CompoundName, VSS Phys-Chem] with all VSS Phys-Chem values for all compound defined in the
               <paramref name="simulation" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IVSSCalculator.VSSPhysChemFor(PKSim.Core.Model.Compound)">
            <summary>
               Returns a cache [species, VSS Phys-Chem] with all possible vss values using the default individual for each species
            </summary>
        </member>
        <member name="M:PKSim.Core.Services.IVSSCalculator.VSSParameterWithValue(System.Double)">
            <summary>
               Returns a vss parameter with the given <paramref name="value"/>
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.DiseaseState.Name">
            <summary>
               Name of disease state associated with OriginData
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.DiseaseState.Parameters">
            <summary>
               List of disease state parameters associated with the selected disease state
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.IClassificationSnapshotTask.UpdateProjectClassifications``2(PKSim.Core.Snapshots.Classification[],PKSim.Core.Snapshots.Mappers.SnapshotContext,System.Collections.Generic.IReadOnlyCollection{``1})">
            <summary>
               Maps the <paramref name="snapshots" /> into classifications and adds them to the project defined in <paramref name="snapshotContext" />.
               Also added to the project will be classifiables contained in the classifications and those will have the subjects
               configured correctly from the list of <paramref name="subjects" />.
            </summary>
            <typeparam name="TClassifiable">
               This is the type of classifiable that is created for each classifiable in each newly
               created classification />
            </typeparam>
            <typeparam name="TSubject">This is the type of the subject for the classifiable</typeparam>
        </member>
        <member name="P:PKSim.Core.Snapshots.Mappers.SnapshotContext.IsV9FormatOrEarlier">
            <summary>
            Returns true if the format is V9 or earlier
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.Mappers.SnapshotContext.IsV10FormatOrEarlier">
            <summary>
            Returns true if the format is V10 or earlier
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.Mappers.SnapshotContext.IsV11FormatOrEarlier">
            <summary>
            Returns true if the format is V11 or earlier
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.ISnapshotMapper.MapToSnapshot(System.Object)">
            <summary>
               Given a <paramref name="model" /> object, returns the corresponding snapshot.
            </summary>
            <exception cref="T:PKSim.Core.Snapshots.SnapshotNotFoundException">
               is thrown if a snapshot could not be found for the given
               <paramref name="model" />
            </exception>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.ISnapshotMapper.MapToModel(System.Object,PKSim.Core.Snapshots.Mappers.SnapshotContext)">
            <summary>
               Given a <paramref name="snapshot" /> object, returns the corresponding model.
            </summary>
            <param name="snapshot">Snapshot object convert to model</param>
            <param name="snapshotContext">Snapshot context</param>
            <exception cref="T:PKSim.Core.Snapshots.SnapshotNotFoundException">
               is thrown if a snapshot could not be found for the given
               <paramref name="snapshot" />
            </exception>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.ISnapshotMapper.SnapshotTypeFor``1">
            <summary>
               Returns the snapshot type for the model type <typeparamref name="T" />
            </summary>
            <typeparam name="T">Model type for which the snapshot type should be found</typeparam>
            <exception cref="T:PKSim.Core.Snapshots.SnapshotNotFoundException">
               is thrown if a snapshot could not be found for the given
               model type <typeparamref name="T" />
            </exception>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.ISnapshotMapper.MapperFor(System.Object)">
            <summary>
               Returns the mapper associated with a given <paramref name="modelOrSnapshotType" />
               <exception cref="T:PKSim.Core.Snapshots.SnapshotNotFoundException">Is thrown if no mapper could be found for the given type</exception>
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.ISnapshotMapper.MapperFor(System.Type)">
            <summary>
               Returns the mapper associated with a given <paramref name="modelOrSnapshotType" />
               <exception cref="T:PKSim.Core.Snapshots.SnapshotNotFoundException">Is thrown if no mapper could be found for the given type</exception>
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.ISnapshotMapperWithContext`3.MapToModel(`1,`2)">
            <summary>
               Given a <paramref name="snapshot" /> object, returns the corresponding model using the <paramref name="snapshotContext" />
               as context
            </summary>
            <exception cref="T:PKSim.Core.Snapshots.SnapshotNotFoundException">
               is thrown if a snapshot could not be found for the given
               <paramref name="snapshot" />
            </exception>
        </member>
        <member name="T:PKSim.Core.Snapshots.Mappers.SnapshotMapperBaseExtensions">
            <summary>
               Extensions instead of method in base class to simplify testing
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.SnapshotMapperBaseExtensions.MapToModels``3(PKSim.Core.Snapshots.Mappers.SnapshotMapperBase{``0,``1,``2},System.Collections.Generic.IEnumerable{``1},``2)">
            <summary>
               Maps a list of snapshot to the corresponding model arrays. If the list if null or empty, null will be returned
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.SnapshotMapperBaseExtensions.MapToModels``3(PKSim.Core.Snapshots.Mappers.SnapshotMapperBase{``0,``1,``2},System.Collections.Generic.IEnumerable{``1},System.Func{``1,System.Threading.Tasks.Task{``0}})">
            <summary>
               Maps a list of snapshot to the corresponding model arrays. If the list if null or empty, null will be returned
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.SnapshotMapperBaseExtensions.MapToModels``3(PKSim.Core.Snapshots.Mappers.ObjectBaseSnapshotMapperBase{``0,``1,``2},System.Collections.Generic.IEnumerable{``1},``2)">
            <summary>
               Maps a list of snapshot to the corresponding model arrays. If the list if null or empty, null will be returned
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.SnapshotMapperBaseExtensions.MapToModels``3(PKSim.Core.Snapshots.Mappers.ParameterContainerSnapshotMapperBase{``0,``1,``2},System.Collections.Generic.IEnumerable{``1},``2)">
            <summary>
               Maps a list of snapshot to the corresponding model arrays. If the list if null or empty, null will be returned
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.SnapshotMapperBaseExtensions.MapToSnapshots``3(PKSim.Core.Snapshots.Mappers.SnapshotMapperBase{``0,``1,``2},System.Collections.Generic.IEnumerable{``0})">
            <summary>
               Maps a list of models to the corresponding snapshot arrays. If the list if null or empty, null will be returned
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.SnapshotMapperBaseExtensions.MapToSnapshots``4(PKSim.Core.Snapshots.Mappers.SnapshotMapperBase{``0,``1,``2,``3},System.Collections.Generic.IEnumerable{``0},``3)">
            <summary>
               Maps a list of models to the corresponding snapshot arrays. If the list if null or empty, null will be returned
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.SnapshotMapperBaseExtensions.MapToSnapshots``4(PKSim.Core.Snapshots.Mappers.ObjectBaseSnapshotMapperBase{``0,``1,``2,``3},System.Collections.Generic.IEnumerable{``0},``3)">
            <summary>
               Maps a list of models to the corresponding snapshot arrays. If the list if null or empty, null will be returned
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Mappers.SnapshotMapperBaseExtensions.MapToSnapshots``4(PKSim.Core.Snapshots.Mappers.ParameterContainerSnapshotMapperBase{``0,``1,``3,``2},System.Collections.Generic.IEnumerable{``0},``2)">
            <summary>
               Maps a list of models to the corresponding snapshot arrays. If the list if null or empty, null will be returned
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.OriginData.Species">
            <summary>
               Id of species (as defined in the database)
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.OriginData.Population">
            <summary>
               Id of population (as defined in the database)
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.OriginData.Gender">
            <summary>
               Id of gender (as defined in the database)
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.OriginData.Age">
            <summary>
               Age of individual to create. This is a mandatory input for age dependent species
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.OriginData.GestationalAge">
            <summary>
               Gestational age of individual to create in [weeks]. This is a mandatory input for age dependent species
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.OriginData.Weight">
            <summary>
               Weight of individual to create.
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.OriginData.Height">
            <summary>
               Height of individual to create in.
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.Parameter.Value">
            <summary>
            Value of parameter in <see cref="P:PKSim.Core.Snapshots.Parameter.Unit"/>
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.Parameter.Unit">
            <summary>
            Unit of parameter. If unit is not defined, it is assume that the <see cref="P:PKSim.Core.Snapshots.Parameter.Value"/> is in default unit for the dimensions
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.ParameterIdentificationAnalysis.Chart">
            <summary>
            Set only of chart based analysis. Null otherwise
            </summary>
        </member>
        <member name="P:PKSim.Core.Snapshots.ParameterIdentificationAnalysis.DataRepositories">
            <summary>
            Local data repositories required for some specific chart types
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Services.ISnapshotTask.ExportModelToSnapshotAsync``1(``0)">
            <summary>
               Exports the given <paramref name="modelToExport" /> to snapshot. User will be ask to specify the file where the
               snapshot will be exported
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Services.ISnapshotTask.ExportModelToSnapshotAsync``1(``0,System.String)">
            <summary>
               Exports the given <paramref name="modelToExport" /> to snapshot file <paramref name="fileFullPath" />
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Services.ISnapshotTask.ExportSnapshotAsync(OSPSuite.Core.Domain.IWithName)">
            <summary>
               Exports the given <paramref name="snapshotObject" /> to file. <paramref name="snapshotObject" /> is already a
               snapshot object and won't be mapped to snapshot
            </summary>
        </member>
        <member name="M:PKSim.Core.Snapshots.Services.ISnapshotTask.IsVersionCompatibleWithSnapshotExport``1(``0)">
            <summary>
               Returns <c>true</c> if <paramref name="objectToExport" /> was created with a version of PK-Sim fully supporting
               snapshot (7.3 and higher) otherwise <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Core.SpeciesDatabaseMap.Species">
            <summary>
               Name of the species for which the database path is specified
            </summary>
        </member>
        <member name="P:PKSim.Core.SpeciesDatabaseMap.DatabaseFullPath">
            <summary>
               Path of the protein expression database for the given species
            </summary>
        </member>
    </members>
</doc>
