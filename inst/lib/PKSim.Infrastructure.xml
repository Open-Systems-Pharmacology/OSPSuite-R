<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PKSim.Infrastructure</name>
    </assembly>
    <members>
        <member name="P:PKSim.Infrastructure.ORM.Core.UpdatableLinkDbConfiguration.FrontEndDatabase">
            <summary>
            Full path to front end protein expressions database.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.Core.UpdatableLinkDbConfiguration.BackEndDatabase">
            <summary>
            Full path to back end protein expressions database.
            </summary>
        </member>
        <member name="T:PKSim.Infrastructure.ORM.DAS.DAS">
            <summary>
               This class is the main class of the DAS-Layer. It supports helpfull properties and methods to connect and access
               databases.
            </summary>
            <remarks>It uses Ole DB data providers for accessing oracle or microsoft access databases.</remarks>
        </member>
        <member name="T:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes">
            <summary>
               This enumeration classifies the parameters you can define on the database to support parameterized statements.
            </summary>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes.PARM_IN">
            <summary>
               This should be used for input parameters only.
            </summary>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes.PARM_OUT">
            <summary>
               This should be used for output parameters only.
            </summary>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes.PARM_INOUT">
            <summary>
               This should be used for parameters that are both input and output.
            </summary>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes.PARM_RETURN">
            <summary>
               This should be used for parameters that are used as return value of stored procedures.
            </summary>
        </member>
        <member name="T:PKSim.Infrastructure.ORM.DAS.DAS.ServerTypes">
            <summary>
               This enumeration classified the datatype of a parameter you can define on the database to support parameterized
               statements.
            </summary>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DAS.ServerTypes.NUMBER">
            <summary>
               This means the parameter is used to hold numeric values.
            </summary>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DAS.ServerTypes.STRING">
            <summary>
               This means the parameter is used to hold textual values.
            </summary>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DAS.ServerTypes.DATE">
            <summary>
               This means the parameter is used to hold date values.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.Connect(System.String,System.String)">
            <summary>
               This function creates a database connection using the given parameters.
            </summary>
            <param name="dataProvider">Name of the data provider which should be used for the connection.</param>
            <param name="connectionString">A valid connection string for the specified data provider.</param>
            <returns><c>True</c>, if connection could be established.</returns>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.AlreadyConnectedException">Thrown when there is already an established connection.</exception>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.UnknownDataProvider">Thrown when the specified DataProvider is unknown.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.Connect(System.String,System.String,System.String,System.String,PKSim.Infrastructure.ORM.DAS.DataProviders)">
            <summary>
               This function creates a database connection using the given parameters.
            </summary>
            <param name="dbName">
               Name of the database to connect to.
            </param>
            <param name="workgroupDb">Filename of the workgroup database.</param>
            <param name="user">Name of the database user used for the connection.</param>
            <param name="password">Password of the database user used for the connection.</param>
            <param name="dataProvider">
               Provider for connection.
            </param>
            <returns><c>True</c>, if connection could be established.</returns>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.AlreadyConnectedException">Thrown when there is already an established connection.</exception>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.UnknownDataProvider">Thrown when the specified DataProvider is unknown.</exception>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DAS.IsTransactionOpen">
            <summary>
               This property gives the information whether there is an opened transaction.
            </summary>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DAS.IsConnected">
            <summary>
               This property gives the information whether you are connected to a database.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DAS.DatabaseName">
            <summary>
               This property gives the name of the database you are connected to.
            </summary>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.ExecuteSQL(System.String)">
            <summary>
               This function can be used to execute a given SQL in the connected database.
            </summary>
            <param name="sql">SQL-statement to be executed. Can be a DML or a DDL statement.</param>
            <returns>The number of affected rows.</returns>
            <remarks>
               A DDL (Data Definition Language) statement makes an implicit commit.
               Therefor if an transaction is opened this transaction is also commited.
            </remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DAS.KeyDelimiter">
            <summary>
               This property gives the character used to build the DBKey.
               The DBKey is a <see cref="T:System.String"></see> representation of the primary key column values.
            </summary>
            <remarks>You can use this to build DBKey value by yourself.</remarks>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.CreateDASDataTable(System.String)">
            <summary>
               This sub creates a given <see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataTable"></see> object with the schema information found for the given
               table.
            </summary>
            <param name="tableName">Name of the database table which schema should be used.</param>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.CreateDASDataTable(System.String,System.String)">
            <summary>
               This sub creates a given <see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataTable"></see> object with the schema information found for the given
               table.
            </summary>
            <param name="columnList">String with a comma separated list of all columns.</param>
            <param name="tableName">Name of the database table which schema should be used.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <remarks>
               <para>
                  You can use the column list to select the needed columns. You can also rename the database column by using
                  aliases in the list.
               </para>
               <para>
                  To use aliases just name them like in normal sql. For example
                  <quote>column1 as mycolumn1, column2 as mycolumn2</quote>.
               </para>
            </remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.CreateAndFillDataTable(System.String)">
            <summary>
               This sub returns <see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataTable"></see> object with the resulting rows of the given SQL Query.
            </summary>
            <param name="sql">SQL-Statement to query data. Must be a SELECT-Statement.</param>
            <remarks>
               You can use parameters in the SQL-Statement to increase performance and making the SQL-statement reusable.
               <seealso cref="M:PKSim.Infrastructure.ORM.DAS.DAS.AddParameter(System.String,System.Object,PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes)"></seealso>
               <seealso
                  cref="M:PKSim.Infrastructure.ORM.DAS.DAS.AddParameter(System.String,System.Object,PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes,PKSim.Infrastructure.ORM.DAS.DAS.ServerTypes)">
               </seealso>
               Don't forget to remove the parameter later on with <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.RemoveParameter(System.String)"></see>, because a parameter
               name is unique within the whole session and trying to create some with an used name will cause an error.
            </remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.FillDataTable(PKSim.Infrastructure.ORM.DAS.DASDataTable,System.String)">
            <summary>
               This sub fills a given <see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataTable"></see> object with the resulting rows of the given SQL Query.
            </summary>
            <param name="dataTable"><see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataTable"></see> object to be filled.</param>
            <param name="sql">SQL-Statement to query data. Must be a SELECT-Statement.</param>
            <remarks>
               You can use parameters in the SQL-Statement to increase performance and making the SQL-statement reusable.
               <seealso cref="M:PKSim.Infrastructure.ORM.DAS.DAS.AddParameter(System.String,System.Object,PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes)"></seealso>
               <seealso
                  cref="M:PKSim.Infrastructure.ORM.DAS.DAS.AddParameter(System.String,System.Object,PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes,PKSim.Infrastructure.ORM.DAS.DAS.ServerTypes)">
               </seealso>
               Don't forget to remove the parameter later on with <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.RemoveParameter(System.String)"></see>, because a parameter
               name is unique within the whole session and trying to create some with an used name will cause an error.
            </remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.GetAutoValue(System.String)">
            <summary>
               This function queries the next value of the given AutoValueCreator object.
            </summary>
            <param name="autoValueCreator">Name of the database table and column separated by a ".".</param>
            <returns>Generated AutoValue</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.AddParameter(System.String,System.Object,PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes,PKSim.Infrastructure.ORM.DAS.DAS.ServerTypes)">
            <summary>
               This sub creates a new parameter.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="paramValue">Value for the parameter.</param>
            <param name="paramType">Type of the parameter.</param>
            <param name="serverType">ServerType of the parameter.</param>
            <remarks>
               <para>
                  Each parameter has an identifying name and an associated value.
                  You can automatically bind a parameter to SQL and PL/SQL statements of other objects,
                  by using the parameter’s name as a placeholder (@Name) in the SQL statement.
                  Such use of parameters can simplify dynamic queries and increase program performance.
               </para>
               <para>
                  Although each parameter has a name the mapping to the sql statement is done by position.
                  That means if you have several parameters in your sql statement the sequence of all distinct
                  parameters must match the sequence of your parameters.
               </para>
               <para>
                  For example:
                  SELECT * FROM TABLE WHERE COLUMN1 = @P1 AND COLUMN2 = @P2
               </para>
               <para>
                  Now your parameters must be added in the sequence @P1 and then @P2.
                  If you would add them as @P2 and then @P1 the value of @P2 would be matched to @P1!
               </para>
               <para>
                  If you set an incorrect <paramref name=" paramType "></paramref>, such as
                  <see cref="F:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes.PARM_INOUT"></see>
                  for a stored procedure parameter type IN, this can result in errors.
                  In other words <see cref="F:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes.PARM_INOUT"></see> means "for IN OUT parameters only".
                  It does not mean that you should use the parameter against one stored procedure that has an IN parameter
                  and then use it in another that has an OUT parameter.
                  In such a case you should use two parameters.
                  Errors caused in this way are rare, but in the case of parameter-related errors, you should verify
                  that the <paramref name=" paramType "></paramref> is correct.
               </para>
               <para>
                  Don't forget to remove the parameter later on with <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.RemoveParameter(System.String)"></see>, because a parameter
                  name is unique within the whole session and trying to create some with an used name will cause an error.
               </para>
               <example>
                  This example shows how to use parameters:
                  <code lang="C#">
            private DASAccess.DASDataTable Query(DAS das, string param1, long param2)
            {
              var dt = das.CreateDASDataTable("Table");
              const string PARAM1 = "@Param1";
              const string PARAM2 = "@Param2";
            
              string sql = String.Format(String.Concat(dt.BaseSQL, " WHERE t.COL1 = {0} AND t.COL2 = {1}", PARAM1, PARAM2));
            
              try 
              {
                das.AddParameter(PARAM1, param1, DAS.ParameterModes.PARM_IN, DAS.ServerTypes.STRING);
                das.AddParameter(PARAM2, param2, DAS.ParameterModes.PARM_IN, DAS.ServerTypes.NUMBER);
            
                das.FillDataTable(ref dt, sql);
              }
              finally 
              {
                das.RemoveParameter(PARAM1);
                das.RemoveParameter(PARAM2);
              }
            
              return dt;
            }
            </code>
               </example>
            </remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.AddParameter(System.String,System.Object,PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes)">
            <summary>
               This sub creates a new parameter.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="paramValue">Value for the parameter.</param>
            <param name="paramType">Type of the parameter.</param>
            <remarks>
               <para>
                  Each parameter has an identifying name and an associated value.
                  You can automatically bind a parameter to SQL and PL/SQL statements of other objects,
                  by using the parameter’s name as a placeholder (@Name) in the SQL statement.
                  Such use of parameters can simplify dynamic queries and increase program performance.
               </para>
               <para>
                  Although each parameter has a name the mapping to the sql statement is done by position.
                  That means if you have several parameters in your sql statement the sequence of all distinct
                  parameters must match the sequence of your parameters.
               </para>
               <para>
                  For example:
                  SELECT * FROM TABLE WHERE COLUMN1 = @P1 AND COLUMN2 = @P2
               </para>
               <para>
                  Now your parameters must be added in the sequence @P1 and then @P2.
                  If you would add them as @P2 and then @P1 the value of @P2 would be matched to @P1!
               </para>
               <para>
                  If you set an incorrect <paramref name=" paramType "></paramref>, such as
                  <see cref="F:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes.PARM_INOUT"></see>
                  for a stored procedure parameter type IN, this can result in errors.
                  In other words <see cref="F:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes.PARM_INOUT"></see> means "for IN OUT parameters only".
                  It does not mean that you should use the parameter against one stored procedure that has an IN parameter
                  and then use it in another that has an OUT parameter.
                  In such a case you should use two parameters.
               </para>
               <para>
                  Errors caused in this way are rare, but in the case of parameter-related errors, you should verify
                  that the <paramref name=" paramType "></paramref> is correct.
               </para>
               <para>
                  Don't forget to remove the parameter later on with <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.RemoveParameter(System.String)"></see>, because a parameter
                  name is unique within the whole session and trying to create some with an used name will cause an error.
               </para>
               <example>
                  This example shows how to use parameters:
                  <code lang="C#">
            private DASAccess.DASDataTable Query(DAS das, string param1, long param2)
            {
              var dt = das.CreateDASDataTable("Table");
              const string PARAM1 = "@Param1";
              const string PARAM2 = "@Param2";
            
              string sql = String.Format(String.Concat(dt.BaseSQL, " WHERE t.COL1 = {0} AND t.COL2 = {1}", PARAM1, PARAM2));
            
              try 
              {
                das.AddParameter(PARAM1, param1, DAS.ParameterModes.PARM_IN, DAS.ServerTypes.STRING);
                das.AddParameter(PARAM2, param2, DAS.ParameterModes.PARM_IN, DAS.ServerTypes.NUMBER);
            
                das.FillDataTable(ref dt, sql);
              }
              finally 
              {
                das.RemoveParameter(PARAM1);
                das.RemoveParameter(PARAM2);
              }
            
              return dt;
            }
            </code>
               </example>
            </remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.GetParameterValue(System.String)">
            <summary>
               This function gives the value of a parameter.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <returns>Value of the parameter.</returns>
            <remarks>
               Each parameter has an identifying name and an associated value.
               You can automatically bind a parameter to SQL and PL/SQL statements of other objects,
               by using the parameter’s name as a placeholder (:Name) in the SQL or PL/SQL statement.
               Such use of parameters can simplify dynamic queries and increase program performance.
               If you set an incorrect <see cref="T:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes"></see>, such as <see cref="F:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes.PARM_INOUT"></see>
               for a stored procedure parameter type IN, this can result in errors.
               In other words <see cref="F:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes.PARM_INOUT"></see> means "for IN OUT parameters only".
               It does not mean that you should use the parameter against one stored procedure that has an IN parameter
               and then use it in another that has an OUT parameter.
               In such a case you should use two parameters.
               Errors caused in this way are rare, but in the case of parameter-related errors, you should verify
               that the <see cref="T:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes"></see> is correct.
            </remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.RemoveParameter(System.String)">
            <summary>
               This sub removes a parameter.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <seealso cref="M:PKSim.Infrastructure.ORM.DAS.DAS.AddParameter(System.String,System.Object,PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes)"></seealso>
            <seealso
               cref="M:PKSim.Infrastructure.ORM.DAS.DAS.AddParameter(System.String,System.Object,PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes,PKSim.Infrastructure.ORM.DAS.DAS.ServerTypes)">
            </seealso>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.DisConnect">
            <summary>
               This sub disconnects from the connected database.
            </summary>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.BeginTrans">
            <summary>
               This sub starts a transaction in the connected database.
            </summary>
            <remarks>
               After this method has been called, no database transactions are committed until a <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.CommitTrans"></see>
               is issued.
               Alternatively, the session can be rolled back using <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.Rollback"></see>.
               If a transaction has already been started, repeated use of <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.BeginTrans"></see> causes an error.
               If <see cref="M:PKSim.Infrastructure.ORM.DAS.DASDataRow.UpdateInDB"></see> or <see cref="M:PKSim.Infrastructure.ORM.DAS.DASDataRow.DeleteFromDB"></see> methods fail on a given
               row in a
               global transaction after you issued a BeginTrans, be aware that locks will remain on those previously locked rows.
               These locks will persist until you call <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.CommitTrans"></see> or <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.Rollback"></see>.
            </remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.AlreadyOpenTransactionException">Thrown when there is already an opened transaction.</exception>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.CommitTrans">
            <summary>
               This sub commits the actual transaction.
            </summary>
            <remarks>
               <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.CommitTrans"></see> commits all transactions present within the session.
               The transaction is closed afterwards and all locks are unlocked.
               <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.CommitTrans"></see> is valid only when a transaction has been started.
               If a transaction has not been started, use of <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.CommitTrans"></see> causes an error.
            </remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NoOpenTransactionException">Thrown when there is no opened transaction.</exception>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DAS.Rollback">
            <summary>
               This sub rollbacks the actual transaction.
            </summary>
            <remarks>
               <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.Rollback"></see> rolls back all pending transactions within the specified session.
               The transaction is closed afterwards and all locks are unlocked.
               <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.Rollback"></see> is valid only when a transaction has been started.
               If a transaction has not been started, use of <see cref="M:PKSim.Infrastructure.ORM.DAS.DAS.Rollback"></see> results in an error.
            </remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NoOpenTransactionException">Thrown when there is no opened transaction.</exception>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotConnectedException">Thrown when there is no established connection.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASColumnValue.#ctor(PKSim.Infrastructure.ORM.DAS.DASDataRow,PKSim.Infrastructure.ORM.DAS.DASDataColumn)">
            <summary>
            This is the constructor of the class.
            </summary>
            <param name="Row"><see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataRow"></see> object needed for initialization.</param>
            <param name="Column"><see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataColumn"></see> object needed for initialization.</param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASColumnValue.InitByValue(System.Object)">
            <summary>
            This sub initialized the column value.
            </summary>
            <param name="value">Value needed for initialization.</param>
            <remarks>
            For compatibility reasons.
            Sets current value of the column. Only usable when row has <see cref="P:System.Data.DataRow.RowState"></see> =  <see cref="F:System.Data.DataRowState.Added"></see>.
            </remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.InvalidRowStateException">Thrown when <see cref="P:System.Data.DataRow.RowState"></see> is not <see cref="F:System.Data.DataRowState.Added"></see>.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASColumnValue.InitAsNull">
            <summary>
            This sub initialized the column with null value.
            </summary>
            <remarks>
            For compatibility reasons.
            Sets current value of the column. Only usable when row has <see cref="P:System.Data.DataRow.RowState"></see> = <see cref="F:System.Data.DataRowState.Added"></see>.</remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.InvalidRowStateException">Thrown when <see cref="P:System.Data.DataRow.RowState"></see> is not <see cref="F:System.Data.DataRowState.Added"></see>.</exception>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASColumnValue.DBValue">
            <summary>
            This property gives the value of column with <see cref="T:System.Data.DataRowVersion"></see> = <see cref="F:System.Data.DataRowVersion.Original"></see>.
            </summary>
            <returns>Value of column with <see cref="T:System.Data.DataRowVersion"></see> = <see cref="F:System.Data.DataRowVersion.Original"></see>.</returns>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASColumnValue.Value">
            <summary>
            This property gives the value of the column.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASColumnValue.Changed">
            <summary>
            This property informs about whether the column has been changed.
            </summary>
            <returns><c>True</c>, if column value has been changed.</returns>
            <remarks>If the row has <see cref="P:System.Data.DataRow.RowState"></see> = <see cref="F:System.Data.DataRowState.Added"></see> the property always returns <c>False</c>.</remarks>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASColumnValue.DBNullValue">
            <summary>
            This property informs whether the value of column with <see cref="T:System.Data.DataRowVersion"></see> = <see cref="F:System.Data.DataRowVersion.Original"></see> is null.
            </summary>
            <returns><c>True</c>, if value of column with <see cref="T:System.Data.DataRowVersion"></see> = <see cref="F:System.Data.DataRowVersion.Original"></see> is null.</returns>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASColumnValue.NullValue">
            <summary>
            This property gets and sets the Value to null.
            </summary>
            <returns><c>True</c>, if column value is null.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASColumnValue.GetDBValueAsString">
            <summary>
            This function gets the value of column with <see cref="T:System.Data.DataRowVersion"></see> = <see cref="F:System.Data.DataRowVersion.Original"></see> in a string representation.
            </summary>
            <returns>Value of column with <see cref="T:System.Data.DataRowVersion"></see> = <see cref="F:System.Data.DataRowVersion.Original"></see> in a string representation.</returns>
            <remarks>The value is not formatted with a predefined format pattern. To get the formatted value use the overload method.</remarks>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASColumnValue.GetDBValueAsString(System.String)">
            <summary>
            This function gets the value of column with <see cref="T:System.Data.DataRowVersion"></see> = <see cref="F:System.Data.DataRowVersion.Original"></see> in a formatted string representation.
            </summary>
            <param name="format">A valid format for function <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"></see>.</param>
            <returns>value of column with <see cref="T:System.Data.DataRowVersion"></see> = <see cref="F:System.Data.DataRowVersion.Original"></see> in a formatted string representation.</returns>
            <remarks>Usefull for columns with <see cref="P:PKSim.Infrastructure.ORM.DAS.DASDataColumn.DASDataType"></see> = <see cref="F:PKSim.Infrastructure.ORM.DAS.DASDataColumn.DASDataTypes.DASDATE"></see>.
            <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"></seealso></remarks>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASColumnValue.GetValueAsString">
            <summary>
            This function gets the value of the column in a string representation.
            </summary>
            <returns>Column value in a string representation.</returns>
            <remarks>The value is not formatted with a predefined format pattern. To get the formatted value use the overload method.</remarks>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASColumnValue.GetValueAsString(System.String)">
            <summary>
            This function gets the value of the column in a formatted string representation.
            </summary>
            <param name="format">A valid format for function <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"></see>.</param>
            <returns>Column value in a formatted string representation.</returns>
            <remarks>Usefull for columns with <see cref="P:PKSim.Infrastructure.ORM.DAS.DASDataColumn.DASDataType"></see> = <see cref="F:PKSim.Infrastructure.ORM.DAS.DASDataColumn.DASDataTypes.DASDATE"></see>.
            <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"></seealso></remarks>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASColumnValue.SetValueAsString(System.String)">
            <summary>
            This sub sets the column value by the given string value.
            </summary>
            <param name="value">Value to be set.</param>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.UnsupportedDataTypeException">Thrown when an unsupported data type occurs.</exception>
        </member>
        <member name="T:PKSim.Infrastructure.ORM.DAS.StringCollection">
            <summary>
            This class is a collection for storing a list of string values.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.StringCollection.Add(System.String)">
            <summary>
            This sub adds a string value to the collection.
            </summary>
            <param name="Value">Value to be added.</param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.StringCollection.Count">
            <summary>
            This function returns the count of values.
            </summary>
            <returns>Count of values.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.StringCollection.Remove(System.String)">
            <summary>
            This sub removes a value from the list.
            </summary>
            <param name="Value">Value to be removed.</param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.StringCollection.RemoveAt(System.Int32)">
            <summary>
            This sub removes a value specified by the index from the list.
            </summary>
            <param name="Index">Index of the value to be removed.</param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.StringCollection.ContainsValue(System.String)">
            <summary>
            This function checks whether a given value is part of the list.
            </summary>
            <param name="Value">Value to be checked.</param>
            <returns><c>True</c>, if the list contains the value.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.StringCollection.ItemByIndex(System.Int32)">
            <summary>
            This function returns the value specified by the index.
            </summary>
            <param name="Index">Index of the value.</param>
            <returns>Value</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.StringCollection.GetEnumerator">
            <summary>
            This function is needed to support for-each-loops.
            </summary>
            <returns><see cref="T:System.Collections.IEnumerator"></see> object.</returns>
        </member>
        <member name="T:PKSim.Infrastructure.ORM.DAS.DASDataColumn">
            <summary>
            This class is an enhancement of DataColumn class.
            </summary>
        </member>
        <member name="T:PKSim.Infrastructure.ORM.DAS.DASDataColumn.DASDataTypes">
            <summary>
            This enumeration defines known datatypes.
            </summary>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DASDataColumn.DASDataTypes.DASSTRING">
            <summary>
            This is a datatype for textual values.
            </summary>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DASDataColumn.DASDataTypes.DASLONG">
            <summary>
            This is a datatype for numeric values without digits after decimal sign.
            </summary>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DASDataColumn.DASDataTypes.DASDOUBLE">
            <summary>
            This is a datatype for numeric values with digits after decimal sign.
            </summary>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DASDataColumn.DASDataTypes.DASDATE">
            <summary>
            This is a datatype for date values.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataColumn.Table">
            <summary>
            This property must be overloaded to give a DASDataTable instead of a DataTable.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataColumn.DBColumnName">
            <summary>
            This property gives the column name used in the database.
            </summary>
            <returns>Name of the column in the database.</returns>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataColumn.DASDataType">
            <summary>
            This property gets and sets the DTSDataType of the column.
            </summary>
            <returns>Value of DTSDataTypes</returns>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.UnsupportedDataTypeException">Thrown when an unsupported data type occurs.</exception>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataColumn.IsAutoValue">
            <summary>
            This property is true if the values for this column are created automatically by the database.
            </summary>
            <returns><c>True</c>, if column value is created automatically.</returns>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataColumn.AutoValueCreator">
            <summary>
            Use this property to get and set the auto value creator object information.
            </summary>
            <value>Name of the oracle sequence object or a string representing table name and column name in a form like <c>table.column</c>.</value>
            <returns>The auto value creator object information.</returns>
            <remarks>Only useful for datatype <see cref="F:PKSim.Infrastructure.ORM.DAS.DASDataColumn.DASDataTypes.DASLONG"></see>.
            Sets also property <see cref="P:PKSim.Infrastructure.ORM.DAS.DASDataColumn.IsAutoValue"></see> to <c>True</c>.
            Property <see cref="P:System.Data.DataColumn.DefaultValue"></see> is set to <c>0</c>.</remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.UnsupportedDataTypeForAutoValueCreationException">Thrown when column has an unsupported data type.</exception>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataColumn.Hidden">
            <summary>
            This property is true if this column should not be shown in a control.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataColumn.ListOfValues">
            <summary>
            This properties gives a list of values.
            </summary>
            <remarks>In the database only these values are allowed.</remarks>
        </member>
        <member name="T:PKSim.Infrastructure.ORM.DAS.DASDataColumnCollection">
            <summary>
            This class is an encapsulation of DataColumnCollection class. 
            </summary>
            <remarks>It is no real collection object. It just encapsulates the columns collection of the DataTable.</remarks>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataColumnCollection.#ctor(System.Data.DataColumnCollection)">
            <summary>
            This is the constructor of the class.
            </summary>
            <param name="Columns">Columns collection use in the DataTable object.</param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataColumnCollection.Clear">
            <summary>
            This sub removes all columns from the collection.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataColumnCollection.Add(PKSim.Infrastructure.ORM.DAS.DASDataColumn)">
            <summary>
            This sub adds the given column to the collection.
            </summary>
            <param name="Column"><see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataColumn"></see> object to be added.</param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataColumnCollection.Count">
            <summary>
            This function gives the count of columns.
            </summary>
            <returns>Count of columns.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataColumnCollection.Remove(PKSim.Infrastructure.ORM.DAS.DASDataColumn)">
            <summary>
            This sub removes the given column from the collection.
            </summary>
            <param name="Column"><see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataColumn"></see> object to be removed.</param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataColumnCollection.RemoveAt(System.Int32)">
            <summary>
            This sub removes the column specified by the given index from the collection.
            </summary>
            <param name="Index">Index of <see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataColumn"></see> object to be removed.</param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataColumnCollection.ContainsName(System.String)">
            <summary>
            This function checks whether a column with specified name exists.
            </summary>
            <param name="Name">Name of the column.</param>
            <returns><c>True</c>, if column is part of the columns collection.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataColumnCollection.ContainsColumn(PKSim.Infrastructure.ORM.DAS.DASDataColumn)">
            <summary>
            This function checks whether a column exists.
            </summary>
            <param name="Column"><see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataColumn"></see> to be checked.</param>
            <returns><c>True</c>, if column is part of the columns collection.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataColumnCollection.ItemByName(System.String)">
            <summary>
            This function gives the column by the specified name.
            </summary>
            <param name="Name">Name of the column.</param>
            <returns>DASDataColumn object.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataColumnCollection.ItemByIndex(System.Int32)">
            <summary>
            This function gives the column by the specified index.
            </summary>
            <param name="Index">Index of the column.</param>
            <returns>DASDataColumn object.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataColumnCollection.GetEnumerator">
            <summary>
            This function is needed to support for-each-loops.
            </summary>
            <returns><see cref="T:System.Collections.IEnumerator"></see> object.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRow.#ctor(System.Data.DataRowBuilder)">
            <summary>
            This is the constructor of this class.
            </summary>
            <param name="Builder"><see cref="T:System.Data.DataRowBuilder"></see> object to build new rows.</param>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataRow.Table">
            <summary>
            This property must be overloaded to give a DASDataTable instead of a DataTable.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataRow.SQL">
            <summary>
            This properties gives the used SQL statement.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataRow.Changed">
            <summary>
            This property informs whether the row has been changed.
            </summary>
            <returns><c>True</c>, if any column value has been changed.</returns>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataRow.DBKey">
            <summary>
            This property gives the DBKey of the row.
            </summary>
            <returns>A <see cref="T:System.String"></see> representation of primary key values.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRow.ExistsInDB">
            <summary>
            This function checks whether the row does exists in the database.
            </summary>
            <returns><c>True</c>, if row exists.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRow.Refresh">
            <summary>
            This sub refreshs the data of the data row by selecting actual data from the data base.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRow.SelectFromDB">
            <summary>
            This sub selects the data of a specified point in time from the data base.
            </summary>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.UnsupportedDataTypeException">Thrown when an unsupported data type occurs.</exception>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.RowNotFoundException">Thrown when the row could not be found.</exception>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.TooManyRowsFoundException">Thrown when more then one row has been found.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRow.InsertIntoDB">
            <summary>
            This function inserts the row into the database.
            </summary>
            <returns>Number of rows affected.</returns>
            <remarks>Columns with property <see cref="P:PKSim.Infrastructure.ORM.DAS.DASDataColumn.IsAutoValue"></see> = <c>True</c> 
            must be set to their DASDataColumn.DefaultValue to get the auto value 
            by <see cref="M:PKSim.Infrastructure.ORM.DAS.DASDataRow.InsertIntoDB"></see>.</remarks>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotEditableException">Thrown when the table is not editable.</exception>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.UnsupportedDataTypeException">Thrown when an unsupported data type occurs.</exception>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.InvalidRowStateException">Thrown when <see cref="P:System.Data.DataRow.RowState"></see> is not equal <see cref="F:System.Data.DataRowState.Added"></see>.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRow.UpdateInDB">
            <summary>
            This function updates the row in the database.
            </summary>
            <returns>Number of affected rows.</returns>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotEditableException">Thrown when the table is not editable.</exception>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.UnsupportedDataTypeException">Thrown when an unsupported data type occurs.</exception>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.InvalidRowStateException">Thrown when <see cref="P:System.Data.DataRow.RowState"></see> is not equal <see cref="F:System.Data.DataRowState.Modified"></see>.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRow.DeleteFromDB">
            <summary>
            This function deletes the row in the database.
            </summary>
            <returns>Number of affected rows.</returns>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.NotEditableException">Thrown when the table is not editable.</exception>
            <exception cref="T:PKSim.Infrastructure.ORM.DAS.InvalidRowStateException">Thrown when <see cref="P:System.Data.DataRow.RowState"></see> is not equal <see cref="F:System.Data.DataRowState.Deleted"></see>.</exception>
        </member>
        <member name="T:PKSim.Infrastructure.ORM.DAS.DASDataRowCollection">
            <summary>
            This class is an encapsulation of DataRowCollection class. 
            </summary>
            <remarks>It is no real collection object. It just encapsulates the row collection of the DataTable.</remarks>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRowCollection.#ctor(System.Data.DataRowCollection)">
            <summary>
            This is the constructor of the class.
            </summary>
            <param name="Rows"><see cref="T:System.Data.DataRowCollection"></see> object needed for initialization.</param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRowCollection.Clear">
            <summary>
            This sub removes all rows from the collection.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRowCollection.Add(PKSim.Infrastructure.ORM.DAS.DASDataRow)">
            <summary>
            This sub adds given row to the collection.
            </summary>
            <param name="Row"><see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataRow"></see> object to be added.</param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRowCollection.Count">
            <summary>
            This function returns the count of rows.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRowCollection.Remove(PKSim.Infrastructure.ORM.DAS.DASDataRow)">
            <summary>
            This sub removes the row from the collection.
            </summary>
            <param name="Row"><see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataRow"></see> object to be removed.</param>
            <remarks>It does not delete the row from the database.</remarks>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRowCollection.RemoveAt(System.Int32)">
            <summary>
            This sub removes the row specified by the index from the collection.
            </summary>
            <param name="Index">Index of the row in the collection.</param>
            <remarks>It does not delete the row from the database.</remarks>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRowCollection.ContainsValue(PKSim.Infrastructure.ORM.DAS.DASDataRow)">
            <summary>
            This functions checks whether a given row is part of the collection.
            </summary>
            <param name="Row"><see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataRow"></see> object to be checked.</param>
            <returns><c>True</c>, if collection contains the row.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRowCollection.ItemByIndex(System.Int32)">
            <summary>
            This function gives the row specified by the index.
            </summary>
            <param name="Index">Index of the row in the rows collection.</param>
            <returns><see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataRow"></see> object.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRowCollection.ItemByDBKey(System.String)">
            <summary>
            This function gives the row specified by the DBKey.
            </summary>
            <param name="DBKey"><see cref="T:System.String"></see> representation of primary key values.</param>
            <returns><see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataRow"></see> object.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataRowCollection.GetEnumerator">
            <summary>
            This function is needed to support for-each-loops.
            </summary>
            <returns><see cref="T:System.Collections.IEnumerator"></see> object.</returns>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.ParameterValue.ParameterName">
            <summary>
            This property is the name of the parameter.
            </summary>
            <returns>Name of the parameter.</returns>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.ParameterValue.Value">
            <summary>
            This property is the value of the parameter.
            </summary>
            <returns>Value of the parameter.</returns>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.ParameterValue.ServerType">
            <summary>
            This property is the <see cref="T:PKSim.Infrastructure.ORM.DAS.DAS.ServerTypes"></see> of the parameter.
            </summary>
            <returns>Value of <see cref="T:PKSim.Infrastructure.ORM.DAS.DAS.ServerTypes"></see>.</returns>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.ParameterValue.ParameterMode">
            <summary>
            This property is the mode of the parameter.
            </summary>
            <returns>Value of <see cref="T:PKSim.Infrastructure.ORM.DAS.DAS.ParameterModes"></see>.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataTable.#ctor(PKSim.Infrastructure.ORM.DAS.DAS)">
            <summary>
            This is the constructor of this class.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataTable.Item(System.Int32)">
            <summary>
            This property gives the row of the given index.
            </summary>
            <param name="index">Index of the row.</param>
            <returns><see cref="T:PKSim.Infrastructure.ORM.DAS.DASDataRow"></see> object.</returns>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataTable.Columns">
            <summary>
            This property gives the columns of this table.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataTable.Rows">
            <summary>
            This property gives the rows of this table.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataTable.CreateInstance">
            <summary>
            This Function must be overridden to create a DASDataTable instead of a DataTable.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
            <summary>
            This Function must be overridden to create a DASDataRow instead of a DataRow.
            </summary>
            <param name="builder"><see cref="T:System.Data.DataRowBuilder"></see> object to build new rows.</param>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataTable.DBTableName">
            <summary>
            This property gives the name of table in the database.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataTable.SQL">
            <summary>
            This gives the SQL statement which has been used on retrieving the data from database.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataTable.ParameterValues">
            <summary>
            This property is used internally to store the values of parameters needed for a refresh.
            </summary>
            <remarks>If you are using parameters in your query the 
            corresponding values are stored to support the refresh method.</remarks>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataTable.BaseSQL">
            <summary>
            This is the basic sql to get data of the table.
            </summary>
            <returns>SQL statement.</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataTable.BuildAndSetBaseSQL">
            <summary>
            This sub builds and sets the base sql.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataTable.IsEditable">
            <summary>
            This property gives the information whether the DASDataTable is editable.
            </summary>
            <returns><c>True</c> if table is editable (UPDATE and DELETE). </returns>
            <remarks>A table is editable, if it knows its <see cref="P:PKSim.Infrastructure.ORM.DAS.DASDataTable.DBTableName"></see> and a primary key must be set.</remarks>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.DAS.DASDataTable.DAS">
            <summary>
            This property gives the DAS object.
            </summary>
            <returns>DAS</returns>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataTable.Refresh">
            <summary>
            This sub refreshs the data of the data table by selecting actual data from the data base.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataTable.Merge(PKSim.Infrastructure.ORM.DAS.DASDataTable,System.Boolean,System.Data.MissingSchemaAction)">
            <summary>
            This method overloads the base class method to support DAS specific properties.
            </summary>
            <param name="table">Table to be merged.</param>
            <param name="preserveChanges"><c>True</c> means all changes are preserved.</param>
            <param name="missingSchemaAction"><seealso cref="T:System.Data.MissingSchemaAction"></seealso></param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataTable.Merge(PKSim.Infrastructure.ORM.DAS.DASDataTable,System.Boolean)">
            <summary>
            This method overloads the base class method to support DAS specific properties.
            </summary>
            <param name="table">Table to be merged.</param>
            <param name="preserveChanges"><c>True</c> means all changes are preserved.</param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataTable.Merge(PKSim.Infrastructure.ORM.DAS.DASDataTable)">
            <summary>
            This method overloads the base class method to support DAS specific properties.
            </summary>
            <param name="table">Table to be merged.</param>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASDataTable.GetEnumerator">
            <summary>
            This function is needed to support for each loops.
            </summary>
        </member>
        <member name="T:PKSim.Infrastructure.ORM.DAS.DASHelper.JoinType">
            <summary>
            This enumeration declares the supported join types.
            </summary>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DASHelper.JoinType.Inner">
            <summary>
            The join type <c>Inner</c> means an inner join.
            </summary>
            <remarks>Only those rows where the column values are the same will be in the resulting table.</remarks>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DASHelper.JoinType.LeftOuter">
            <summary>
            The join type <c>LeftOuter</c> means a left outer join.
            </summary>
            <remarks>All rows of the parent table and only those of the child table which column values are the same will be in the resulting table. </remarks>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DASHelper.JoinType.RightOuter">
            <summary>
            The join type <c>RightOuter</c> means a right outer join.
            </summary>
            <remarks>All rows of the child table and only those of the parent table which column values are the same will be in the resulting table.</remarks>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DASHelper.JoinType.FullOuter">
            <summary>
            The join type <c>FullOuter</c> means a full outer join.
            </summary>
            <remarks>All rows of the child table and all rows of the parent table will be in the resulting table.</remarks>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.DAS.DASHelper.CreateDataJoin(System.Data.DataRelation,PKSim.Infrastructure.ORM.DAS.DASHelper.JoinType,System.String)">
            <summary>
            This function creates a new data table which is the result of a join of two data tables of a data set which is given by a data relation.
            </summary>
            <param name="Relation">The data relation object which specifies the relation of two tables in a data set.</param>
            <param name="JoinType">The type of join which is used by combining the two data tables.</param>
            <param name="TableName">The name of the new data table.</param>
            <returns>A data table object with all parent and all child columns.</returns>
            <remarks><para>The function can be used to join tables directly in memory without any database interaction.</para>
            <para>Child columns used for the relation are skipped.</para>
            <para>If a naming conflict occurs the child column will be named in a form <code>TableName.ColumnName</code>.</para></remarks>
        </member>
        <member name="F:PKSim.Infrastructure.ORM.DAS.DataProviders.SQLite">
            <summary>
            This means connecting to an SQLite database using the SQLite data provider.
            </summary>
        </member>
        <member name="T:PKSim.Infrastructure.ORM.FlatObjects.FlatCompoundProcessParameterMapping">
            <summary>
            Mapping of compound process parameters measured in-vitro, in plasma etc.
            Parameters mapped are usually Organ/Compartment volumes, blood flows, etc.
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.FlatObjects.FlatObjectPath.UseAmount">
            <summary>
            For molecules: wether molecule amount or molecule concentration 
            should be used
            </summary>
        </member>
        <member name="T:PKSim.Infrastructure.ORM.FlatObjects.ProcessTagType">
            <summary>
            Source and Target are used for transport source/target container conditions
            Parent is used e.g. for reactions (parent) container conditions
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.Mappers.DataTableToMetaDataMapper`1.checkDataTableStructure(System.Data.DataTable)">
            <summary>
               Check that datatable passed is OK for the property info list:
               - Same named data column is available for every property
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ORM.Mappers.FlatContainerToApplicationMapper.addApplicationProcessesTo(OSPSuite.Core.Domain.Builder.ApplicationBuilder)">
            <summary>
               Add application processes to the application builder
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ORM.Repositories.IFlatCalculationMethodParameterRateRepository.AllCalculationMethodNames">
            <summary>
               Returns the name of all calculation methods that can be exported as <see cref="T:OSPSuite.Core.Domain.Builder.CoreCalculationMethod" />
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ProjectConverter.IObjectConverter.Convert(System.Object,System.Int32)">
            <summary>
            Converts the <paramref name="objectToConvert"/> and returns the version corresponding to the new state of the object as well as a boolean indicating 
            if a conversion actually took place for the <paramref name="objectToConvert"/>
            For example, if the converter converts from 5.0 to 5.1 and the current version is 5.2, it should return 5.2
            
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.ProjectConverter.IObjectConverter.ConvertXml(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Convert the xml This should only be implemented if the xml structure has changed so drastically, that a basic object conversion cannot do the job
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.ProjectConverter.v9.IndividualCovariates.Attributes">
            <summary>
               List of user defined attributes for the individual (e.g. PopulationName, Genotype etc)
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.Reporting.Markdown.MarkdownTracker.Markdown">
            <summary>
               The string builder containing the actual Markdown being generated
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Reporting.Summary.ReportBuilder`1.FillUpReport(`0,PKSim.Core.Reporting.ReportPart)">
            <summary>
               Fill the report. The content of the report is stored in the string builder
            </summary>
            <param name="objectToReport">Object for which the report should be generated</param>
            <param name="reportPart">Report part that will be filled</param>
        </member>
        <member name="T:PKSim.Infrastructure.Reporting.Summary.DelegateReportBuilder`1">
            <summary>
               Represents a report builder whose only task is to return the report parts of another object
               i.e. delegate to another report builder
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Reporting.TeX.Builders.AnalysisChartTEXBuilder`4.updateLegendPlots(OSPSuite.TeXReporting.Items.GroupPlot,System.String[])">
            <summary>
               This method is needed for grouped plot to get a legend with all lengend entries once for the whole group.
            </summary>
            <remarks>
               In PGFPlots a legend can be placed outside of a plot with the legend to name feature.
               When grouped plots do not all have the same number of plots used for legends only first plots are used for the
               legend.
               Therefor all plots get marked as not to be used for the legend.
               For each pane dummy plots are generated which just are used for the legend creation.
            </remarks>
        </member>
        <member name="T:PKSim.Infrastructure.Reporting.TeX.TEXHelper">
            <summary>
            This class has some often used translation helper functions.
            </summary>
        </member>
        <member name="T:PKSim.Infrastructure.Serialization.IDatabaseSchemaMigrator">
            <summary>
               handles all sql conversion that should be done before loading a project (schema changes etc that NHinbernate does
               not support out of the box)
            </summary>
        </member>
        <member name="T:PKSim.Infrastructure.Serialization.ORM.Mappers.IProjectToProjectMetaDataMapper">
            <summary>
               Map a project to its meta data representation
            </summary>
        </member>
        <member name="T:PKSim.Infrastructure.Serialization.ORM.Mappers.ProjectToProjectMetaDataMapper">
            <inherit />
        </member>
        <member name="T:PKSim.Infrastructure.Serialization.ORM.MetaData.BuildingBlockMetaData">
            <summary>
               Abstract class for all entities meta data defined in the model
            </summary>
        </member>
        <member name="P:PKSim.Infrastructure.Serialization.ORM.MetaData.SimulationSubjectMetaData.ExpressionProfileIds">
            <summary>
               String concatenation of all Ids
            </summary>
        </member>
        <member name="T:PKSim.Infrastructure.Serialization.ORM.MetaData.EventProtocolMetaData">
            <summary>
               not used yet. just to prepare 5.1,,,
            </summary>
        </member>
        <member name="T:PKSim.Infrastructure.Serialization.ORM.Queries.ISimulationChartsQuery">
            <summary>
               Returns all simulation charts meta data define for the simulation with the id given as parameter
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Serialization.IProjectPersistor.UpdateProjectAfterSave(PKSim.Core.Model.PKSimProject)">
            <summary>
               After successful serialization, some flags can be reseted to avoid saving values that were already saved in the
               database
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Serialization.Xml.XmlSerializationManager.convertXml(System.Xml.Linq.XElement,System.Int32)">
            <summary>
               This function converts the XElement prior to deserialization if required
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Serialization.Xml.XmlSerializationManager.convert(System.Object,System.Int32)">
            <summary>
               Converts the <paramref name="deserializedObject" /> to convert after the deserialization was made.
            </summary>
            <returns><c>true</c> if a conversion was performed or <c>false</c> otherwise</returns>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.GetProteinsByName(System.String)">
            <summary>
               This function retrieves a list of found proteins fulfilling the search criteria.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.GetExpressionDataByGeneId(System.Int64)">
            <summary>
               This function retrieves expression data for a special protein.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.GetContainerTissueMapping">
            <summary>
               This function retrieves the default container tissue mapping.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.GetGenderHint(System.String)">
            <summary>
               This function retrieves information for a gender.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.GetTissueHint(System.String)">
            <summary>
               This function retrieves information for a tissue.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.GetHealthStateHint(System.String)">
            <summary>
               This function retrieves information for a health state.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.GetSampleSourceHint(System.String)">
            <summary>
               This function retrieves information for a sample source.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.GetUnitHint(System.String)">
            <summary>
               This function retrieves information for a unit.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.GetNameTypeHint(System.String)">
            <summary>
               This function retrieves information for a name type.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.GetDataBaseRecProperties(System.String,System.String)">
            <summary>
               This function retrieves a list of property strings for a data base record id.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.GetDataBaseRecInfos(System.String,System.String)">
            <summary>
               This function retrieves a list of information strings for a data base record id.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.validateQuery(System.String,System.String)">
            <summary>
               This method validates the schema of a database query.
            </summary>
            <param name="columns">List of column names separated by colon.</param>
            <param name="query">Name of query to be checked.</param>
        </member>
        <member name="M:PKSim.Infrastructure.Services.GeneExpressionQueries.ValidateDatabase">
            <summary>
               This method validates the schema of the database.
            </summary>
            <exception cref="T:PKSim.Core.PKSimException">Thrown when an error occurred.</exception>
        </member>
        <member name="M:PKSim.Infrastructure.Services.MoleculeBuilderFactory.allSimpleParametersFrom(PKSim.Core.Model.Compound)">
            <summary>
               Returns the parameters from the drug that cannot be defined as alternatives
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.MoleculeBuilderFactory.addFormulaToCacheIfNecessary(OSPSuite.Core.Domain.Formulas.IFormula,OSPSuite.Core.Domain.Formulas.IFormulaCache)">
            <summary>
               add the given formula to the cache only if
               1- the formula is not constant (constant formula are not registered in cache)
               2- the formula was not registered already.
            </summary>
            <param name="formula">formula to add</param>
            <param name="formulaCache">formula cache</param>
        </member>
        <member name="M:PKSim.Infrastructure.Services.ProteinExpressionDataHelper.fillData(System.Reflection.PropertyInfo[],System.Data.DataTable,System.Object)">
            <summary>
            Fills the given data table with given object data.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.ProteinExpressionDataHelper.createDataTable(System.Reflection.PropertyInfo[])">
            <summary>
            All the Properties for the class array are converted to columns.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.ProteinExpressionDataHelper.ConvertToDataTable(System.Object[])">
            <summary>
            Converts an arraylist of a class object to a data table object.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.ProteinExpressionDataHelper.GetDistinctLoV(System.Data.DataColumn)">
            <summary>
            This helping method retrieves a string collection with all distinct values of the given column.
            </summary>
        </member>
        <member name="M:PKSim.Infrastructure.Services.ISerializationContextFactory.Create(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.Data.DataRepository},System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IWithId},System.Boolean,System.Boolean)">
            <summary>
            Returns a new <see cref="T:OSPSuite.Core.Serialization.Xml.SerializationContext"/> to be used in serialization or deserialization
            </summary>
            <param name="dataRepositories">Optional dataRepositories that will be available when deserializing an object. This is required to resolve references</param>
            <param name="externalReferences">Optional references that will be available when deserializing an object. This is required to resolve references to those objects</param>
            <param name="addProjectSimulations">If a project is defined, should references to simulations defined in the project be added to the contect? Default is <c>true</c></param>
            <param name="addProjectObservedData">If a project is defined, should references to observed data defined in the project be added to the contect? Default is <c>true</c></param>
            <returns></returns>
        </member>
    </members>
</doc>
