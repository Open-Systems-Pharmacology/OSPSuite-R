<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PKSim.Presentation</name>
    </assembly>
    <members>
        <member name="T:PKSim.Presentation.BuildingBlockTaskRegistrationConvention">
            <summary>
               Registers each implementation of IBuildingBlockTask[T] using the IBuildingBlockTask[T] interface
            </summary>
        </member>
        <member name="T:PKSim.Presentation.Core.ICloseSubjectPresenterInvoker">
            <summary>
               Close all building block presenter that might be open for a building block being removed
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.DiseaseStates.DiseaseStateDTO.Parameter">
            <summary>
            For now, we assume only one disease state parameter. We can make the view more generic if this is ever required
            </summary>
        </member>
        <member name="M:PKSim.Presentation.DTO.DiseaseStates.IDiseaseStateUpdater.UpdateDiseaseStateDTO(PKSim.Presentation.DTO.DiseaseStates.DiseaseStateDTO,PKSim.Core.Model.OriginData)">
            <summary>
               Updates the value in the DTO based on the origin data value (typically used in edit scenario)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.DTO.DiseaseStates.IDiseaseStateUpdater.UpdateOriginDataFromDiseaseState(PKSim.Core.Model.OriginData,PKSim.Presentation.DTO.DiseaseStates.DiseaseStateDTO)">
            <summary>
               Updates the origin data with value from the DTO. This is typically used in save scenario
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Formulations.FormulationTypeDTO.Id">
            <summary>
            Formulation id coming from PKSim database
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Formulations.FormulationTypeDTO.DisplayName">
            <summary>
            Display Name for that formulation type
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Individuals.ExpressionParameterDTO.NormalizedExpression">
            <summary>
            Normalized expression. This is only used for display and is only available for expression parameters
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Individuals.ExpressionParameterDTO.NormalizedExpressionPercent">
            <summary>
            Normalized expression. This is only used for display and is only available for expression parameters
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Individuals.IndividualTransporterDTO.DefaultAvailableInDatabase">
            <summary>
            Returns true if some information could be ready from the database otherwise false
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Parameters.ParameterDTO.Percentile">
            <summary>
               Percentile is saved as a number between 0 and 1 in a parameter
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.PopulationAnalyses.QuantityPKParameterDTO.PKParameter">
            <summary>
               The actual QuantityPKParameter
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Populations.AdvancedParameterDTO.ParameterFullDisplayName">
            <summary>
               Display path of the parameter according to its position in the hierarchy
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Populations.AdvancedParameterDTO.DistributionType">
            <summary>
               Type of distribution
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Populations.AdvancedParameterDTO.Parameters">
            <summary>
               Parameters of distribution
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.SimulationLogDTO.Image">
            <summary>
               Status of the selection (Image that will be displayed to the end user indicating if the mapping
               appears to be allowed or not)
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Simulations.SimulationPartialProcessSelectionDTO.CompoundProcess">
            <summary>
               Selected process in compound
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Simulations.SimulationPartialProcessSelectionDTO.IndividualMolecule">
            <summary>
               Enzyme used in the individual to be mapped to the selected process in compound
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Simulations.SimulationPartialProcessSelectionDTO.Image">
            <summary>
               Status of the selection (Image that will be displayed to the end user indicating if the mapping
               appears to be allowed or not)
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.Simulations.SimulationSystemicProcessSelectionDTO.Image">
            <summary>
               Status of the selection (Image that will be displayed to the end user indicating if the mapping
               appears to be allowed or not)
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.SpeciesDatabaseMapDTO.SpeciesName">
            <summary>
              Name of the species for which the database path is specified
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.SpeciesDatabaseMapDTO.SpeciesDisplayName">
            <summary>
              Name of the species for which the database path is specified
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.SpeciesDatabaseMapDTO.DatabaseFullPath">
            <summary>
              Path of the protein expression database for the given species
            </summary>
        </member>
        <member name="P:PKSim.Presentation.DTO.SpeciesDatabaseMapDTO.OriginalDatabasePathFullPath">
            <summary>
              Path of the protein expression database for the given species
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.DecimalPlace">
            <summary>
               Number of decimal after the comma
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.AllowsScientificNotation">
            <summary>
               Scientific notation allows (1e-2 for instance)
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.MainViewLayout">
            <summary>
               String representing the serialization of the main view
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.RibbonLayout">
            <summary>
               String representing the serialization of the ribbon
            </summary>
        </member>
        <member name="M:PKSim.Presentation.IUserSettings.RestoreLayout">
            <summary>
               Restore the layout in the dock manager
            </summary>
        </member>
        <member name="M:PKSim.Presentation.IUserSettings.SaveLayout">
            <summary>
               Save the layout from the dock manager
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.LayoutVersion">
            <summary>
               Layout version. If the version is not equal to the current one, the layout settings should be ignored
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.ChangedColor">
            <summary>
               Color used for cells containing parameter whose value was changed by the user
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.FormulaColor">
            <summary>
               Color used for cells containing a formula that was not changed by the user
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.ShouldRestoreWorkspaceLayout">
            <summary>
               Should the opened view saved in project be restored when opening the project (default true)
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.DefaultParameterGroupingMode">
            <summary>
               Default grouping mode for grouping presenter
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.DirectoryMapSettings">
            <summary>
               Directory map for the current user
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.UsedDirectories">
            <summary>
               Key Value pair containing for a given key (ObservedData, Project etc..) the last selected folder by the user
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.ShowUpdateNotification">
            <summary>
               Specifies if update notification should be shown to the user. Default is true
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.LastIgnoredVersion">
            <summary>
               Full version x.y.z that was most recently ignored (empty if the user never ignored any version)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.IUserSettings.ResetLayout">
            <summary>
               Resets the current layout
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.PreferredViewLayout">
            <summary>
               Which layout should be used when creating complex views (not supported in all use cases so far)
            </summary>
        </member>
        <member name="P:PKSim.Presentation.IUserSettings.LoadTemplateWithReference">
            <summary>
            3 states flag: Load, do not load, ask
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Nodes.SystemicProcessNodeType.SystemicTypes">
            <summary>
               Different SystemicProcessType that will be hosted under this node
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Nodes.UsedBuildingBlockInSimulationNode.UsedBuildingBlock">
            <summary>
               Return the used building block in the simulation represented by the node
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParameterDistributionPresenter.AllBarTypes">
            <summary>
               Returns all bar types available for display
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParameterDistributionPresenter.AllGenders">
            <summary>
               Returns all genders available for the given population
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParameterDistributionPresenter.AllScalingModes">
            <summary>
               Returns all scaling modes available for display
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParameterDistributionPresenter.GenderDisplayFor(System.String)">
            <summary>
               Returns the string to be displayed for the given genderKey
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParameterDistributionPresenter.Select(PKSim.Core.Model.AdvancedParameter)">
            <summary>
               Select the advanced parameter and display its distribution
            </summary>
            <param name="advancedParameter">Advanced parameter whose distribution should be displayed</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParameterDistributionPresenter.UseSelectedParameterInReport(System.Boolean)">
            <summary>
               Defines if the selected parameter should be displayed in a report
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParameterPresenter.Edit(PKSim.Core.Model.AdvancedParameter)">
            <summary>
               display the settings for the advanced parameter presenter
            </summary>
            <param name="advancedParameter">advanced parameter to edit</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParameterPresenter.DistributionTypeChanged">
            <summary>
               Triggered when the user decides to change the distribution type for the edited advanced parameter
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParameterPresenter.OnDistributionTypeChanged">
            <summary>
               Event is raised whenever the user changed the AdvancedParameterType for the edited parameter.
               The Type of the advanced parameter has not been updated yet. This should be accomplished
               by the main presenter listening to the event
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParameterPresenter.AllDistributions(PKSim.Presentation.DTO.Populations.AdvancedParameterDTO)">
            <summary>
               returns all available distributions supported by the application for advanced parameters
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParameterPresenter.RemoveSelection">
            <summary>
               Remove the selected information displayed for the advanced parameter if any was selected
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParameterPresenter.RemoveSelectionFor(PKSim.Core.Model.AdvancedParameter)">
            <summary>
               Removes the selection for the advanced paramter if the parameter was being edited
            </summary>
            <param name="advancedParameter"></param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParametersPresenter.AddAdvancedParameter">
            <summary>
               Add the selected "non-advanced" parameter as an "advanced" parameter in the edited population
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.AdvancedParameters.IAdvancedParametersPresenter.RemoveAdvancedParameter">
            <summary>
               Remove the selected "advanced" parmeter as a "non-advanced" parameter in the edited population
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.IBuildingBlockSelectionPresenter.ExtraFilter">
            <summary>
               Allows to filter the building block to show even more based on some criteria
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ICalculationMethodSelectionPresenter.Edit(PKSim.Core.Model.IWithCalculationMethods,System.Func{PKSim.Core.Model.CalculationMethodCategory,System.Boolean})">
            <summary>
               Edit this object with calculation methods and use the optional filter on categories to determine which calculation
               methods to show
            </summary>
            <param name="objectWithCalculationMethods">The object being edited</param>
            <param name="predicate">
               The predicate being used to select calculation methods for editing. Null
               selects all calculation methods
            </param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ICalculationMethodSelectionPresenter.AnyCategories">
            <summary>
               Indicates whether any calculation method categories are actually editable for this presenter
            </summary>
            <returns>True if there are any categories to be edited, otherwise false</returns>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundAdvancedParameterGroupPresenter.EditCompound(PKSim.Core.Model.Compound)">
            <summary>
               Edit the alternative defined in the compound to edit for the group
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundParameterGroupPresenter.EditCompound(PKSim.Core.Model.Compound)">
            <summary>
               Edit the alternative defined in the compound to edit for the group
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundParameterGroupWithAlternativePresenter.AddAlternative">
            <summary>
               Add a new alternative for the group
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundParameterGroupWithAlternativePresenter.RemoveAlternative(PKSim.Presentation.DTO.Compounds.ParameterAlternativeDTO)">
            <summary>
               Remove the alternative specified as parameter
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundParameterGroupWithAlternativePresenter.SetIsDefaultFor(PKSim.Presentation.DTO.Compounds.ParameterAlternativeDTO,System.Boolean)">
            <summary>
               Set the default value for the alternative given as parameter
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundParameterGroupWithAlternativePresenter.RenameAlternative(PKSim.Presentation.DTO.Compounds.ParameterAlternativeDTO)">
            <summary>
               Set a new name for the given alternative
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundParameterGroupWithAlternativePresenter.UpdateValueOriginFor(PKSim.Presentation.DTO.Compounds.ParameterAlternativeDTO,OSPSuite.Core.Domain.ValueOrigin)">
            <summary>
               Edit the value origin for the given alternative
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundParameterGroupWithCalculatedDefaultPresenter.UpdateCalculatedValue">
            <summary>
               Show the calculated value for the selected parameter group (for instance all permeability values as a function of
               available lipophilicity)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundParameterGroupWithCalculatedDefaultPresenter.IsCalculatedAlternative(PKSim.Presentation.DTO.Compounds.ParameterAlternativeDTO)">
            <summary>
               returns true if the given alternative is the calculated alternative otherwise false
            </summary>
            <param name="parameterAlternativeDTO"></param>
            <returns></returns>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundProcessesPresenter.AddEnzymaticPartialProcess">
            <summary>
               Add an enzymatic partial process
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundProcessesPresenter.ActivateNode(OSPSuite.Presentation.Nodes.ITreeNode)">
            <summary>
               Active the given node (e.g. as results of a user click)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundProcessesPresenter.RenameDataSourceInProcess(PKSim.Core.Model.CompoundProcess)">
            <summary>
               Rename the datasource in the given partial process
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundProcessesPresenter.RemoveProcess(PKSim.Core.Model.CompoundProcess)">
            <summary>
               Delete the plasma clearance process
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundProcessesPresenter.AddSystemicProcess(System.Collections.Generic.IEnumerable{PKSim.Core.Model.SystemicProcessType})">
            <summary>
               Add a systemic process for the given systemic  process type
            </summary>
            <param name="systemicProcessType">Systemic process type to add</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundProcessesPresenter.AddSpecificBinding">
            <summary>
               Add a specific binding process
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundProcessesPresenter.AddTransport">
            <summary>
               Add a transport process
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundProcessesPresenter.NodeDoubleClicked(OSPSuite.Presentation.Nodes.ITreeNode)">
            <summary>
               This method is called whenever a node is beind double cliked
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundProcessesPresenter.RenameMoleculeForPartialProcesses(System.String,System.Type)">
            <summary>
               Rename the molecule associated with processes of the given type
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundProcessesPresenter.AddPartialProcessesForMolecule(System.String,System.Type)">
            <summary>
               Add a partial process for the given molecule and process type
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundProcessesPresenter.AddInhibitionProcess">
            <summary>
               Adds a new inhibition process
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundProcessesPresenter.AddInductionProcess">
            <summary>
               Adds a new induction process
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.ICompoundTypeGroupPresenter.EditCompoundParameters(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Edit the parameters belonging to the MolWeight group
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Compounds.ICompoundTypeGroupPresenter.ShowFavorites">
            <summary>
               Specifies if favorites column can be displayed or not. Default is <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.IEnzymaticCompoundProcessPresenter.MetaboliteChanged(System.String)">
            <summary>
               Method used to update the metabolite for the process
            </summary>
            <param name="newMetabolite">The new metabolite being attached to the process</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.IFractionUnboundGroupPresenter.AllSpecies">
            <summary>
               Returns all available species
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.IMolWeightGroupPresenter.EditHalogens">
            <summary>
               Edit the halogens for the given mol weight group
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.IMolWeightGroupPresenter.SaveHalogens">
            <summary>
               Save the halogens being edited (happens if popup was closed and edit still has focus)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.IMolWeightGroupPresenter.IsHasHalogens(OSPSuite.Presentation.DTO.IParameterDTO)">
            <summary>
               Returns true if the parameter should have an advanced editor, for instance to display halogens otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.IMolWeightGroupPresenter.EditCompoundParameters(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Edit the parameters belonging to the MolWeight group
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Compounds.IMolWeightGroupPresenter.IsMolWeightEff(OSPSuite.Presentation.DTO.IParameterDTO)">
            <summary>
               Returns true if the parameter is the molweight eff parameters otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.IConfigurableLayoutPresenter.AddViews(System.Collections.Generic.IEnumerable{OSPSuite.Presentation.Views.IView})">
            <summary>
               Adds a set of views dynamically to this view. If there is only one view, then no collection type controls will be
               used.
               If multiple views are in the list, then they will be all added as separate elements in the view using a collection
               type control
            </summary>
            <param name="views">The view being added</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.IConfigurableLayoutPresenter.RemoveViews">
            <summary>
               Removes all views dynamically added to the presenter
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Formulations.IFormulationSettingsPresenter.AutoSave">
            <summary>
               Specifies whether the formulation should be saved as soon as a command is raised or only when triggered explicitly.
               Default is false
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Individuals.IExpressionLocalizationPresenter.UpdateLocalization(PKSim.Core.Model.Localization,System.Boolean)">
            <summary>
            Updates the localization for a specific localization flag. 
            </summary>
            <param name="localization">Localization being turned on or off</param>
            <param name="selected"><c>True</c> if the localization is selected otherwise <c>False</c></param>
            <returns><c>True</c> if the localization was updated otherwise <c>False</c> </returns>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Individuals.IExpressionProfileSelectionPresenter.SelectExpressionProfile``1(PKSim.Core.Model.ISimulationSubject)">
            <summary>
               return true if the user confirms the creation of a molecule for the given individual otherwise false
            </summary>
            <param name="simulationSubject">simulationSubject for which a molecule should be created</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Individuals.IIndividualTransporterExpressionsPresenter.SetTransportDirection(PKSim.Presentation.DTO.Individuals.TransporterExpressionParameterDTO,PKSim.Core.Model.TransportDirection)">
            <summary>
               Update the transport direction for the given transporter container
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Individuals.IIndividualTransporterExpressionsPresenter.AllTransportTypes">
            <summary>
               Returns the available transporter types
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Individuals.IIndividualTransporterExpressionsPresenter.UpdateTransportType(OSPSuite.Core.Domain.TransportType)">
            <summary>
               This function is called when the user triggers the transporter type change. All process, for which the selected
               transporter type may be apply will be updated
            </summary>
            <param name="newTransportType"> </param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Individuals.IMoleculesPresenter.RemoveMolecule(PKSim.Core.Model.IndividualMolecule)">
            <summary>
               Remove the given protein
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Individuals.IMoleculesPresenter.AddMolecule``1">
            <summary>
               Add a new protein of the given type to the individual
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Individuals.IMoleculesPresenter.ActivateNode(OSPSuite.Presentation.Nodes.ITreeNode)">
            <summary>
               The node given as parameter was selected
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Individuals.IMoleculesPresenter.NodeDoubleClicked(OSPSuite.Presentation.Nodes.ITreeNode)">
            <summary>
               The node given as parameter was double clicked
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Individuals.IOntogenySelectionPresenter.ShowOntogeny">
            <summary>
               Show the ontogeny data for the selected ontogeny
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Individuals.IOntogenySelectionPresenter.RefreshView">
            <summary>
               Refresh the view (for instance the show ontogeny button needs to be activated deactivated in response to specific
               events)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Individuals.IOntogenySelectionPresenter.LoadOntogeny">
            <summary>
               Load a user defined ontogeny from file
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ICreateBuildingBlockPresenter`1.Create">
            <summary>
            Starts the creation workflow of a new building block of type <typeparamref name="TBuildingBlock"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:PKSim.Presentation.Presenters.ICreateBuildingBlockPresenter`1.BuildingBlock">
            <summary>
            Returns the created <typeparamref name="TBuildingBlock"/> 
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Main.MenuAndToolBarPresenter.SimulationState.IsActivated">
            <summary>
               Returns  <c>true</c> if a <see cref="T:PKSim.Core.Model.Simulation" /> is activated otherwise  <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Main.MenuAndToolBarPresenter.SimulationState.HasResult">
            <summary>
               Returns <c>true</c> if activated <see cref="T:PKSim.Core.Model.Simulation" /> has results otherwise <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Main.MenuAndToolBarPresenter.SimulationState.IsImported">
            <summary>
               Returns <c>true</c> if activated <see cref="T:PKSim.Core.Model.Simulation" /> is an imported simulation otherwise <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Main.MenuAndToolBarPresenter.SimulationState.IsIndividual">
            <summary>
               Returns <c>true</c> if activated <see cref="T:PKSim.Core.Model.Simulation" /> represents an individual simulation otherwise
               <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IEditParameterPresenter.CanEditParameter(OSPSuite.Presentation.DTO.IParameterDTO)">
            <summary>
               Returns true if the parameter can be edited otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IEditParameterPresenter.ResetParameter(OSPSuite.Presentation.DTO.IParameterDTO)">
            <summary>
               Reset the given parameter
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IEditParameterPresenter.IsSetByUser(OSPSuite.Presentation.DTO.IParameterDTO)">
            <summary>
               Returns true if the parameter was set by the user
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IFavoriteParametersPresenter.MoveUp">
            <summary>
               Moves the selected parameter up once
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IFavoriteParametersPresenter.MoveDown">
            <summary>
               Moves the selected parameter down once
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.ICustomParametersPresenter.Description">
            <summary>
               Set the string that describes the role of this parameters in the model
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.ICustomParametersPresenter.Edit(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Edit the given parameters
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.ICustomParametersPresenter.ForcesDisplay">
            <summary>
               Returns true if the presenter should be displayed even if not parameters are available otherwise false
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.ICustomParametersPresenter.AlwaysRefresh">
            <summary>
            Returns true if the Edit method should be called to refresh the presenter even if the presenter was already loaded. 
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.ParameterIsDistributed(OSPSuite.Presentation.DTO.IParameterDTO)">
            <summary>
               Returns <c>true</c> if the parameter is distributed otherwise <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.GroupingVisible">
            <summary>
               Is the grouping panel visible?
               Default is <c>true</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.ScalingVisible">
            <summary>
               Is the scaling panel visible?
               Default is <c>true</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.HeaderVisible">
            <summary>
               Is the header panel visible?
               Default is <c>true</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.RowIndicatorVisible">
            <summary>
               Is the row indicator visible?
               Default is <c>true</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.ContainerVisible">
            <summary>
               Are the container names visible?
               Default is <c>true</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.DistributionVisible">
            <summary>
               Is the distribution column visible?
               Default is <c>true</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.ValueOriginVisible">
            <summary>
               Is the value origin column visible?
               Default is <c>true</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.ParameterNameVisible">
            <summary>
               Forces the name column to be always visible. This should be called after the Edit method
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.IsSimpleEditor">
            <summary>
               Configure the editor to display the most simple view possible
               Grouping, scaling, favorite will be hidden 
               Default is <c>false</c>
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.GroupBy(OSPSuite.Core.Domain.PathElementId)">
            <summary>
               Group by the column with the given <paramref name="pathElementId" />
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.Clear">
            <summary>
               Clear the presenter of the displayed parameters
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.AllowMultiSelect">
            <summary>
               True if multiple parameter can be selected.
               Default is <c>true</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.Caption">
            <summary>
               Set the caption for the underling view
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.OptimalHeight">
            <summary>
               Returns the optimal height of the view required to display all parameters at once
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.RefreshData">
            <summary>
               Performs a refresh of the view
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.ParameterChanged">
            <summary>
               Event is raised whenever the a parameter was changed (value or unit)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.SaveEditor">
            <summary>
               Triggers a save action from the view to the data (only necessary in embedded popup scenarios)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.SelectedParametersChanged">
            <summary>
               Typically called from the view, this method will raised the <see cref="E:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.OnSelectedParametersChanged" /> event
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.UseAdvancedSortingMode">
            <summary>
               if set to true, parameter will be compared for sort only if sharing the same hierarchy of visible groups
               It is useful for events, default is <c>false</c>
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.Parameters.IMultiParameterEditPresenter.OnSelectedParametersChanged">
            <summary>
               Event is raised whenever the selection of parameters in the UI has changed
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IParameterGroupsPresenter.ActivateNode(OSPSuite.Presentation.Nodes.ITreeNode)">
            <summary>
               Active the <paramref name="node">parameter group node</paramref>
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IParameterGroupsPresenter.InitializeWith(OSPSuite.Core.Domain.IContainer)">
            <summary>
               Initialize the parameter group presenter with the container for which the parameter should be displayed
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IParameterGroupsPresenter.InitializeWith(OSPSuite.Core.Domain.IContainer,System.Func{OSPSuite.Core.Domain.IParameter,System.Boolean})">
            <summary>
               Initialize the parameter group presenter with the container for which the parameter filtered with the predicate
               should be displayed
            </summary>
            <param name="container">root container</param>
            <param name="predicate">predicate used to filter the parameters to display</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IParameterGroupsPresenter.InitializeWith(OSPSuite.Core.Domain.IContainer,System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter})">
            <summary>
               Initialize the parameter group presenter with the container for which then given parameter should be displayed
            </summary>
            <param name="container">root container</param>
            <param name="allParameters">Parameters to display</param>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IParameterGroupsPresenter.NoSelectionCaption">
            <summary>
               Caption to display when no group is being selected
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IParameterGroupsPresenter.ParameterGroupingMode">
            <summary>
               Indicates that the way the parameters are displayed has changed
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IParametersByGroupPresenter.HeaderVisible">
            <summary>
               Is the header panel visible?
               Default is false
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IParameterSetPresenter.ResetParameters">
            <summary>
               Resets all the visible parameters
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IParameterSetPresenter.ScaleParametersWith(System.Double)">
            <summary>
               Scales the visible parameters with the provided factor
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IParameterSetPresenter.IsFormulaNotFixed(OSPSuite.Presentation.DTO.IParameterDTO)">
            <summary>
               Returns true if the parameter is a formula parameter not fixed
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IParameterSetPresenter.EditTableFor(OSPSuite.Presentation.DTO.IParameterDTO)">
            <summary>
               Edit the table formula defined for the given parameter
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IParameterSetPresenter.ShowFavorites">
            <summary>
               Specifies if the column giving access to the favorites in visible or not
               Default is true
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IParameterSetPresenter.SetFavorite(OSPSuite.Presentation.DTO.IParameterDTO,System.Boolean)">
            <summary>
               Sets the favorite state of the given parameter
            </summary>
            <param name="parameterDTO">Parameter</param>
            <param name="isFavorite">Is the parameter a favorite parameter</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IParameterSetPresenter.CanEditValueOrigin(OSPSuite.Presentation.DTO.IParameterDTO)">
            <summary>
               Returns true if the value origin can be edited otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IScaleParametersPresenter.InitializeWith(PKSim.Presentation.Presenters.Parameters.IParameterSetPresenter)">
            <summary>
            Initialize the scale parameters presenter with the parent presenter displaying the set of parameters being edited
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IScaleParametersPresenter.Scale">
            <summary>
            Trigger the scale action for the parameters being edited in the parent presenter
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Parameters.IScaleParametersPresenter.Reset">
            <summary>
            Trigger the reset action for the parameters being edited in the parent presenter
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.IScaleParametersPresenter.Enabled">
            <summary>
            set whether the scale and reset functions are enabled or not
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Parameters.ITableParameterPresenter.ConfigureCreatedTableAction">
            <summary>
               Action that can be called to configure the created <see cref="T:OSPSuite.Core.Domain.Formulas.TableFormula" />
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IBoxWhiskerChartPresenter.ExtractIndividuals(PKSim.Core.Chart.BoxWhiskerYValue)">
            <summary>
               Extracts all individuals whose individualId were gathered in the curveData
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IBoxWhiskerChartPresenter.ExtractIndividuals(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
               Extracts all individuals with id in <paramref name="individualIds" />
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.PopulationAnalyses.ICreatePopulationAnalysisGroupingFieldPresenter.FieldName">
            <summary>
               The new name selected by the user for the derived field
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.ICreatePopulationAnalysisGroupingFieldPresenter.CreateGrouping(PKSim.Core.Model.PopulationAnalyses.IPopulationAnalysisField,PKSim.Core.Model.IPopulationDataCollector)">
            <summary>
               Start the use case of creating a grouping derived field for the field <paramref name="populationAnalysisField" />
               and the simulation <paramref name="populationDataCollector" />
            </summary>
            <returns>The <see cref="T:PKSim.Core.Model.PopulationAnalyses.GroupingDefinition" /> defined by the user or null if the action was cancelled</returns>
        </member>
        <member name="P:PKSim.Presentation.Presenters.PopulationAnalyses.ICreatePopulationAnalysisGroupingFieldPresenter.AvailableGroupings">
            <summary>
               The list of all available <see cref="T:PKSim.Presentation.Presenters.PopulationAnalyses.GroupingDefinitionItem" /> that the user can choose from
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.ICreatePopulationAnalysisGroupingFieldPresenter.SelectedGroupingChanged">
            <summary>
               This is called whenever the grouping method was changed by the user
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.ICreatePopulationAnalysisPresenter.Edit(PKSim.Core.Model.IPopulationDataCollector,PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisChart)">
            <summary>
               Edits the given population Analysis chart. Returns true if the edit was confirmed otherwise false
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.PopulationAnalyses.IGroupingDefinitionPresenter.GroupingDefinition">
            <summary>
            Returns the grouping definition defined by the user
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IGroupingDefinitionPresenter.InitializeWith(PKSim.Core.Model.PopulationAnalyses.IPopulationAnalysisField,PKSim.Core.Model.IPopulationDataCollector)">
            <summary>
            Initializes the grouping definition presenter allowing the user to setup a new GroupingDefinition
            </summary>
            <param name="populationAnalysisField">Field for which the grouping definition should be defined</param>
            <param name="populationDataCollector">Population simulation used in the analysis</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IGroupingDefinitionPresenter.Edit(PKSim.Core.Model.PopulationAnalyses.GroupingDefinition)">
            <summary>
            Edit the grouping definition <paramref name="groupingDefinition"/>
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IGroupingDefinitionPresenter.UpdateGroupingDefinition">
            <summary>
            This should be called when editing is over to save the changes back in the grouping definition
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IGroupingDefinitionPresenter.StartCreate">
            <summary>
            starts the creation process
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.PopulationAnalyses.FieldsMovedEventArgs.Target">
            <summary>
            Felds on which the fields where moved (e.g dropped). The value is <c>null</c> if the fields where dropped on an empty space
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.PopulationAnalyses.FieldsMovedEventArgs.Area">
            <summary>
            Area on which the fields were moved
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsDragDropBinder.FieldsDropped">
            <summary>
            Event is thrown whenevern fields are being dropped (reordered or moved)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.INumberOfBinsGroupingPresenter.GenerateLabels">
            <summary>
               This method is called whenever the user change the any feature that would require a generation of labels
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisAvailablePKParametersPresenter.SelectedPKParameters">
            <summary>
               Returns the selected pk parameters
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisChartPresenter.AllowEdit">
            <summary>
               Specifies if the edit method can be called
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisChartPresenter.Edit">
            <summary>
               Starts the edit action
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisChartPresenter.ExportDataToExcel">
            <summary>
               Exports the underlying data to excel
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisChartPresenter`2.Show(PKSim.Core.Chart.ChartData{`0,`1},PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisChart)">
            <summary>
               Display the charts <paramref name="chartsData" /> using the specified <paramref name="populationAnalysisChart" />.
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisChartPresenter`2.CurveDataFor(System.String,System.String)">
            <summary>
               Returns the curve data defined in the pane with id <paramref name="paneId" /> for the series with id
               <paramref name="seriesId" />
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisChartPresenter`2.ObservedCurveDataFor(System.String,System.String)">
            <summary>
               Returns the observed curve data defined in the pane with id <paramref name="paneId" /> for the series with caption
               <paramref name="caption" />
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisChartPresenter`2.Watermark">
            <summary>
            Returns the watermark that should be used in the plot if any
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldListPresenter.FieldsMoved">
            <summary>
               Events is fired whenever fields are dropped onto the presenter
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.FieldSelected(PKSim.Core.Model.PopulationAnalyses.IPopulationAnalysisField)">
            <summary>
               Typically called from the view when a field was selected by the user
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.RemoveField(PKSim.Core.Model.PopulationAnalyses.IPopulationAnalysisField)">
            <summary>
               Removes the <paramref name="populationAnalysisField" /> from the analysis and all
               <see cref="T:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDerivedField" /> depending on it.
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.AddField(PKSim.Core.Model.PopulationAnalyses.IPopulationAnalysisField)">
            <summary>
               Adds the <paramref name="populationAnalysisField" /> from the analysis
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.CreateDerivedFieldFor(PKSim.Core.Model.PopulationAnalyses.IPopulationAnalysisField)">
            <summary>
               Creates a derived field based on the <paramref name="populationAnalysisField" /> given as parameter.
               if the derived field was not specified, simply use the first field defined in the analysis
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.CreateDerivedField">
            <summary>
               Creates a derived field based. The origin field on which the derived field should be created
               will be selected by the user
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.FieldUnitChanged(PKSim.Presentation.DTO.PopulationAnalyses.PopulationAnalysisFieldDTO,OSPSuite.Core.Domain.UnitSystem.Unit,OSPSuite.Core.Domain.UnitSystem.Unit)">
            <summary>
               This is called whenever the display unit of a field is changed
            </summary>
            <param name="populationAnalysisField">Field whose display unit is being edited</param>
            <param name="oldDisplayUnit">Previous display unit</param>
            <param name="newDisplayUnit">New display unit</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.FieldScalingChanged(PKSim.Presentation.DTO.PopulationAnalyses.PopulationAnalysisFieldDTO,OSPSuite.Core.Domain.Scalings,OSPSuite.Core.Domain.Scalings)">
            <summary>
               This is called whenever the scaling of a field is changed
            </summary>
            <param name="populationAnalysisField">Field whose scaling is being edited</param>
            <param name="oldScaling">Previous scaling</param>
            <param name="newScaling">New scaling</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.FieldColorChanged(PKSim.Presentation.DTO.PopulationAnalyses.PopulationAnalysisFieldDTO,System.Drawing.Color,System.Drawing.Color)">
            <summary>
               This is called whenever the color of a field is changed
            </summary>
            <param name="populationAnalysisField">Field whose color is being edited</param>
            <param name="oldColor">Previous color</param>
            <param name="newColor">New color</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.FieldNameChanged(PKSim.Presentation.DTO.PopulationAnalyses.PopulationAnalysisFieldDTO,System.String,System.String)">
            <summary>
               This is called whenever the name of the field is changed
            </summary>
            <param name="populationAnalysisField">Field whose name is being edited</param>
            <param name="oldName">Previous name</param>
            <param name="newName">New name</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.EditDerivedField(PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDerivedField)">
            <summary>
               Edit the <see cref="T:PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDerivedField" /> given as parameter
            </summary>
            <param name="derivedField">Derived field that should be edited</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.LoadDerivedFieldFromTemplateForAsync(PKSim.Core.Model.PopulationAnalyses.PopulationAnalysisDataField)">
            <summary>
               Loads a derived field from the template database for the input field <paramref name="populationAnalysisDataField" />
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.NoFieldSelected">
            <summary>
               Event is raised whenever an action (for example delete) led to a no field being selected
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.RemoveSelection">
            <summary>
               Removes the field currently being selected
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.DerivedFieldSelected">
            <summary>
               Event is thrown whenever a derived field is being selected
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisFieldsPresenter.ScalingVisible">
            <summary>
               Specifies whether the scaling field should be displayed. Default is <c>true</c>
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisParameterFieldsPresenter.AddParameter(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Adds the given <paramref name="parameter" /> as input field for the analysis
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisParameterFieldsPresenter.SelectedParameter">
            <summary>
               Returns the selected parameter or null if no parameter is selected
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisParameterFieldsPresenter.ParameterFieldSelected">
            <summary>
               Event is thrown whenever a parameter is being selected
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisParameterFieldsPresenter.CovariateFieldSelected">
            <summary>
               Event is thrown whenever a covariate is being selected
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisParameterFieldsPresenter.AddCovariate(System.String)">
            <summary>
               Add a covariate field to the selection
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisPKParameterFieldsPresenter.AddPKParameter(OSPSuite.Core.Domain.QuantityPKParameter,System.String)">
            <summary>
               Adds the given <paramref name="quantityPKParameter" /> as pk parameter in the analysis
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisPKParameterFieldsPresenter.SelectedPKParameter">
            <summary>
               Returns the pk parameter currently selected
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisPKParameterFieldsPresenter.PKParameterSelected">
            <summary>
               Event is thrown whenever a PK-Parameter is being selected
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisResultsPresenter.RefreshAnalysis">
            <summary>
               Refreshes the analysis. This should be called whenever the underlying data have changed or when fields were added
               ore removed from the analysis.
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.PopulationAnalyses.IPopulationAnalysisResultsPresenter.RefreshChart">
            <summary>
               Refreshes the Chart. The underlying analysis will not be performed again
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.PopulationAnalyses.ITimeProfileChartPresenter.DragOver">
            <summary>
               Event is fired when some data are dragged over view
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.PopulationAnalyses.ITimeProfileChartPresenter.DragDrop">
            <summary>
               Event is fired when some data are dropped onto view
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationSettingsPresenter.PrepareForCreating(PKSim.Core.Model.Individual)">
            <summary>
               Initialize presenter in order to create a new population
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationSettingsPresenter.IndividualSelectionChanged(PKSim.Core.Model.Individual)">
            <summary>
               Function will be called whenever the based individual was changed (which will also make the additional parameter invalid)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationSettingsPresenter.CreatePopulation">
            <summary>
               Create the population based on the settings defined by the user
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Populations.IPopulationSettingsPresenter.PopulationCreated">
            <summary>
               Returns true if the population with the defined settings was created, otherwise false
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.Populations.IPopulationSettingsPresenter.PopulationCreationFinished">
            <summary>
            Event is fired whenever a population has been created. The boolean indicates if the creation was successful or not
            The second arguments indicates if error or warnings were found: Set to true, errors and warnings found. Set to false, no error and no warnings
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationSettingsPresenter.Cancel">
            <summary>
               This action should be call to cancel the population creation
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Populations.IPopulationSettingsPresenter`1.Population">
            <summary>
               Return the created population
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationSettingsPresenter`1.LoadPopulation(`0)">
            <summary>
               Initialize the presenter with the population settings
            </summary>
            <param name="population">Population to edit</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationAdvancedParameterDistributionPresenter.EditPopulation(PKSim.Core.Model.Population)">
            <summary>
               Edit the distributed parameters for the given population
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationAdvancedParametersPresenter.EditPopulation(PKSim.Core.Model.Population)">
            <summary>
               Edit the given random population to enable the definition of advanced parameters
            </summary>
            <param name="population">Population being edited</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationDistributionPresenter.Plot(PKSim.Core.Model.IVectorialParametersContainer,System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Collections.Generic.IComparer{System.String},PKSim.Core.Chart.DistributionSettings)">
            <summary>
               Plots the given <paramref name="values" />. The <paramref name="comparer" /> is used to order the values on the
               x-axis
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.NodeSelected(OSPSuite.Presentation.Nodes.ITreeNode)">
            <summary>
               This function is called whenever the user selects a new node in the parameter group view
            </summary>
            <param name="node">selected node</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.NodeDoubleClicked(OSPSuite.Presentation.Nodes.ITreeNode)">
            <summary>
               This function is called whenever the user double clicks a node in the parameter group view
            </summary>
            <param name="node">selected node</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.AddParameters(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter},System.Boolean)">
            <summary>
               Define the parameters that will be used to create the group structure
            </summary>
            <param name="allParameters">Enumeration of all parameters that will be displayed in groups</param>
            <param name="displayParameterUsingGroupStructure">
               Should the parameters be displayed using the container hierarchy
               (MoBi) or group structure (PKSim)
            </param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.AddParamtersAndCovariates(System.Collections.Generic.IEnumerable{OSPSuite.Core.Domain.IParameter},System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)">
            <summary>
               Define the parameters that will be used to create the group structure and add the covariates defined in the
               population given as parameter
            </summary>
            <param name="allParameters">Enumeration of all parameters that will be displayed in groups</param>
            <param name="allCovariateNames">Covariates to add under the individual charateristics node</param>
            <param name="displayParameterUsingGroupStructure">
               Should the parameters be displayed using the container hierarchy
               (MoBi) or group structure (PKSim)
            </param>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.SelectedNode">
            <summary>
               Returns the selected node (null if no node is being selected)
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.SelectedParameter">
            <summary>
               Returns the selected parameter or null if no parameter is selected.
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.SelectedCovariate">
            <summary>
               Returns the selected covariate or null if no covariate is selected
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.GroupNodeSelected">
            <summary>
               Event is triggered whenever a group node is selected (i.e. a folder node)
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.CovariateNodeSelected">
            <summary>
               Event is triggered whenever a node representing a covariate is selected
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.ParameterNodeSelected">
            <summary>
               Event is triggered whenevener a parameter node is selected
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.ParameterNodeDoubleClicked">
            <summary>
               Event is triggered whenevener a parameter node was double clicked
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.CovariateNodeDoubleClicked">
            <summary>
               Event is triggered whenever a node representing a covariate is selected
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.RemoveParameter(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Remove parameter from the view
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.AddParameter(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Add parameter to the view
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.SelectParameter(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Select the node for the given parameter (if the node is defined)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.HasNodeFor(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Returns if a node was defined for the given parameter
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.NodeFor(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Returns the node defined for the given parameter. Null otherwise
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.PruneNode(OSPSuite.Presentation.Nodes.ITreeNode)">
            <summary>
               prunes the given node and returns the deleted nodes
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Populations.IPopulationParameterGroupsPresenter.EnableFilter">
            <summary>
               True if filter is enabled otherwise false
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ProteinExpression.IProteinExpressionDataHelper.ConvertToDataTable(System.Object[])">
            <summary>
               Converts an arraylist of a class object to a data table object.
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ProteinExpression.IProteinExpressionDataHelper.GetDistinctLoV(System.Data.DataColumn)">
            <summary>
               This helping method retrieves a string collection with all distinct values of the given column.
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ProteinExpression.IProteinExpressionsPresenter.InitializeSettings(PKSim.Core.Model.QueryExpressionSettings)">
            <summary>
               Prepare the presenter to perform a query according to the settings defined in
               <para>querySettings</para>
            </summary>
            <param name="querySettings">Settings used to initialize the presenter</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ProteinExpression.IProteinExpressionsPresenter.GetQueryResults">
            <summary>
               Retrieve the result of the query
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ProteinExpression.ProteinExpressionsPresenter.EditMapping">
            <summary>
               This method is called to display a mapping view to enable the user to change the container-tissue mapping.
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Protocols.IProtocolPresenter.SwitchModeConfirm(PKSim.Core.Model.ProtocolMode)">
            <summary>
               Returns true if the switch between protocol mode is allowed or has been approved by the user
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ICloneSimulationPresenter.CloneSimulation(PKSim.Core.Model.Simulation)">
            <summary>
               Starts the clone workflow which is simply a configuration with different view title and icons
            </summary>
            <param name="simulationToClone"> Simulation to clone </param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.IConfigureSimulationPresenter.ConfigureSimulation(PKSim.Core.Model.Simulation)">
            <summary>
               Starts the configuration workflow for the given simulationToClone
            </summary>
            <param name="simulation"> Simulation to configure </param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.IConfigureSimulationPresenter.ConfigureSimulationWithBuildingBlock(PKSim.Core.Model.Simulation,PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Starts the configuration workflow for the given simulationToClone and set the template building block als selected
               building block
            </summary>
            <param name="simulation"> Simulation to configure </param>
            <param name="templateBuildingBlock">
               Template building block that should be selected (even of the simulationToClone is
               not using it)
            </param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.IImportPopulationSimulationPresenter.CreateImportPopulationSimulation(System.String)">
            <summary>
               Starts the import population workflow. If the <paramref name="simulationFilePath" /> is defined, the file will be
               used for the simulation
               and the simulation selection will be hidden.
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.IReactionDiagramPresenter.Edit(PKSim.Core.Model.Simulation,System.Boolean)">
            <summary>
               Sets the subject of this reaction diagram to the simulation
            </summary>
            <param name="simulation">The simulation containing the reaction being displayed</param>
            <param name="recreateDiagram">
               Specifies if the diagram model should be recreated (in case of update or config where the
               config might change)
            </param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.SimulationCompoundCollectorPresenterBase`2.ShouldBeDisplayed(`1)">
            <summary>
               Specifies whether a view from the presenter should be displayed
            </summary>
            <param name="presenter">The presenter that should be checked whether or not display is required</param>
            <returns>True if the display should be shown, otherwise false.</returns>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundProcessPresenter.SaveConfiguration">
            <summary>
               Saves the current mapping in the compound properties
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundProcessPresenter.EditProcessesIn(PKSim.Core.Model.Simulation,PKSim.Core.Model.CompoundProperties)">
            <summary>
               Initializes the presenter with the simulation and the given compoundProperties
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundProcessPresenter.AllSystemicProcessesFor(PKSim.Presentation.DTO.Simulations.SimulationSystemicProcessSelectionDTO)">
            <summary>
               Returns the systemic processes available in the compound for the given selection
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundProcessPresenter.SelectionChanged(PKSim.Presentation.DTO.Simulations.SimulationSystemicProcessSelectionDTO)">
            <summary>
               Is called whenever the selection of a systemic process has changed
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundProcessPresenter.HasProcessesDefined">
            <summary>
               True if the subject of this presenter has any processes defined
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundProcessPresenter`2.AllCompoundProcesses">
            <summary>
               Returns the available proteins defined for the given partial process type
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundProcessPresenter`2.CompoundProcessChanged(`1,PKSim.Core.Model.PartialProcess)">
            <summary>
               Called whenever the selected partial process is being changed
            </summary>
            <param name="simulationPartialProcessDTO">actual selection</param>
            <param name="partialProcess">Process being selected</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundProcessPresenter`2.SelectionChanged(`1)">
            <summary>
               Is called whenever the selection of a partial process has changed
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundProcessSummaryPresenter.HasProcessesDefined">
            <summary>
            True if any processes are defined in the subject of this presenter
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundsSelectionPresenter.SelectionChanged(PKSim.Presentation.DTO.Simulations.CompoundSelectionDTO)">
            <summary>
               Is triggered whenever a compound is selected or deselected in the selection view
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundsSelectionPresenter.AddCompound">
            <summary>
               Adds a compound to the project
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundsSelectionPresenter.LoadCompoundAsync">
            <summary>
               Loads a compound into the project
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundsSelectionPresenter.SelectedCompounds">
            <summary>
               Returns the compounds selected by the user
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationCompoundsSelectionPresenter.UpdateSelectedCompound(PKSim.Core.Model.Compound)">
            <summary>
               Ensures that the given <paramref name="templateCompound" /> is used instead of the compound with same name that
               might have changed in the simulation
            </summary>
            <param name="templateCompound">The template compound that should be selected</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.IConfigurationPresenter.SaveConfiguration">
            <summary>
               Save the configuration defined in the presenter
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Simulations.ISimulationModelConfigurationPresenter.SimulationCreated">
            <summary>
               Return true if the simulation was created otherwise false
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Simulations.ISimulationModelConfigurationPresenter.Simulation">
            <summary>
               return the edited or created simulation
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationModelConfigurationPresenter.CreateSimulation">
            <summary>
               Create a template simulation with the selected individual
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationModelConfigurationPresenter.CreateSimulationBasedOn(PKSim.Core.Model.Simulation)">
            <summary>
               Create a template simulation based on the given simulation (same used building blocks)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationModelConfigurationPresenter.UpdateSelectedSubject(PKSim.Core.Model.ISimulationSubject)">
            <summary>
            Ensures that the <paramref name="templateSimulationSubject"/> is the one being used instead of the original <see cref="T:PKSim.Core.Model.ISimulationSubject"/> that was used
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationModelConfigurationPresenter.UpdateSelectedCompound(PKSim.Core.Model.Compound)">
            <summary>
            Ensures that the <paramref name="templateCompound"/> is the one being used instead of the original <see cref="T:PKSim.Core.Model.Compound"/> that was used
            </summary>
            <param name="templateCompound"></param>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Simulations.ISimulationModelSelectionPresenter.ModelProperties">
            <summary>
               Returns the selected model configuration as defined in the view
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationOutputSelectionPresenter`1.CreateSettings(`0)">
            <summary>
               Starts the presenter and display the settings used to run the simulation population.
               Returns the edited settings if the user confirms the action otherwise null
            </summary>
            <param name="simulation"> Simulation for which the setting should be edited </param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationSubjectConfigurationPresenter.UpdateSelectedSubject(PKSim.Core.Model.ISimulationSubject)">
            <summary>
               This method is called whenever the selected subject has changed
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Simulations.ISimulationSubjectConfigurationPresenter.SubjectChanged">
            <summary>
               did the subject of the simulation (individual or population changed?)
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Simulations.ISimulationSubjectConfigurationPresenter.SelectedSubject">
            <summary>
               Returns the underlying simulation subject
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.ISimulationWizardPresenter.CreateSimulation">
            <summary>
               Creates the <see cref="P:PKSim.Presentation.Presenters.Simulations.ISimulationWizardPresenter.Simulation" />  for the given workflow and close the view in case of success
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Simulations.SimulationWizardPresenter`1.SaveBuildingBlocksConfiguration">
            <summary>
               Save the configuration defined in all SimulationItem presenters
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Snapshots.ILoadFromSnapshotPresenter.SelectFile">
            <summary>
               Starts the snapshot file selection process. Returns <c>true</c> if a file was selected of <c>false</c> if the
               selection was canceled
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.Snapshots.ILoadFromSnapshotPresenter.SnapshotFile">
            <summary>
               File selected by the user containing the snapshot being loaded.
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Snapshots.ILoadProjectFromSnapshotPresenter.LoadProject">
            <summary>
            Project loaded from selected snapshot file. It is null if the user cancels the action or if the file was not loaded properly
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.Snapshots.ILoadSimulationFromSnapshotPresenter.LoadSimulation">
            <summary>
               Simulation loaded from selected snapshot file. It is null if the user cancels the action or if the file was not
               loaded properly
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ITemplatePresenter.LoadFromTemplateAsync``1(PKSim.Core.Model.TemplateType)">
            <summary>
               Allows the user to select a template to be loaded from the template database for the given
               <paramref name="templateType" />
            </summary>
            <param name="templateType">Type of object that should be loaded</param>
            <returns>The loaded template if the user completed the action successfully otherwise null</returns>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ITemplatePresenter.Rename(PKSim.Presentation.DTO.TemplateDTO)">
            <summary>
               Rename the building block template given as parameter
            </summary>
            <param name="template">Building block template to rename</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ITemplatePresenter.Delete(PKSim.Presentation.DTO.TemplateDTO)">
            <summary>
               Delete the building block template given as parameter
            </summary>
            <param name="templateDTO">Building block template to delete</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ITemplatePresenter.Delete(System.Collections.Generic.IReadOnlyList{PKSim.Presentation.DTO.TemplateDTO})">
            <summary>
               Delete the building block templates given as parameter
            </summary>
            <param name="templateDTOs">Building block templates to delete</param>
        </member>
        <member name="M:PKSim.Presentation.Presenters.ITemplatePresenter.CanEdit(PKSim.Presentation.DTO.TemplateDTO)">
            <summary>
               Returns true if the user can edit the given <paramref name="template" /> otherwise false
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Presenters.ITemplatePresenter.ShowOnlyQualifiedTemplate">
            <summary>
               Specifies of only qualified templates should be displayed or not. This filtering only applied to remote templates
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.IUserSettingsPresenter.SelectTemplateDatabase">
            <summary>
               Select an existing template database
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.IUserSettingsPresenter.CreateTemplateDatabase">
            <summary>
               Create a new template database
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.IUserSettingsPresenter.AllSpecies">
            <summary>
               All available species name
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.IUserSettingsPresenter.ResetLayout">
            <summary>
               Resets the layout
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.IUserSettingsPresenter.AllPopulationAnalyses">
            <summary>
               All available population analysis type
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.IUserSettingsPresenter.PopulationAnalysesDisplayFor(PKSim.Core.Model.PopulationAnalysisType)">
            <summary>
               returns the text that should be displayed for the given <paramref name="populationAnalysisType" />
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Presenters.IUserSettingsPresenter.PopulationIconNameFor(PKSim.Core.Model.PopulationAnalysisType)">
            <summary>
               returns the name of the icon that should be displayed for the given <paramref name="populationAnalysisType" />
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Services.IBuildingBlockSelectionDisplayer.DisplayNameFor(PKSim.Core.Model.IPKSimBuildingBlock,PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Returns the name to be displayed for the given <paramref name="buildingBlock" /> in the context of a building block
               selection.
               If the <paramref name="emptySelection" /> is not null, it will be used to identify a non existant selection
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Services.IBuildingBlockSelectionDisplayer.IconFor(PKSim.Core.Model.IPKSimBuildingBlock,PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Returns the icon to be displayed for the given <paramref name="buildingBlock" /> in the context of a building block
               selection.
               If the <paramref name="emptySelection" /> is not null, it will be used to identify a non existant selection
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Services.IBuildingBlockSelectionDisplayer.ToolTipFor(PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Returns the tooltip for the given <paramref name="buildingBlock" />
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Services.BuildingBlockTask`1.AddToProject``1">
            <summary>
               Launch the create building block presenter implementing TCreatePresenter and start the creation process
            </summary>
            <typeparam name="TCreatePresenter">Type of presenter that will be started to create the new building block</typeparam>
            <returns>The created building block, if the action was confirmed by the user or cancel otherwise</returns>
        </member>
        <member name="M:PKSim.Presentation.Services.BuildingBlockTask`1.AddToProject``1(System.Func{``0,PKSim.Core.Commands.IPKSimCommand})">
            <summary>
               Launch the create building block presenter implementing TCreatePresenter and start the creation process
            </summary>
            <typeparam name="TCreatePresenter">Type of presenter that will be started to create the new building block</typeparam>
            <param name="createFunction">Function of the presenter that will be called to launch the creation function</param>
            <returns>The created building block, if the action was confirmed by the user or cancel otherwise</returns>
        </member>
        <member name="M:PKSim.Presentation.Services.BuildingBlockTask`1.AddToProject(`0,System.Boolean,System.Boolean)">
            <summary>
               Add the building block to the project using a command
            </summary>
            <param name="buildingBlock">building block to add</param>
            <param name="editBuildingBlock">If set to <c>true</c>, the edit workflow is started automatically. Default is true</param>
            <param name="addToHistory">If set to <c>true</c>, the command is added to the history. Default is true</param>
        </member>
        <member name="M:PKSim.Presentation.Services.ICompoundAlternativePresentationTask.EditSolubilityTableFor(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Edits the solubility table for the given <paramref name="parameter" />
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Services.ICompoundAlternativePresentationTask.AddParameterGroupAlternativeTo(PKSim.Core.Model.ParameterAlternativeGroup)">
            <summary>
               Creates an alternative, asks the user for its name,  and adds it to the given
               <paramref name="compoundParameterGroup" />
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Services.ICompoundAlternativePresentationTask.RenameParameterAlternative(PKSim.Core.Model.ParameterAlternative)">
            <summary>
               Renames the given <paramref name="parameterAlternative" />
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Services.ICompoundProcessPresentationTask.CreateInhibitionProcessFor(PKSim.Core.Model.Compound)">
            <summary>
            Creates a new inhibition process for the compound
            </summary>
            <param name="compound">The compound having an inhibition process added</param>
            <returns>The command used to add the process</returns>
        </member>
        <member name="M:PKSim.Presentation.Services.ICompoundProcessPresentationTask.CreateInductionProcessFor(PKSim.Core.Model.Compound)">
            <summary>
            Creates a new induction process for the compound
            </summary>
            <param name="compound">The compound having an induction process added</param>
            <returns>The command used to add the process</returns>
        </member>
        <member name="M:PKSim.Presentation.Services.ICompoundProcessPresentationTask.AreProcessesBoth``1(System.Type,System.Type)">
            <summary>
            Determines if the derive from the same partial process.
            </summary>
            <typeparam name="TProcess">The partial process type. This should be the least derived</typeparam>
            <param name="t1">The first type</param>
            <param name="t2">The second type</param>
            <returns>If <paramref name="t1"/> and <paramref name="t2"/> both derive from the same partial process then return true, 
            otherwise false</returns>
        </member>
        <member name="M:PKSim.Presentation.Services.IConfigureSimulationTask.Configure(PKSim.Core.Model.Simulation)">
            <summary>
               Starts the configure simulation workflow
            </summary>
            <param name="simulationToConfigure"></param>
        </member>
        <member name="M:PKSim.Presentation.Services.IConfigureSimulationTask.Configure(PKSim.Core.Model.Simulation,PKSim.Core.Model.IPKSimBuildingBlock)">
            <summary>
               Stats the configure and select the given building block
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Services.IEditMoleculeTask`1.AddExpressionProfile``1(`0)">
            <summary>
               Add a molecule of type <typeparamref name="TMolecule" /> to the given individual
            </summary>
            <typeparam name="TMolecule">Type of molecule to add. The molecule will be created depending on this type </typeparam>
            <param name="simulationSubject">Simulation subject where the molecule will be added</param>
        </member>
        <member name="M:PKSim.Presentation.Services.IEditMoleculeTask`1.RemoveMoleculeFrom(PKSim.Core.Model.IndividualMolecule,`0)">
            <summary>
               Remove the given molecule from the simulationSubject
            </summary>
            <param name="moleculeToRemove">Molecule to be removed</param>
            <param name="simulationSubject">Simulation subject containing the molecule to be removed</param>
        </member>
        <member name="M:PKSim.Presentation.Services.IExpressionProfileProteinDatabaseTask.QueryDatabase(PKSim.Core.Model.ExpressionProfile,System.String)">
            <summary>
               Edit the given molecule defined in the simulationSubject
            </summary>
            <param name="expressionProfile">Edited expression profile</param>
            <param name="moleculeName">Predefined name for the query</param>
        </member>
        <member name="M:PKSim.Presentation.Services.IExpressionProfileProteinDatabaseTask.CanQueryProteinExpressionsFor(PKSim.Core.Model.ExpressionProfile)">
            <summary>
               return true if a protein expression database was defined for the species referenced in
               <paramref name="expressionProfile" />, otherwise
               false
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Services.IExpressionProfileProteinDatabaseTask.CanQueryProteinExpressionsFor(OSPSuite.Core.Domain.Builder.ExpressionProfileBuildingBlock)">
            <summary>
               return true if a protein expression database was defined for the species and molecule referenced in
               <paramref name="expressionProfile" />, otherwise
               false
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Services.IExpressionProfileProteinDatabaseTask.QueryDatabase(OSPSuite.Core.Domain.Builder.ExpressionProfileBuildingBlock)">
            <summary>
               Edit the given molecule defined in the <paramref name="expressionProfileBuildingBlock" />
            </summary>
            <param name="expressionProfileBuildingBlock">Edited expression profile</param>
        </member>
        <member name="M:PKSim.Presentation.Services.IChartTemplatingTask.CloneChart``1(``0,PKSim.Core.Model.IndividualSimulation)">
            <summary>
               Clone the chart belonging in the simulation
            </summary>
            <param name="originalChart">original chart to clone</param>
            <param name="simulation">Simulation containing the chart to clone</param>
        </member>
        <member name="M:PKSim.Presentation.Services.IUserSettingsPersistor.SaveCurrent">
            <summary>
            Saves current user settings
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Services.ISimulationTask.UpdateUsedBuildingBlockInSimulation``1(``0,PKSim.Core.Model.UsedBuildingBlock,PKSim.Core.Model.Simulation)">
            <summary>
               update the given template building block into the simulation
            </summary>
            <typeparam name="TBuildingBlock">Type of building block</typeparam>
            <param name="templateBuildingBlock">Template building block used as source of the update</param>
            <param name="usedBuildingBlock">used building block whose value/structure will be updated</param>
            <param name="simulation">simulation containing the used building block</param>
        </member>
        <member name="M:PKSim.Presentation.Services.ISimulationTask.CommitBuildingBlockToRepository``1(``0,PKSim.Core.Model.UsedBuildingBlock,PKSim.Core.Model.Simulation)">
            <summary>
               Save the change made in the used building block belonging in the simulation into the given template building block
            </summary>
            <typeparam name="TBuildingBlock">Type of building block</typeparam>
            <param name="templateBuildingBlock">Template building block that will be updated</param>
            <param name="usedBuildingBlock">used building block from which the values will be taken</param>
            <param name="simulation">simulation containing the used building block</param>
        </member>
        <member name="M:PKSim.Presentation.Services.ISimulationTask.ShowDifferencesBetween``1(``0,PKSim.Core.Model.UsedBuildingBlock,PKSim.Core.Model.Simulation)">
            <summary>
               Shows the difference between the template building block and the building block used in the simulation
            </summary>
            <typeparam name="TBuildingBlock">Type of building block</typeparam>
            <param name="templateBuildingBlock">Template building block </param>
            <param name="usedBuildingBlock">used building block</param>
            <param name="simulation">containing the used building block</param>
        </member>
        <member name="M:PKSim.Presentation.Services.ISimulationTask.ImportResultsIn(PKSim.Core.Model.PopulationSimulation)">
            <summary>
               Import external results into simulation (for example from cluster export)
            </summary>
            <param name="populationSimulation">PopulationSimulation for which results should be imported</param>
        </member>
        <member name="M:PKSim.Presentation.Services.ISimulationTask.ImportPKAnalyses(PKSim.Core.Model.PopulationSimulation)">
            <summary>
               Import external PK-Analyses into simulation (for example from matlab user defined scripts)
            </summary>
            <param name="populationSimulation">PopulationSimulation for which pk-analyses should be imported</param>
        </member>
        <member name="P:PKSim.Presentation.StartOptions.FileToLoad">
            <summary>
               File that should be loaded automatically
            </summary>
        </member>
        <member name="P:PKSim.Presentation.StartOptions.IsDeveloperMode">
            <summary>
               Specifies if the app should be started in developer mode. Default is <c>false</c>
            </summary>
        </member>
        <member name="P:PKSim.Presentation.StartOptions.StartOptionMode">
            <summary>
               Loading a project or a simulation file
            </summary>
        </member>
        <member name="T:PKSim.Presentation.UICommands.ImportPopulationCommand">
            <summary>
               Starts the import workflow from files. A new population building block will be created based on the selected
               population files.
               If the import works, the simulation will be added to the project
            </summary>
        </member>
        <member name="T:PKSim.Presentation.ViewLayoutId">
            <summary>
               Specifies how the layout in wizard based application should be created (only available in certain use case such as
               Create Simulation)
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Views.Compounds.ICompoundInSimulationView.HideCachedView(OSPSuite.Presentation.Views.IView)">
            <summary>
            Hides a view that was added using caching. If the view cannot be found nothing will happen
            </summary>
            <seealso cref="M:PKSim.Presentation.Views.Compounds.ICompoundInSimulationView.AddCachedView(OSPSuite.Presentation.Views.IView)"/>
            <param name="view">The view being hidden.</param>
        </member>
        <member name="M:PKSim.Presentation.Views.Compounds.ICompoundInSimulationView.AddCachedView(OSPSuite.Presentation.Views.IView)">
            <summary>
            Adds a view to the this view that can be hidden later using <seealso cref="M:PKSim.Presentation.Views.Compounds.ICompoundInSimulationView.HideCachedView(OSPSuite.Presentation.Views.IView)"/>
            </summary>
            <param name="baseView">The view being added</param>
        </member>
        <member name="M:PKSim.Presentation.Views.Compounds.IEnzymaticCompoundProcessView.UpdateAvailableCompounds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the list of compound that can be used as metabolite
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Views.Diagrams.IReactionDiagramModalView.SetView(OSPSuite.Presentation.Views.IView)">
            <summary>
            Add the underlying view to the modal view
            </summary>
            <param name="baseView">The view to add</param>
        </member>
        <member name="M:PKSim.Presentation.Views.IConfigurableContainerLayoutView.StartAddingViews">
            <summary>
            Adds finishing touches to the view once it's been configured
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Views.IConfigurableContainerLayoutView.AddView(OSPSuite.Presentation.Views.IView)">
            <summary>
            Adds a view dynamically to the list of views shown
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:PKSim.Presentation.Views.IConfigurableContainerLayoutView.FinishedAddingViews">
            <summary>
            Adds finishing touches to the view once it's been configured
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Views.IConfigurableLayoutView.SetView(OSPSuite.Presentation.Views.IView)">
            <summary>
               Replace the collection style controls view with any view. Normally used when only a single view is being displayed
               eliminating the need for the collection style controls
            </summary>
            <param name="view">The view being added</param>
        </member>
        <member name="M:PKSim.Presentation.Views.IMultiplePanelView.ActivateView(OSPSuite.Presentation.Views.IView)">
            <summary>
               Add the view as a new panel
            </summary>
            <param name="view">The view being inserted</param>
        </member>
        <member name="M:PKSim.Presentation.Views.IMultiplePanelView.HideView(OSPSuite.Presentation.Views.IView)">
            <summary>
               Hides the panel conmtaing the <paramref name="view"/>
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Views.Individuals.IOntogenySelectionView.BindTo(PKSim.Core.Model.IndividualMolecule)">
            <summary>
               Bind the view to the given protein and set the selected ontogeny
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Individuals.IOntogenySelectionView.ShowOntogenyEnabled">
            <summary>
               sets if the show ontogeny button is enabled or disabled
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.IResizableWithDefaultHeightView.DefaultHeight">
            <summary>
            Default height placeholder that will be used to initialize the container of this view
            This is required to avoid a flickering effect. 
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Parameters.IMultiParameterEditView.AllVisibleParameters">
            <summary>
               Returns all parameters currently being displayed in the view. This is a subset of all edited parameters (user might
               have filtered out some parameters)
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Parameters.IMultiParameterEditView.UseAdvancedSortingMode">
            <summary>
               if set to true, parameter will be compared for sort only if sharing the same hierarchy of visible groups
               It is useful for events, default is false
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Parameters.IMultiParameterEditView.CustomSortEnabled">
            <summary>
               Set to false, the custom sort using parameter sequence is not taken into consideration. Default is true
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Parameters.IMultiParameterEditView.SelectedParameters">
            <summary>
               Returns or set parameters selected in the view.
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Parameters.IMultiParameterEditView.ReadOnly">
            <summary>
            Is the view readonly or not
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.PopulationAnalyses.IPopulationAnalysisChartView`3.DragDropEnabled">
            <summary>
            Specify if Drag and drop operations are enabled on view. Default is <c>false</c>
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Views.PopulationAnalyses.IPopulationAnalysisChartView`3.OnDragOverEvent">
            <summary>
               Event is fired when some data are dragged over view
            </summary>
        </member>
        <member name="E:PKSim.Presentation.Views.PopulationAnalyses.IPopulationAnalysisChartView`3.OnDragDropEvent">
            <summary>
               Event is fired when some data are dropped onto view
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Populations.IPopulationParameterGroupsView.SelectedNode">
            <summary>
               Returns the seleced node
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Views.Populations.IPopulationParameterGroupsView.AddNodes(System.Collections.Generic.IEnumerable{OSPSuite.Presentation.Nodes.ITreeNode})">
            <summary>
               Add the nodes to the tree view
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Views.Populations.IPopulationParameterGroupsView.NodeFor(OSPSuite.Core.Domain.IParameter)">
            <summary>
               Returns the node representing the parameter in the hiearchy. Null is returned if no node has been defined for the
               parameter
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Views.Populations.IPopulationParameterGroupsView.RemoveNode(OSPSuite.Presentation.Nodes.ITreeNode)">
            <summary>
               Remove the given node from the hiearchy
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Views.Populations.IPopulationParameterGroupsView.Clear">
            <summary>
               Remove all nodes
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Views.Populations.IPopulationParameterGroupsView.SelectNode(OSPSuite.Presentation.Nodes.ITreeNode)">
            <summary>
               Select the given <paramref name="node" />
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Views.Populations.IPopulationParameterGroupsView.RemoveNodes(System.Collections.Generic.IEnumerable{OSPSuite.Presentation.Nodes.ITreeNode})">
            <summary>
               Remove the nodes from the hierarchy
            </summary>
            <param name="allDeletedNodes"></param>
        </member>
        <member name="M:PKSim.Presentation.Views.Populations.IPopulationParameterGroupsView.NodeById(System.String)">
            <summary>
               Returns the node with the id <paramref name="id" /> or null if this node does not exist
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Simulations.IImportPopulationSimulationView.SimulationSelectionVisible">
            <summary>
            Specifies wether simulation file selection is visible or hidden from the user
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Simulations.IImportSimulationPKAnalysesView.ImportingResults">
            <summary>
               Specifiies whether the view import task is running or not
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Simulations.IImportSimulationResultsView.ImportingResults">
            <summary>
               Specifiies whether the view import task is running or not
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Simulations.IImportSimulationResultsView.ImportEnabled">
            <summary>
            Is the import button enabled?
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Simulations.ISimulationCompoundProtocolFormulationView.FormulationKeyVisible">
            <summary>
            set the visibility of the column containg the formulation key
            </summary>
        </member>
        <member name="P:PKSim.Presentation.Views.Simulations.ISimulationCompoundProtocolFormulationView.FormulationVisible">
            <summary>
            Sets the visibility of the formulation view
            </summary>
        </member>
        <member name="M:PKSim.Presentation.Views.Simulations.ISimulationCompoundsSelectionView.SetError(System.String)">
            <summary>
            Sets the error message for the compound selection
            </summary>
            <param name="errorText">The error message text. If null or empty, the error message view will be hidden</param>
        </member>
        <member name="M:PKSim.Presentation.Views.Simulations.ISimulationCompoundsSelectionView.HideError">
            <summary>
            Hides the error message
            </summary>
        </member>
    </members>
</doc>
