
# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples

on:
  workflow_call:

name: R-CMD-check

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-latest,   r: 'release'}
          - {os: macos-latest, r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check

      - uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          args: 'c("--no-manual", "--no-vignettes")'
          build_args: 'c("--no-manual", "--no-build-vignettes")'
          error-on: 'c("error")'

      - name: Build package
        if: ${{ success() }}
        run: |
          output_dir <- file.path(normalizePath(Sys.getenv("RUNNER_TEMP"), winslash = "/"), "built_package")
          dir.create(output_dir)
          # first run build() to get a bundle package (that includes rendered vignettes), then create binary.
          devtools::build(devtools::build(), binary = TRUE, path = output_dir, args=c("--preclean", "--install-tests"))
        shell: Rscript {0}

      - name: Get package name, version and R versions and store in environment
        run: |
          echo "PKG_NAME=$(Rscript -e 'cat(pkgload::pkg_name())')" >>  $GITHUB_ENV
          echo "PKG_VERSION=$(Rscript -e 'cat(as.character(desc::desc_get_version()))')" >> $GITHUB_ENV
          echo "R_VERSION=$(Rscript -e 'cat(R.version$major, R.version$minor, sep = ".")')" >> $GITHUB_ENV
        shell: bash

      - name: Upload built package
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG_NAME }}-v${{ env.PKG_VERSION }}-${{runner.os}}-r_${{ env.R_VERSION }}
          path: ${{ runner.temp }}/built_package/*
